
Weight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000837c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  08008490  08008490  00018490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008980  08008980  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  08008980  08008980  00018980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008988  08008988  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008988  08008988  00018988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800898c  0800898c  0001898c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08008990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  200001f8  08008b88  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  08008b88  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007619  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a3f  00000000  00000000  0002787d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000848  00000000  00000000  000292c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000641  00000000  00000000  00029b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017eaf  00000000  00000000  0002a149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b06c  00000000  00000000  00041ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008413c  00000000  00000000  0004d064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003728  00000000  00000000  000d11a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000d48c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008474 	.word	0x08008474

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	08008474 	.word	0x08008474

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2uiz>:
 8001110:	0042      	lsls	r2, r0, #1
 8001112:	d20e      	bcs.n	8001132 <__aeabi_f2uiz+0x22>
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30b      	bcc.n	8001132 <__aeabi_f2uiz+0x22>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d409      	bmi.n	8001138 <__aeabi_f2uiz+0x28>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	fa23 f002 	lsr.w	r0, r3, r2
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr
 8001138:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800113c:	d101      	bne.n	8001142 <__aeabi_f2uiz+0x32>
 800113e:	0242      	lsls	r2, r0, #9
 8001140:	d102      	bne.n	8001148 <__aeabi_f2uiz+0x38>
 8001142:	f04f 30ff 	mov.w	r0, #4294967295
 8001146:	4770      	bx	lr
 8001148:	f04f 0000 	mov.w	r0, #0
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <__aeabi_ldivmod>:
 8001150:	b97b      	cbnz	r3, 8001172 <__aeabi_ldivmod+0x22>
 8001152:	b972      	cbnz	r2, 8001172 <__aeabi_ldivmod+0x22>
 8001154:	2900      	cmp	r1, #0
 8001156:	bfbe      	ittt	lt
 8001158:	2000      	movlt	r0, #0
 800115a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800115e:	e006      	blt.n	800116e <__aeabi_ldivmod+0x1e>
 8001160:	bf08      	it	eq
 8001162:	2800      	cmpeq	r0, #0
 8001164:	bf1c      	itt	ne
 8001166:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800116a:	f04f 30ff 	movne.w	r0, #4294967295
 800116e:	f000 b9dd 	b.w	800152c <__aeabi_idiv0>
 8001172:	f1ad 0c08 	sub.w	ip, sp, #8
 8001176:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800117a:	2900      	cmp	r1, #0
 800117c:	db09      	blt.n	8001192 <__aeabi_ldivmod+0x42>
 800117e:	2b00      	cmp	r3, #0
 8001180:	db1a      	blt.n	80011b8 <__aeabi_ldivmod+0x68>
 8001182:	f000 f86d 	bl	8001260 <__udivmoddi4>
 8001186:	f8dd e004 	ldr.w	lr, [sp, #4]
 800118a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800118e:	b004      	add	sp, #16
 8001190:	4770      	bx	lr
 8001192:	4240      	negs	r0, r0
 8001194:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001198:	2b00      	cmp	r3, #0
 800119a:	db1b      	blt.n	80011d4 <__aeabi_ldivmod+0x84>
 800119c:	f000 f860 	bl	8001260 <__udivmoddi4>
 80011a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011a8:	b004      	add	sp, #16
 80011aa:	4240      	negs	r0, r0
 80011ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011b0:	4252      	negs	r2, r2
 80011b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011b6:	4770      	bx	lr
 80011b8:	4252      	negs	r2, r2
 80011ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011be:	f000 f84f 	bl	8001260 <__udivmoddi4>
 80011c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011ca:	b004      	add	sp, #16
 80011cc:	4240      	negs	r0, r0
 80011ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011d2:	4770      	bx	lr
 80011d4:	4252      	negs	r2, r2
 80011d6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011da:	f000 f841 	bl	8001260 <__udivmoddi4>
 80011de:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011e6:	b004      	add	sp, #16
 80011e8:	4252      	negs	r2, r2
 80011ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011ee:	4770      	bx	lr

080011f0 <__aeabi_d2lz>:
 80011f0:	b538      	push	{r3, r4, r5, lr}
 80011f2:	4605      	mov	r5, r0
 80011f4:	460c      	mov	r4, r1
 80011f6:	2200      	movs	r2, #0
 80011f8:	2300      	movs	r3, #0
 80011fa:	4628      	mov	r0, r5
 80011fc:	4621      	mov	r1, r4
 80011fe:	f7ff fbdd 	bl	80009bc <__aeabi_dcmplt>
 8001202:	b928      	cbnz	r0, 8001210 <__aeabi_d2lz+0x20>
 8001204:	4628      	mov	r0, r5
 8001206:	4621      	mov	r1, r4
 8001208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800120c:	f000 b80a 	b.w	8001224 <__aeabi_d2ulz>
 8001210:	4628      	mov	r0, r5
 8001212:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001216:	f000 f805 	bl	8001224 <__aeabi_d2ulz>
 800121a:	4240      	negs	r0, r0
 800121c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001220:	bd38      	pop	{r3, r4, r5, pc}
 8001222:	bf00      	nop

08001224 <__aeabi_d2ulz>:
 8001224:	b5d0      	push	{r4, r6, r7, lr}
 8001226:	2200      	movs	r2, #0
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <__aeabi_d2ulz+0x34>)
 800122a:	4606      	mov	r6, r0
 800122c:	460f      	mov	r7, r1
 800122e:	f7ff f953 	bl	80004d8 <__aeabi_dmul>
 8001232:	f7ff fc29 	bl	8000a88 <__aeabi_d2uiz>
 8001236:	4604      	mov	r4, r0
 8001238:	f7ff f8d4 	bl	80003e4 <__aeabi_ui2d>
 800123c:	2200      	movs	r2, #0
 800123e:	4b07      	ldr	r3, [pc, #28]	; (800125c <__aeabi_d2ulz+0x38>)
 8001240:	f7ff f94a 	bl	80004d8 <__aeabi_dmul>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4630      	mov	r0, r6
 800124a:	4639      	mov	r1, r7
 800124c:	f7fe ff8c 	bl	8000168 <__aeabi_dsub>
 8001250:	f7ff fc1a 	bl	8000a88 <__aeabi_d2uiz>
 8001254:	4621      	mov	r1, r4
 8001256:	bdd0      	pop	{r4, r6, r7, pc}
 8001258:	3df00000 	.word	0x3df00000
 800125c:	41f00000 	.word	0x41f00000

08001260 <__udivmoddi4>:
 8001260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001264:	9e08      	ldr	r6, [sp, #32]
 8001266:	460d      	mov	r5, r1
 8001268:	4604      	mov	r4, r0
 800126a:	468e      	mov	lr, r1
 800126c:	2b00      	cmp	r3, #0
 800126e:	d14c      	bne.n	800130a <__udivmoddi4+0xaa>
 8001270:	428a      	cmp	r2, r1
 8001272:	4694      	mov	ip, r2
 8001274:	d967      	bls.n	8001346 <__udivmoddi4+0xe6>
 8001276:	fab2 f382 	clz	r3, r2
 800127a:	b153      	cbz	r3, 8001292 <__udivmoddi4+0x32>
 800127c:	fa02 fc03 	lsl.w	ip, r2, r3
 8001280:	f1c3 0220 	rsb	r2, r3, #32
 8001284:	fa01 fe03 	lsl.w	lr, r1, r3
 8001288:	fa20 f202 	lsr.w	r2, r0, r2
 800128c:	ea42 0e0e 	orr.w	lr, r2, lr
 8001290:	409c      	lsls	r4, r3
 8001292:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001296:	fbbe f1f7 	udiv	r1, lr, r7
 800129a:	fa1f f58c 	uxth.w	r5, ip
 800129e:	fb07 ee11 	mls	lr, r7, r1, lr
 80012a2:	fb01 f005 	mul.w	r0, r1, r5
 80012a6:	0c22      	lsrs	r2, r4, #16
 80012a8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80012ac:	4290      	cmp	r0, r2
 80012ae:	d90a      	bls.n	80012c6 <__udivmoddi4+0x66>
 80012b0:	eb1c 0202 	adds.w	r2, ip, r2
 80012b4:	f101 3eff 	add.w	lr, r1, #4294967295
 80012b8:	f080 8119 	bcs.w	80014ee <__udivmoddi4+0x28e>
 80012bc:	4290      	cmp	r0, r2
 80012be:	f240 8116 	bls.w	80014ee <__udivmoddi4+0x28e>
 80012c2:	3902      	subs	r1, #2
 80012c4:	4462      	add	r2, ip
 80012c6:	1a12      	subs	r2, r2, r0
 80012c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80012cc:	fb07 2210 	mls	r2, r7, r0, r2
 80012d0:	fb00 f505 	mul.w	r5, r0, r5
 80012d4:	b2a4      	uxth	r4, r4
 80012d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80012da:	42a5      	cmp	r5, r4
 80012dc:	d90a      	bls.n	80012f4 <__udivmoddi4+0x94>
 80012de:	eb1c 0404 	adds.w	r4, ip, r4
 80012e2:	f100 32ff 	add.w	r2, r0, #4294967295
 80012e6:	f080 8104 	bcs.w	80014f2 <__udivmoddi4+0x292>
 80012ea:	42a5      	cmp	r5, r4
 80012ec:	f240 8101 	bls.w	80014f2 <__udivmoddi4+0x292>
 80012f0:	4464      	add	r4, ip
 80012f2:	3802      	subs	r0, #2
 80012f4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80012f8:	2100      	movs	r1, #0
 80012fa:	1b64      	subs	r4, r4, r5
 80012fc:	b11e      	cbz	r6, 8001306 <__udivmoddi4+0xa6>
 80012fe:	40dc      	lsrs	r4, r3
 8001300:	2300      	movs	r3, #0
 8001302:	e9c6 4300 	strd	r4, r3, [r6]
 8001306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800130a:	428b      	cmp	r3, r1
 800130c:	d908      	bls.n	8001320 <__udivmoddi4+0xc0>
 800130e:	2e00      	cmp	r6, #0
 8001310:	f000 80ea 	beq.w	80014e8 <__udivmoddi4+0x288>
 8001314:	2100      	movs	r1, #0
 8001316:	e9c6 0500 	strd	r0, r5, [r6]
 800131a:	4608      	mov	r0, r1
 800131c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001320:	fab3 f183 	clz	r1, r3
 8001324:	2900      	cmp	r1, #0
 8001326:	d148      	bne.n	80013ba <__udivmoddi4+0x15a>
 8001328:	42ab      	cmp	r3, r5
 800132a:	d302      	bcc.n	8001332 <__udivmoddi4+0xd2>
 800132c:	4282      	cmp	r2, r0
 800132e:	f200 80f8 	bhi.w	8001522 <__udivmoddi4+0x2c2>
 8001332:	1a84      	subs	r4, r0, r2
 8001334:	eb65 0203 	sbc.w	r2, r5, r3
 8001338:	2001      	movs	r0, #1
 800133a:	4696      	mov	lr, r2
 800133c:	2e00      	cmp	r6, #0
 800133e:	d0e2      	beq.n	8001306 <__udivmoddi4+0xa6>
 8001340:	e9c6 4e00 	strd	r4, lr, [r6]
 8001344:	e7df      	b.n	8001306 <__udivmoddi4+0xa6>
 8001346:	b902      	cbnz	r2, 800134a <__udivmoddi4+0xea>
 8001348:	deff      	udf	#255	; 0xff
 800134a:	fab2 f382 	clz	r3, r2
 800134e:	2b00      	cmp	r3, #0
 8001350:	f040 808e 	bne.w	8001470 <__udivmoddi4+0x210>
 8001354:	1a88      	subs	r0, r1, r2
 8001356:	2101      	movs	r1, #1
 8001358:	0c17      	lsrs	r7, r2, #16
 800135a:	fa1f fe82 	uxth.w	lr, r2
 800135e:	fbb0 f5f7 	udiv	r5, r0, r7
 8001362:	fb07 0015 	mls	r0, r7, r5, r0
 8001366:	0c22      	lsrs	r2, r4, #16
 8001368:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800136c:	fb0e f005 	mul.w	r0, lr, r5
 8001370:	4290      	cmp	r0, r2
 8001372:	d908      	bls.n	8001386 <__udivmoddi4+0x126>
 8001374:	eb1c 0202 	adds.w	r2, ip, r2
 8001378:	f105 38ff 	add.w	r8, r5, #4294967295
 800137c:	d202      	bcs.n	8001384 <__udivmoddi4+0x124>
 800137e:	4290      	cmp	r0, r2
 8001380:	f200 80cc 	bhi.w	800151c <__udivmoddi4+0x2bc>
 8001384:	4645      	mov	r5, r8
 8001386:	1a12      	subs	r2, r2, r0
 8001388:	fbb2 f0f7 	udiv	r0, r2, r7
 800138c:	fb07 2210 	mls	r2, r7, r0, r2
 8001390:	fb0e fe00 	mul.w	lr, lr, r0
 8001394:	b2a4      	uxth	r4, r4
 8001396:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800139a:	45a6      	cmp	lr, r4
 800139c:	d908      	bls.n	80013b0 <__udivmoddi4+0x150>
 800139e:	eb1c 0404 	adds.w	r4, ip, r4
 80013a2:	f100 32ff 	add.w	r2, r0, #4294967295
 80013a6:	d202      	bcs.n	80013ae <__udivmoddi4+0x14e>
 80013a8:	45a6      	cmp	lr, r4
 80013aa:	f200 80b4 	bhi.w	8001516 <__udivmoddi4+0x2b6>
 80013ae:	4610      	mov	r0, r2
 80013b0:	eba4 040e 	sub.w	r4, r4, lr
 80013b4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80013b8:	e7a0      	b.n	80012fc <__udivmoddi4+0x9c>
 80013ba:	f1c1 0720 	rsb	r7, r1, #32
 80013be:	408b      	lsls	r3, r1
 80013c0:	fa22 fc07 	lsr.w	ip, r2, r7
 80013c4:	ea4c 0c03 	orr.w	ip, ip, r3
 80013c8:	fa25 fa07 	lsr.w	sl, r5, r7
 80013cc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80013d0:	fbba f8f9 	udiv	r8, sl, r9
 80013d4:	408d      	lsls	r5, r1
 80013d6:	fa20 f307 	lsr.w	r3, r0, r7
 80013da:	fb09 aa18 	mls	sl, r9, r8, sl
 80013de:	fa1f fe8c 	uxth.w	lr, ip
 80013e2:	432b      	orrs	r3, r5
 80013e4:	fa00 f501 	lsl.w	r5, r0, r1
 80013e8:	fb08 f00e 	mul.w	r0, r8, lr
 80013ec:	0c1c      	lsrs	r4, r3, #16
 80013ee:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80013f2:	42a0      	cmp	r0, r4
 80013f4:	fa02 f201 	lsl.w	r2, r2, r1
 80013f8:	d90b      	bls.n	8001412 <__udivmoddi4+0x1b2>
 80013fa:	eb1c 0404 	adds.w	r4, ip, r4
 80013fe:	f108 3aff 	add.w	sl, r8, #4294967295
 8001402:	f080 8086 	bcs.w	8001512 <__udivmoddi4+0x2b2>
 8001406:	42a0      	cmp	r0, r4
 8001408:	f240 8083 	bls.w	8001512 <__udivmoddi4+0x2b2>
 800140c:	f1a8 0802 	sub.w	r8, r8, #2
 8001410:	4464      	add	r4, ip
 8001412:	1a24      	subs	r4, r4, r0
 8001414:	b298      	uxth	r0, r3
 8001416:	fbb4 f3f9 	udiv	r3, r4, r9
 800141a:	fb09 4413 	mls	r4, r9, r3, r4
 800141e:	fb03 fe0e 	mul.w	lr, r3, lr
 8001422:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001426:	45a6      	cmp	lr, r4
 8001428:	d908      	bls.n	800143c <__udivmoddi4+0x1dc>
 800142a:	eb1c 0404 	adds.w	r4, ip, r4
 800142e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001432:	d26a      	bcs.n	800150a <__udivmoddi4+0x2aa>
 8001434:	45a6      	cmp	lr, r4
 8001436:	d968      	bls.n	800150a <__udivmoddi4+0x2aa>
 8001438:	3b02      	subs	r3, #2
 800143a:	4464      	add	r4, ip
 800143c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001440:	fba0 9302 	umull	r9, r3, r0, r2
 8001444:	eba4 040e 	sub.w	r4, r4, lr
 8001448:	429c      	cmp	r4, r3
 800144a:	46c8      	mov	r8, r9
 800144c:	469e      	mov	lr, r3
 800144e:	d354      	bcc.n	80014fa <__udivmoddi4+0x29a>
 8001450:	d051      	beq.n	80014f6 <__udivmoddi4+0x296>
 8001452:	2e00      	cmp	r6, #0
 8001454:	d067      	beq.n	8001526 <__udivmoddi4+0x2c6>
 8001456:	ebb5 0308 	subs.w	r3, r5, r8
 800145a:	eb64 040e 	sbc.w	r4, r4, lr
 800145e:	40cb      	lsrs	r3, r1
 8001460:	fa04 f707 	lsl.w	r7, r4, r7
 8001464:	431f      	orrs	r7, r3
 8001466:	40cc      	lsrs	r4, r1
 8001468:	e9c6 7400 	strd	r7, r4, [r6]
 800146c:	2100      	movs	r1, #0
 800146e:	e74a      	b.n	8001306 <__udivmoddi4+0xa6>
 8001470:	fa02 fc03 	lsl.w	ip, r2, r3
 8001474:	f1c3 0020 	rsb	r0, r3, #32
 8001478:	40c1      	lsrs	r1, r0
 800147a:	409d      	lsls	r5, r3
 800147c:	fa24 f000 	lsr.w	r0, r4, r0
 8001480:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001484:	4328      	orrs	r0, r5
 8001486:	fbb1 f5f7 	udiv	r5, r1, r7
 800148a:	fb07 1115 	mls	r1, r7, r5, r1
 800148e:	fa1f fe8c 	uxth.w	lr, ip
 8001492:	0c02      	lsrs	r2, r0, #16
 8001494:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001498:	fb05 f10e 	mul.w	r1, r5, lr
 800149c:	4291      	cmp	r1, r2
 800149e:	fa04 f403 	lsl.w	r4, r4, r3
 80014a2:	d908      	bls.n	80014b6 <__udivmoddi4+0x256>
 80014a4:	eb1c 0202 	adds.w	r2, ip, r2
 80014a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80014ac:	d22f      	bcs.n	800150e <__udivmoddi4+0x2ae>
 80014ae:	4291      	cmp	r1, r2
 80014b0:	d92d      	bls.n	800150e <__udivmoddi4+0x2ae>
 80014b2:	3d02      	subs	r5, #2
 80014b4:	4462      	add	r2, ip
 80014b6:	1a52      	subs	r2, r2, r1
 80014b8:	fbb2 f1f7 	udiv	r1, r2, r7
 80014bc:	fb07 2211 	mls	r2, r7, r1, r2
 80014c0:	b280      	uxth	r0, r0
 80014c2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80014c6:	fb01 f20e 	mul.w	r2, r1, lr
 80014ca:	4282      	cmp	r2, r0
 80014cc:	d908      	bls.n	80014e0 <__udivmoddi4+0x280>
 80014ce:	eb1c 0000 	adds.w	r0, ip, r0
 80014d2:	f101 38ff 	add.w	r8, r1, #4294967295
 80014d6:	d216      	bcs.n	8001506 <__udivmoddi4+0x2a6>
 80014d8:	4282      	cmp	r2, r0
 80014da:	d914      	bls.n	8001506 <__udivmoddi4+0x2a6>
 80014dc:	3902      	subs	r1, #2
 80014de:	4460      	add	r0, ip
 80014e0:	1a80      	subs	r0, r0, r2
 80014e2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80014e6:	e73a      	b.n	800135e <__udivmoddi4+0xfe>
 80014e8:	4631      	mov	r1, r6
 80014ea:	4630      	mov	r0, r6
 80014ec:	e70b      	b.n	8001306 <__udivmoddi4+0xa6>
 80014ee:	4671      	mov	r1, lr
 80014f0:	e6e9      	b.n	80012c6 <__udivmoddi4+0x66>
 80014f2:	4610      	mov	r0, r2
 80014f4:	e6fe      	b.n	80012f4 <__udivmoddi4+0x94>
 80014f6:	454d      	cmp	r5, r9
 80014f8:	d2ab      	bcs.n	8001452 <__udivmoddi4+0x1f2>
 80014fa:	ebb9 0802 	subs.w	r8, r9, r2
 80014fe:	eb63 0e0c 	sbc.w	lr, r3, ip
 8001502:	3801      	subs	r0, #1
 8001504:	e7a5      	b.n	8001452 <__udivmoddi4+0x1f2>
 8001506:	4641      	mov	r1, r8
 8001508:	e7ea      	b.n	80014e0 <__udivmoddi4+0x280>
 800150a:	4603      	mov	r3, r0
 800150c:	e796      	b.n	800143c <__udivmoddi4+0x1dc>
 800150e:	4645      	mov	r5, r8
 8001510:	e7d1      	b.n	80014b6 <__udivmoddi4+0x256>
 8001512:	46d0      	mov	r8, sl
 8001514:	e77d      	b.n	8001412 <__udivmoddi4+0x1b2>
 8001516:	4464      	add	r4, ip
 8001518:	3802      	subs	r0, #2
 800151a:	e749      	b.n	80013b0 <__udivmoddi4+0x150>
 800151c:	3d02      	subs	r5, #2
 800151e:	4462      	add	r2, ip
 8001520:	e731      	b.n	8001386 <__udivmoddi4+0x126>
 8001522:	4608      	mov	r0, r1
 8001524:	e70a      	b.n	800133c <__udivmoddi4+0xdc>
 8001526:	4631      	mov	r1, r6
 8001528:	e6ed      	b.n	8001306 <__udivmoddi4+0xa6>
 800152a:	bf00      	nop

0800152c <__aeabi_idiv0>:
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop

08001530 <keypad_init>:
GPIO_TypeDef* COL_3_Port = GPIOA;
GPIO_TypeDef* COL_4_Port = GPIOA;


void keypad_init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
  // Configure GPIO pins for keypad matrix
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001536:	463b      	mov	r3, r7
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = ROW_1_Pin | ROW_2_Pin | ROW_3_Pin | ROW_4_Pin;
 8001542:	23f0      	movs	r3, #240	; 0xf0
 8001544:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001546:	2300      	movs	r3, #0
 8001548:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800154a:	2301      	movs	r3, #1
 800154c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(ROW_1_Port, &GPIO_InitStruct);
 800154e:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <keypad_init+0xa4>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	463a      	mov	r2, r7
 8001554:	4611      	mov	r1, r2
 8001556:	4618      	mov	r0, r3
 8001558:	f001 f98a 	bl	8002870 <HAL_GPIO_Init>
  HAL_GPIO_Init(ROW_2_Port, &GPIO_InitStruct);
 800155c:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <keypad_init+0xa8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	463a      	mov	r2, r7
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f001 f983 	bl	8002870 <HAL_GPIO_Init>
  HAL_GPIO_Init(ROW_3_Port, &GPIO_InitStruct);
 800156a:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <keypad_init+0xac>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	463a      	mov	r2, r7
 8001570:	4611      	mov	r1, r2
 8001572:	4618      	mov	r0, r3
 8001574:	f001 f97c 	bl	8002870 <HAL_GPIO_Init>
  HAL_GPIO_Init(ROW_4_Port, &GPIO_InitStruct);
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <keypad_init+0xb0>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	463a      	mov	r2, r7
 800157e:	4611      	mov	r1, r2
 8001580:	4618      	mov	r0, r3
 8001582:	f001 f975 	bl	8002870 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = COL_1_Pin | COL_2_Pin | COL_3_Pin | COL_4_Pin;
 8001586:	230f      	movs	r3, #15
 8001588:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158a:	2301      	movs	r3, #1
 800158c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2302      	movs	r3, #2
 8001590:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(COL_1_Port, &GPIO_InitStruct);
 8001592:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <keypad_init+0xb4>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	463a      	mov	r2, r7
 8001598:	4611      	mov	r1, r2
 800159a:	4618      	mov	r0, r3
 800159c:	f001 f968 	bl	8002870 <HAL_GPIO_Init>
  HAL_GPIO_Init(COL_2_Port, &GPIO_InitStruct);
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <keypad_init+0xb8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	463a      	mov	r2, r7
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f001 f961 	bl	8002870 <HAL_GPIO_Init>
  HAL_GPIO_Init(COL_3_Port, &GPIO_InitStruct);
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <keypad_init+0xbc>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	463a      	mov	r2, r7
 80015b4:	4611      	mov	r1, r2
 80015b6:	4618      	mov	r0, r3
 80015b8:	f001 f95a 	bl	8002870 <HAL_GPIO_Init>
  HAL_GPIO_Init(COL_4_Port, &GPIO_InitStruct);
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <keypad_init+0xc0>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	463a      	mov	r2, r7
 80015c2:	4611      	mov	r1, r2
 80015c4:	4618      	mov	r0, r3
 80015c6:	f001 f953 	bl	8002870 <HAL_GPIO_Init>
}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000000 	.word	0x20000000
 80015d8:	20000004 	.word	0x20000004
 80015dc:	20000008 	.word	0x20000008
 80015e0:	2000000c 	.word	0x2000000c
 80015e4:	20000010 	.word	0x20000010
 80015e8:	20000014 	.word	0x20000014
 80015ec:	20000018 	.word	0x20000018
 80015f0:	2000001c 	.word	0x2000001c

080015f4 <keypad_scan>:


char keypad_scan(void)
{
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b087      	sub	sp, #28
 80015f8:	af00      	add	r7, sp, #0
  char keys[4][4] = {{'1', '2', '3', 'A'},
 80015fa:	4b7d      	ldr	r3, [pc, #500]	; (80017f0 <keypad_scan+0x1fc>)
 80015fc:	1d3c      	adds	r4, r7, #4
 80015fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001600:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                     {'4', '5', '6', 'B'},
                     {'7', '8', '9', 'C'},
                     {'*', '0', '#', 'D'}};

  for(int i = 0; i < 4; i++)
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	e0e8      	b.n	80017dc <keypad_scan+0x1e8>
  {
    // Set current column as output and low
    switch(i)
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	2b03      	cmp	r3, #3
 800160e:	d87f      	bhi.n	8001710 <keypad_scan+0x11c>
 8001610:	a201      	add	r2, pc, #4	; (adr r2, 8001618 <keypad_scan+0x24>)
 8001612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001616:	bf00      	nop
 8001618:	08001629 	.word	0x08001629
 800161c:	08001663 	.word	0x08001663
 8001620:	0800169d 	.word	0x0800169d
 8001624:	080016d7 	.word	0x080016d7
    {
      case 0:
        HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_RESET);
 8001628:	4b72      	ldr	r3, [pc, #456]	; (80017f4 <keypad_scan+0x200>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2200      	movs	r2, #0
 800162e:	2108      	movs	r1, #8
 8001630:	4618      	mov	r0, r3
 8001632:	f001 fab8 	bl	8002ba6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 8001636:	4b70      	ldr	r3, [pc, #448]	; (80017f8 <keypad_scan+0x204>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2201      	movs	r2, #1
 800163c:	2104      	movs	r1, #4
 800163e:	4618      	mov	r0, r3
 8001640:	f001 fab1 	bl	8002ba6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 8001644:	4b6d      	ldr	r3, [pc, #436]	; (80017fc <keypad_scan+0x208>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2201      	movs	r2, #1
 800164a:	2102      	movs	r1, #2
 800164c:	4618      	mov	r0, r3
 800164e:	f001 faaa 	bl	8002ba6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 8001652:	4b6b      	ldr	r3, [pc, #428]	; (8001800 <keypad_scan+0x20c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2201      	movs	r2, #1
 8001658:	2101      	movs	r1, #1
 800165a:	4618      	mov	r0, r3
 800165c:	f001 faa3 	bl	8002ba6 <HAL_GPIO_WritePin>
        break;
 8001660:	e056      	b.n	8001710 <keypad_scan+0x11c>

      case 1:
        HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 8001662:	4b64      	ldr	r3, [pc, #400]	; (80017f4 <keypad_scan+0x200>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2201      	movs	r2, #1
 8001668:	2108      	movs	r1, #8
 800166a:	4618      	mov	r0, r3
 800166c:	f001 fa9b 	bl	8002ba6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_RESET);
 8001670:	4b61      	ldr	r3, [pc, #388]	; (80017f8 <keypad_scan+0x204>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2200      	movs	r2, #0
 8001676:	2104      	movs	r1, #4
 8001678:	4618      	mov	r0, r3
 800167a:	f001 fa94 	bl	8002ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 800167e:	4b5f      	ldr	r3, [pc, #380]	; (80017fc <keypad_scan+0x208>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2201      	movs	r2, #1
 8001684:	2102      	movs	r1, #2
 8001686:	4618      	mov	r0, r3
 8001688:	f001 fa8d 	bl	8002ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 800168c:	4b5c      	ldr	r3, [pc, #368]	; (8001800 <keypad_scan+0x20c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2201      	movs	r2, #1
 8001692:	2101      	movs	r1, #1
 8001694:	4618      	mov	r0, r3
 8001696:	f001 fa86 	bl	8002ba6 <HAL_GPIO_WritePin>
		break;
 800169a:	e039      	b.n	8001710 <keypad_scan+0x11c>

	  case 2:
		HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 800169c:	4b55      	ldr	r3, [pc, #340]	; (80017f4 <keypad_scan+0x200>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2201      	movs	r2, #1
 80016a2:	2108      	movs	r1, #8
 80016a4:	4618      	mov	r0, r3
 80016a6:	f001 fa7e 	bl	8002ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 80016aa:	4b53      	ldr	r3, [pc, #332]	; (80017f8 <keypad_scan+0x204>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2201      	movs	r2, #1
 80016b0:	2104      	movs	r1, #4
 80016b2:	4618      	mov	r0, r3
 80016b4:	f001 fa77 	bl	8002ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_RESET);
 80016b8:	4b50      	ldr	r3, [pc, #320]	; (80017fc <keypad_scan+0x208>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2200      	movs	r2, #0
 80016be:	2102      	movs	r1, #2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f001 fa70 	bl	8002ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 80016c6:	4b4e      	ldr	r3, [pc, #312]	; (8001800 <keypad_scan+0x20c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2201      	movs	r2, #1
 80016cc:	2101      	movs	r1, #1
 80016ce:	4618      	mov	r0, r3
 80016d0:	f001 fa69 	bl	8002ba6 <HAL_GPIO_WritePin>
		break;
 80016d4:	e01c      	b.n	8001710 <keypad_scan+0x11c>

	  case 3:
		HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 80016d6:	4b47      	ldr	r3, [pc, #284]	; (80017f4 <keypad_scan+0x200>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2201      	movs	r2, #1
 80016dc:	2108      	movs	r1, #8
 80016de:	4618      	mov	r0, r3
 80016e0:	f001 fa61 	bl	8002ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 80016e4:	4b44      	ldr	r3, [pc, #272]	; (80017f8 <keypad_scan+0x204>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2201      	movs	r2, #1
 80016ea:	2104      	movs	r1, #4
 80016ec:	4618      	mov	r0, r3
 80016ee:	f001 fa5a 	bl	8002ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 80016f2:	4b42      	ldr	r3, [pc, #264]	; (80017fc <keypad_scan+0x208>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2201      	movs	r2, #1
 80016f8:	2102      	movs	r1, #2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f001 fa53 	bl	8002ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_RESET);
 8001700:	4b3f      	ldr	r3, [pc, #252]	; (8001800 <keypad_scan+0x20c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2200      	movs	r2, #0
 8001706:	2101      	movs	r1, #1
 8001708:	4618      	mov	r0, r3
 800170a:	f001 fa4c 	bl	8002ba6 <HAL_GPIO_WritePin>
		break;
 800170e:	bf00      	nop
	}
	// Read current rows
	if(HAL_GPIO_ReadPin(ROW_1_Port, ROW_1_Pin) == GPIO_PIN_RESET){
 8001710:	4b3c      	ldr	r3, [pc, #240]	; (8001804 <keypad_scan+0x210>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	4618      	mov	r0, r3
 8001718:	f001 fa2e 	bl	8002b78 <HAL_GPIO_ReadPin>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10e      	bne.n	8001740 <keypad_scan+0x14c>
		while(HAL_GPIO_ReadPin(ROW_1_Port, ROW_1_Pin) == GPIO_PIN_RESET){
 8001722:	bf00      	nop
 8001724:	4b37      	ldr	r3, [pc, #220]	; (8001804 <keypad_scan+0x210>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2180      	movs	r1, #128	; 0x80
 800172a:	4618      	mov	r0, r3
 800172c:	f001 fa24 	bl	8002b78 <HAL_GPIO_ReadPin>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0f6      	beq.n	8001724 <keypad_scan+0x130>

		}
		return keys[0][i];
 8001736:	1d3a      	adds	r2, r7, #4
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	4413      	add	r3, r2
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	e052      	b.n	80017e6 <keypad_scan+0x1f2>
	}

	if(HAL_GPIO_ReadPin(ROW_2_Port, ROW_2_Pin) == GPIO_PIN_RESET){
 8001740:	4b31      	ldr	r3, [pc, #196]	; (8001808 <keypad_scan+0x214>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2140      	movs	r1, #64	; 0x40
 8001746:	4618      	mov	r0, r3
 8001748:	f001 fa16 	bl	8002b78 <HAL_GPIO_ReadPin>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10f      	bne.n	8001772 <keypad_scan+0x17e>
		while(HAL_GPIO_ReadPin(ROW_2_Port, ROW_2_Pin) == GPIO_PIN_RESET){
 8001752:	bf00      	nop
 8001754:	4b2c      	ldr	r3, [pc, #176]	; (8001808 <keypad_scan+0x214>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2140      	movs	r1, #64	; 0x40
 800175a:	4618      	mov	r0, r3
 800175c:	f001 fa0c 	bl	8002b78 <HAL_GPIO_ReadPin>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0f6      	beq.n	8001754 <keypad_scan+0x160>

		}
		return keys[1][i];
 8001766:	f107 0208 	add.w	r2, r7, #8
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	4413      	add	r3, r2
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	e039      	b.n	80017e6 <keypad_scan+0x1f2>
	}

	if(HAL_GPIO_ReadPin(ROW_3_Port, ROW_3_Pin) == GPIO_PIN_RESET){
 8001772:	4b26      	ldr	r3, [pc, #152]	; (800180c <keypad_scan+0x218>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2120      	movs	r1, #32
 8001778:	4618      	mov	r0, r3
 800177a:	f001 f9fd 	bl	8002b78 <HAL_GPIO_ReadPin>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10f      	bne.n	80017a4 <keypad_scan+0x1b0>
		while(HAL_GPIO_ReadPin(ROW_3_Port, ROW_3_Pin) == GPIO_PIN_RESET){
 8001784:	bf00      	nop
 8001786:	4b21      	ldr	r3, [pc, #132]	; (800180c <keypad_scan+0x218>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2120      	movs	r1, #32
 800178c:	4618      	mov	r0, r3
 800178e:	f001 f9f3 	bl	8002b78 <HAL_GPIO_ReadPin>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0f6      	beq.n	8001786 <keypad_scan+0x192>

		}
		return keys[2][i];
 8001798:	f107 020c 	add.w	r2, r7, #12
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	4413      	add	r3, r2
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	e020      	b.n	80017e6 <keypad_scan+0x1f2>
	}

	if(HAL_GPIO_ReadPin(ROW_4_Port, ROW_4_Pin) == GPIO_PIN_RESET){
 80017a4:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <keypad_scan+0x21c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2110      	movs	r1, #16
 80017aa:	4618      	mov	r0, r3
 80017ac:	f001 f9e4 	bl	8002b78 <HAL_GPIO_ReadPin>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10f      	bne.n	80017d6 <keypad_scan+0x1e2>
		while(HAL_GPIO_ReadPin(ROW_4_Port, ROW_4_Pin) == GPIO_PIN_RESET){
 80017b6:	bf00      	nop
 80017b8:	4b15      	ldr	r3, [pc, #84]	; (8001810 <keypad_scan+0x21c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2110      	movs	r1, #16
 80017be:	4618      	mov	r0, r3
 80017c0:	f001 f9da 	bl	8002b78 <HAL_GPIO_ReadPin>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f6      	beq.n	80017b8 <keypad_scan+0x1c4>

		}
		return keys[3][i];
 80017ca:	f107 0210 	add.w	r2, r7, #16
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	4413      	add	r3, r2
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	e007      	b.n	80017e6 <keypad_scan+0x1f2>
  for(int i = 0; i < 4; i++)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	3301      	adds	r3, #1
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	2b03      	cmp	r3, #3
 80017e0:	f77f af13 	ble.w	800160a <keypad_scan+0x16>
	}

	}
	return 0; // No key pressed
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	371c      	adds	r7, #28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd90      	pop	{r4, r7, pc}
 80017ee:	bf00      	nop
 80017f0:	08008490 	.word	0x08008490
 80017f4:	20000010 	.word	0x20000010
 80017f8:	20000014 	.word	0x20000014
 80017fc:	20000018 	.word	0x20000018
 8001800:	2000001c 	.word	0x2000001c
 8001804:	20000000 	.word	0x20000000
 8001808:	20000004 	.word	0x20000004
 800180c:	20000008 	.word	0x20000008
 8001810:	2000000c 	.word	0x2000000c

08001814 <hx711_delay_us>:
#define hx711_delay(x)    HAL_Delay(x)
#endif

//#############################################################################################
void hx711_delay_us(void)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
  uint32_t delay = _HX711_DELAY_US_LOOP;
 800181a:	2304      	movs	r3, #4
 800181c:	607b      	str	r3, [r7, #4]
  while (delay > 0)
 800181e:	e002      	b.n	8001826 <hx711_delay_us+0x12>
  {
    delay--;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3b01      	subs	r3, #1
 8001824:	607b      	str	r3, [r7, #4]
  while (delay > 0)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1f9      	bne.n	8001820 <hx711_delay_us+0xc>
  }
}
 800182c:	bf00      	nop
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <hx711_lock>:
//#############################################################################################
void hx711_lock(hx711_t *hx711)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  while (hx711->lock)
 8001840:	e002      	b.n	8001848 <hx711_lock+0x10>
    hx711_delay(1);
 8001842:	2001      	movs	r0, #1
 8001844:	f000 ff0c 	bl	8002660 <HAL_Delay>
  while (hx711->lock)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	7d1b      	ldrb	r3, [r3, #20]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1f8      	bne.n	8001842 <hx711_lock+0xa>
  hx711->lock = 1;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	751a      	strb	r2, [r3, #20]
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <hx711_unlock>:
//#############################################################################################
void hx711_unlock(hx711_t *hx711)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  hx711->lock = 0;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	751a      	strb	r2, [r3, #20]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr

08001876 <hx711_init>:
//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b088      	sub	sp, #32
 800187a:	af00      	add	r7, sp, #0
 800187c:	60f8      	str	r0, [r7, #12]
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	603b      	str	r3, [r7, #0]
 8001882:	4613      	mov	r3, r2
 8001884:	80fb      	strh	r3, [r7, #6]
  hx711_lock(hx711);
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f7ff ffd6 	bl	8001838 <hx711_lock>
  hx711->clk_gpio = clk_gpio;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	88fa      	ldrh	r2, [r7, #6]
 8001896:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80018a2:	815a      	strh	r2, [r3, #10]

  GPIO_InitTypeDef  gpio = {0};
 80018a4:	f107 0310 	add.w	r3, r7, #16
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80018b2:	2301      	movs	r3, #1
 80018b4:	617b      	str	r3, [r7, #20]
  gpio.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ba:	2303      	movs	r3, #3
 80018bc:	61fb      	str	r3, [r7, #28]
  gpio.Pin = clk_pin;
 80018be:	88fb      	ldrh	r3, [r7, #6]
 80018c0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(clk_gpio, &gpio);
 80018c2:	f107 0310 	add.w	r3, r7, #16
 80018c6:	4619      	mov	r1, r3
 80018c8:	68b8      	ldr	r0, [r7, #8]
 80018ca:	f000 ffd1 	bl	8002870 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
  gpio.Pull = GPIO_PULLUP;
 80018d2:	2301      	movs	r3, #1
 80018d4:	61bb      	str	r3, [r7, #24]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 80018d6:	2303      	movs	r3, #3
 80018d8:	61fb      	str	r3, [r7, #28]
  gpio.Pin = dat_pin;
 80018da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80018dc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(dat_gpio, &gpio);
 80018de:	f107 0310 	add.w	r3, r7, #16
 80018e2:	4619      	mov	r1, r3
 80018e4:	6838      	ldr	r0, [r7, #0]
 80018e6:	f000 ffc3 	bl	8002870 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6818      	ldr	r0, [r3, #0]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	891b      	ldrh	r3, [r3, #8]
 80018f2:	2201      	movs	r2, #1
 80018f4:	4619      	mov	r1, r3
 80018f6:	f001 f956 	bl	8002ba6 <HAL_GPIO_WritePin>
  hx711_delay(10);
 80018fa:	200a      	movs	r0, #10
 80018fc:	f000 feb0 	bl	8002660 <HAL_Delay>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6818      	ldr	r0, [r3, #0]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	891b      	ldrh	r3, [r3, #8]
 8001908:	2200      	movs	r2, #0
 800190a:	4619      	mov	r1, r3
 800190c:	f001 f94b 	bl	8002ba6 <HAL_GPIO_WritePin>
  hx711_delay(10);
 8001910:	200a      	movs	r0, #10
 8001912:	f000 fea5 	bl	8002660 <HAL_Delay>
  hx711_value(hx711);
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f000 f80a 	bl	8001930 <hx711_value>
  hx711_value(hx711);
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f000 f807 	bl	8001930 <hx711_value>
  hx711_unlock(hx711);
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f7ff ff9b 	bl	800185e <hx711_unlock>
}
 8001928:	bf00      	nop
 800192a:	3720      	adds	r7, #32
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <hx711_value>:
//#############################################################################################
int32_t hx711_value(hx711_t *hx711)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t data = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 800193c:	f000 fe86 	bl	800264c <HAL_GetTick>
 8001940:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8001942:	e00c      	b.n	800195e <hx711_value+0x2e>
  {
    hx711_delay(1);
 8001944:	2001      	movs	r0, #1
 8001946:	f000 fe8b 	bl	8002660 <HAL_Delay>
    if(HAL_GetTick() - startTime > 300)
 800194a:	f000 fe7f 	bl	800264c <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001958:	d901      	bls.n	800195e <hx711_value+0x2e>
      return 0;
 800195a:	2300      	movs	r3, #0
 800195c:	e055      	b.n	8001a0a <hx711_value+0xda>
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	895b      	ldrh	r3, [r3, #10]
 8001966:	4619      	mov	r1, r3
 8001968:	4610      	mov	r0, r2
 800196a:	f001 f905 	bl	8002b78 <HAL_GPIO_ReadPin>
 800196e:	4603      	mov	r3, r0
 8001970:	2b01      	cmp	r3, #1
 8001972:	d0e7      	beq.n	8001944 <hx711_value+0x14>
  }
  for(int8_t i=0; i<24 ; i++)
 8001974:	2300      	movs	r3, #0
 8001976:	74fb      	strb	r3, [r7, #19]
 8001978:	e02a      	b.n	80019d0 <hx711_value+0xa0>
  {
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6818      	ldr	r0, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	891b      	ldrh	r3, [r3, #8]
 8001982:	2201      	movs	r2, #1
 8001984:	4619      	mov	r1, r3
 8001986:	f001 f90e 	bl	8002ba6 <HAL_GPIO_WritePin>
    hx711_delay_us();
 800198a:	f7ff ff43 	bl	8001814 <hx711_delay_us>
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6818      	ldr	r0, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	891b      	ldrh	r3, [r3, #8]
 8001996:	2200      	movs	r2, #0
 8001998:	4619      	mov	r1, r3
 800199a:	f001 f904 	bl	8002ba6 <HAL_GPIO_WritePin>
    hx711_delay_us();
 800199e:	f7ff ff39 	bl	8001814 <hx711_delay_us>
    data = data << 1;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	617b      	str	r3, [r7, #20]
    if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	895b      	ldrh	r3, [r3, #10]
 80019b0:	4619      	mov	r1, r3
 80019b2:	4610      	mov	r0, r2
 80019b4:	f001 f8e0 	bl	8002b78 <HAL_GPIO_ReadPin>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d102      	bne.n	80019c4 <hx711_value+0x94>
      data ++;
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	3301      	adds	r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i<24 ; i++)
 80019c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	3301      	adds	r3, #1
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	74fb      	strb	r3, [r7, #19]
 80019d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80019d4:	2b17      	cmp	r3, #23
 80019d6:	ddd0      	ble.n	800197a <hx711_value+0x4a>
  }
  data = data ^ 0x800000;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 80019de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	891b      	ldrh	r3, [r3, #8]
 80019e8:	2201      	movs	r2, #1
 80019ea:	4619      	mov	r1, r3
 80019ec:	f001 f8db 	bl	8002ba6 <HAL_GPIO_WritePin>
  hx711_delay_us();
 80019f0:	f7ff ff10 	bl	8001814 <hx711_delay_us>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6818      	ldr	r0, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	891b      	ldrh	r3, [r3, #8]
 80019fc:	2200      	movs	r2, #0
 80019fe:	4619      	mov	r1, r3
 8001a00:	f001 f8d1 	bl	8002ba6 <HAL_GPIO_WritePin>
  hx711_delay_us();
 8001a04:	f7ff ff06 	bl	8001814 <hx711_delay_us>
  return data;
 8001a08:	697b      	ldr	r3, [r7, #20]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <hx711_tare>:
  hx711_unlock(hx711);
  return answer;
}
//#############################################################################################
void hx711_tare(hx711_t *hx711, uint16_t sample)
{
 8001a12:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ff09 	bl	8001838 <hx711_lock>
  int64_t  ave = 0;
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for(uint16_t i=0 ; i<sample ; i++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	81fb      	strh	r3, [r7, #14]
 8001a36:	e014      	b.n	8001a62 <hx711_tare+0x50>
  {
    ave += hx711_value(hx711);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ff79 	bl	8001930 <hx711_value>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	17da      	asrs	r2, r3, #31
 8001a42:	461c      	mov	r4, r3
 8001a44:	4615      	mov	r5, r2
 8001a46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a4a:	eb12 0804 	adds.w	r8, r2, r4
 8001a4e:	eb43 0905 	adc.w	r9, r3, r5
 8001a52:	e9c7 8904 	strd	r8, r9, [r7, #16]
    hx711_delay(5);
 8001a56:	2005      	movs	r0, #5
 8001a58:	f000 fe02 	bl	8002660 <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 8001a5c:	89fb      	ldrh	r3, [r7, #14]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	81fb      	strh	r3, [r7, #14]
 8001a62:	89fa      	ldrh	r2, [r7, #14]
 8001a64:	887b      	ldrh	r3, [r7, #2]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d3e6      	bcc.n	8001a38 <hx711_tare+0x26>
  }
  hx711->offset = (int32_t)(ave / sample);
 8001a6a:	887b      	ldrh	r3, [r7, #2]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	469a      	mov	sl, r3
 8001a70:	4693      	mov	fp, r2
 8001a72:	4652      	mov	r2, sl
 8001a74:	465b      	mov	r3, fp
 8001a76:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a7a:	f7ff fb69 	bl	8001150 <__aeabi_ldivmod>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	60da      	str	r2, [r3, #12]
  hx711_unlock(hx711);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff fee9 	bl	800185e <hx711_unlock>
}
 8001a8c:	bf00      	nop
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001a96 <hx711_weight>:
  hx711->coef = (load_raw - noload_raw) / scale;
  hx711_unlock(hx711);
}
//#############################################################################################
float hx711_weight(hx711_t *hx711, uint16_t sample)
{
 8001a96:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff fec7 	bl	8001838 <hx711_lock>
  int64_t  ave = 0;
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	f04f 0300 	mov.w	r3, #0
 8001ab2:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for(uint16_t i=0 ; i<sample ; i++)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	82fb      	strh	r3, [r7, #22]
 8001aba:	e014      	b.n	8001ae6 <hx711_weight+0x50>
  {
    ave += hx711_value(hx711);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff ff37 	bl	8001930 <hx711_value>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	17da      	asrs	r2, r3, #31
 8001ac6:	461c      	mov	r4, r3
 8001ac8:	4615      	mov	r5, r2
 8001aca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ace:	eb12 0804 	adds.w	r8, r2, r4
 8001ad2:	eb43 0905 	adc.w	r9, r3, r5
 8001ad6:	e9c7 8906 	strd	r8, r9, [r7, #24]
    hx711_delay(5);
 8001ada:	2005      	movs	r0, #5
 8001adc:	f000 fdc0 	bl	8002660 <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 8001ae0:	8afb      	ldrh	r3, [r7, #22]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	82fb      	strh	r3, [r7, #22]
 8001ae6:	8afa      	ldrh	r2, [r7, #22]
 8001ae8:	887b      	ldrh	r3, [r7, #2]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d3e6      	bcc.n	8001abc <hx711_weight+0x26>
  }
  int32_t data = (int32_t)(ave / sample);
 8001aee:	887b      	ldrh	r3, [r7, #2]
 8001af0:	2200      	movs	r2, #0
 8001af2:	469a      	mov	sl, r3
 8001af4:	4693      	mov	fp, r2
 8001af6:	4652      	mov	r2, sl
 8001af8:	465b      	mov	r3, fp
 8001afa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001afe:	f7ff fb27 	bl	8001150 <__aeabi_ldivmod>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4613      	mov	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
  float answer =  (data - hx711->offset) / hx711->coef;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff f8e2 	bl	8000cdc <__aeabi_i2f>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4610      	mov	r0, r2
 8001b22:	f7ff f9e3 	bl	8000eec <__aeabi_fdiv>
 8001b26:	4603      	mov	r3, r0
 8001b28:	60fb      	str	r3, [r7, #12]
  hx711_unlock(hx711);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff fe97 	bl	800185e <hx711_unlock>
  return answer;
 8001b30:	68fb      	ldr	r3, [r7, #12]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3720      	adds	r7, #32
 8001b36:	46bd      	mov	sp, r7
 8001b38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001b3c <hx711_coef_set>:
//#############################################################################################
void hx711_coef_set(hx711_t *hx711, float coef)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  hx711->coef = coef;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	611a      	str	r2, [r3, #16]
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr
	...

08001b58 <lcd_send_cmd>:
//#define SLAVE_ADDRESS_LCD 0x3F // change this according to ur setup
//#define SLAVE_ADDRESS_LCD 0x08 // change this according to ur setup
//#define SLAVE_ADDRESS_LCD 0x27<<1
//#define SLAVE_ADDRESS_LCD 0x40
void lcd_send_cmd (char cmd)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af02      	add	r7, sp, #8
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	f023 030f 	bic.w	r3, r3, #15
 8001b68:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	011b      	lsls	r3, r3, #4
 8001b6e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	f043 030c 	orr.w	r3, r3, #12
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	f043 0308 	orr.w	r3, r3, #8
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001b84:	7bbb      	ldrb	r3, [r7, #14]
 8001b86:	f043 030c 	orr.w	r3, r3, #12
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001b8e:	7bbb      	ldrb	r3, [r7, #14]
 8001b90:	f043 0308 	orr.w	r3, r3, #8
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b98:	f107 0208 	add.w	r2, r7, #8
 8001b9c:	2364      	movs	r3, #100	; 0x64
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	214e      	movs	r1, #78	; 0x4e
 8001ba4:	4803      	ldr	r0, [pc, #12]	; (8001bb4 <lcd_send_cmd+0x5c>)
 8001ba6:	f001 f95b 	bl	8002e60 <HAL_I2C_Master_Transmit>
}
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000230 	.word	0x20000230

08001bb8 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af02      	add	r7, sp, #8
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	f023 030f 	bic.w	r3, r3, #15
 8001bc8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	011b      	lsls	r3, r3, #4
 8001bce:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
 8001bd2:	f043 030d 	orr.w	r3, r3, #13
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	f043 0309 	orr.w	r3, r3, #9
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001be4:	7bbb      	ldrb	r3, [r7, #14]
 8001be6:	f043 030d 	orr.w	r3, r3, #13
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001bee:	7bbb      	ldrb	r3, [r7, #14]
 8001bf0:	f043 0309 	orr.w	r3, r3, #9
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001bf8:	f107 0208 	add.w	r2, r7, #8
 8001bfc:	2364      	movs	r3, #100	; 0x64
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	2304      	movs	r3, #4
 8001c02:	214e      	movs	r1, #78	; 0x4e
 8001c04:	4803      	ldr	r0, [pc, #12]	; (8001c14 <lcd_send_data+0x5c>)
 8001c06:	f001 f92b 	bl	8002e60 <HAL_I2C_Master_Transmit>
}
 8001c0a:	bf00      	nop
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000230 	.word	0x20000230

08001c18 <lcd_init>:

void lcd_init (void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8001c1c:	2002      	movs	r0, #2
 8001c1e:	f7ff ff9b 	bl	8001b58 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8001c22:	2028      	movs	r0, #40	; 0x28
 8001c24:	f7ff ff98 	bl	8001b58 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8001c28:	200c      	movs	r0, #12
 8001c2a:	f7ff ff95 	bl	8001b58 <lcd_send_cmd>
	lcd_send_cmd (LCD_SET_DDRAM_ADDRESS);
 8001c2e:	2080      	movs	r0, #128	; 0x80
 8001c30:	f7ff ff92 	bl	8001b58 <lcd_send_cmd>
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001c40:	e006      	b.n	8001c50 <lcd_send_string+0x18>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	1c5a      	adds	r2, r3, #1
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff ffb4 	bl	8001bb8 <lcd_send_data>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1f4      	bne.n	8001c42 <lcd_send_string+0xa>
}
 8001c58:	bf00      	nop
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <lcd_gotoxy>:
  * @param	LCD row (y)
  * @retval	None
  ******************************************************************************
  */
void lcd_gotoxy(uint8_t x, uint8_t y)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	4603      	mov	r3, r0
 8001c6a:	460a      	mov	r2, r1
 8001c6c:	71fb      	strb	r3, [r7, #7]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	71bb      	strb	r3, [r7, #6]
			(LCD_START_LINE_2 + x));
	else
		lcd_send_cmd(LCD_SET_DDRAM_ADDRESS |
			(LCD_START_LINE_3 + x));
#elif LCD_LINES == 4
	if (y == 0)
 8001c72:	79bb      	ldrb	r3, [r7, #6]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d107      	bne.n	8001c88 <lcd_gotoxy+0x26>
		lcd_send_cmd(LCD_SET_DDRAM_ADDRESS |
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff69 	bl	8001b58 <lcd_send_cmd>
			(LCD_START_LINE_3 + x));
	else
		lcd_send_cmd(LCD_SET_DDRAM_ADDRESS |
			(LCD_START_LINE_4 + x));
#endif
}
 8001c86:	e028      	b.n	8001cda <lcd_gotoxy+0x78>
	else if (y == 1)
 8001c88:	79bb      	ldrb	r3, [r7, #6]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d10b      	bne.n	8001ca6 <lcd_gotoxy+0x44>
			(LCD_START_LINE_2 + x));
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	3340      	adds	r3, #64	; 0x40
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	b25b      	sxtb	r3, r3
		lcd_send_cmd(LCD_SET_DDRAM_ADDRESS |
 8001c96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c9a:	b25b      	sxtb	r3, r3
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff ff5a 	bl	8001b58 <lcd_send_cmd>
}
 8001ca4:	e019      	b.n	8001cda <lcd_gotoxy+0x78>
	else if (y == 2)
 8001ca6:	79bb      	ldrb	r3, [r7, #6]
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d10b      	bne.n	8001cc4 <lcd_gotoxy+0x62>
			(LCD_START_LINE_3 + x));
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	3314      	adds	r3, #20
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	b25b      	sxtb	r3, r3
		lcd_send_cmd(LCD_SET_DDRAM_ADDRESS |
 8001cb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cb8:	b25b      	sxtb	r3, r3
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff4b 	bl	8001b58 <lcd_send_cmd>
}
 8001cc2:	e00a      	b.n	8001cda <lcd_gotoxy+0x78>
			(LCD_START_LINE_4 + x));
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	3354      	adds	r3, #84	; 0x54
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	b25b      	sxtb	r3, r3
		lcd_send_cmd(LCD_SET_DDRAM_ADDRESS |
 8001ccc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cd0:	b25b      	sxtb	r3, r3
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff3f 	bl	8001b58 <lcd_send_cmd>
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ce8:	f3bf 8f4f 	dsb	sy
}
 8001cec:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <__NVIC_SystemReset+0x24>)
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001cf6:	4904      	ldr	r1, [pc, #16]	; (8001d08 <__NVIC_SystemReset+0x24>)
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <__NVIC_SystemReset+0x28>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cfe:	f3bf 8f4f 	dsb	sy
}
 8001d02:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001d04:	bf00      	nop
 8001d06:	e7fd      	b.n	8001d04 <__NVIC_SystemReset+0x20>
 8001d08:	e000ed00 	.word	0xe000ed00
 8001d0c:	05fa0004 	.word	0x05fa0004

08001d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d10:	b590      	push	{r4, r7, lr}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8001d16:	f000 fc41 	bl	800259c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d1a:	f000 f9b1 	bl	8002080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d1e:	f000 fa23 	bl	8002168 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001d22:	f000 f9f3 	bl	800210c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  hx711_init(&loadcell, GPIOA, GPIO_PIN_8, GPIOA, GPIO_PIN_9);
 8001d26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	4b7e      	ldr	r3, [pc, #504]	; (8001f28 <main+0x218>)
 8001d2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d32:	497d      	ldr	r1, [pc, #500]	; (8001f28 <main+0x218>)
 8001d34:	487d      	ldr	r0, [pc, #500]	; (8001f2c <main+0x21c>)
 8001d36:	f7ff fd9e 	bl	8001876 <hx711_init>
  hx711_coef_set(&loadcell, 478); // read afer calibration 475
 8001d3a:	497d      	ldr	r1, [pc, #500]	; (8001f30 <main+0x220>)
 8001d3c:	487b      	ldr	r0, [pc, #492]	; (8001f2c <main+0x21c>)
 8001d3e:	f7ff fefd 	bl	8001b3c <hx711_coef_set>
  hx711_tare(&loadcell, 10);
 8001d42:	210a      	movs	r1, #10
 8001d44:	4879      	ldr	r0, [pc, #484]	; (8001f2c <main+0x21c>)
 8001d46:	f7ff fe64 	bl	8001a12 <hx711_tare>

  lcd_init();
 8001d4a:	f7ff ff65 	bl	8001c18 <lcd_init>
  keypad_init();
 8001d4e:	f7ff fbef 	bl	8001530 <keypad_init>

  lcd_gotoxy(2,0);
 8001d52:	2100      	movs	r1, #0
 8001d54:	2002      	movs	r0, #2
 8001d56:	f7ff ff84 	bl	8001c62 <lcd_gotoxy>
  lcd_send_string("ELECTRONIC SCALE");
 8001d5a:	4876      	ldr	r0, [pc, #472]	; (8001f34 <main+0x224>)
 8001d5c:	f7ff ff6c 	bl	8001c38 <lcd_send_string>

  lcd_gotoxy(0,1);
 8001d60:	2101      	movs	r1, #1
 8001d62:	2000      	movs	r0, #0
 8001d64:	f7ff ff7d 	bl	8001c62 <lcd_gotoxy>
  lcd_send_string("Weight:");
 8001d68:	4873      	ldr	r0, [pc, #460]	; (8001f38 <main+0x228>)
 8001d6a:	f7ff ff65 	bl	8001c38 <lcd_send_string>

  lcd_gotoxy(0,2);
 8001d6e:	2102      	movs	r1, #2
 8001d70:	2000      	movs	r0, #0
 8001d72:	f7ff ff76 	bl	8001c62 <lcd_gotoxy>
  lcd_send_string("Price :");
 8001d76:	4871      	ldr	r0, [pc, #452]	; (8001f3c <main+0x22c>)
 8001d78:	f7ff ff5e 	bl	8001c38 <lcd_send_string>
  lcd_gotoxy(17,2);
 8001d7c:	2102      	movs	r1, #2
 8001d7e:	2011      	movs	r0, #17
 8001d80:	f7ff ff6f 	bl	8001c62 <lcd_gotoxy>
  lcd_send_string("VND");
 8001d84:	486e      	ldr	r0, [pc, #440]	; (8001f40 <main+0x230>)
 8001d86:	f7ff ff57 	bl	8001c38 <lcd_send_string>

  lcd_gotoxy(0,3);
 8001d8a:	2103      	movs	r1, #3
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f7ff ff68 	bl	8001c62 <lcd_gotoxy>
  lcd_send_string("Total :");
 8001d92:	486c      	ldr	r0, [pc, #432]	; (8001f44 <main+0x234>)
 8001d94:	f7ff ff50 	bl	8001c38 <lcd_send_string>
  lcd_gotoxy(17,3);
 8001d98:	2103      	movs	r1, #3
 8001d9a:	2011      	movs	r0, #17
 8001d9c:	f7ff ff61 	bl	8001c62 <lcd_gotoxy>
  lcd_send_string("VND");
 8001da0:	4867      	ldr	r0, [pc, #412]	; (8001f40 <main+0x230>)
 8001da2:	f7ff ff49 	bl	8001c38 <lcd_send_string>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
/*LoadCell-HX711-----------------------------------------------------------------*/
	  weight = hx711_weight(&loadcell, 10);
 8001da6:	210a      	movs	r1, #10
 8001da8:	4860      	ldr	r0, [pc, #384]	; (8001f2c <main+0x21c>)
 8001daa:	f7ff fe74 	bl	8001a96 <hx711_weight>
 8001dae:	4603      	mov	r3, r0
 8001db0:	4a65      	ldr	r2, [pc, #404]	; (8001f48 <main+0x238>)
 8001db2:	6013      	str	r3, [r2, #0]
	  if(weight < 1)weight = 0.00;
 8001db4:	4b64      	ldr	r3, [pc, #400]	; (8001f48 <main+0x238>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff f97f 	bl	80010c0 <__aeabi_fcmplt>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <main+0xc0>
 8001dc8:	4b5f      	ldr	r3, [pc, #380]	; (8001f48 <main+0x238>)
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
	  {
		  lcd_gotoxy(8,1);
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	2008      	movs	r0, #8
 8001dd4:	f7ff ff45 	bl	8001c62 <lcd_gotoxy>
		  sprintf(LCD_send, "%.3f", weight);  //weight
 8001dd8:	4b5b      	ldr	r3, [pc, #364]	; (8001f48 <main+0x238>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe fb23 	bl	8000428 <__aeabi_f2d>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	4959      	ldr	r1, [pc, #356]	; (8001f4c <main+0x23c>)
 8001de8:	4859      	ldr	r0, [pc, #356]	; (8001f50 <main+0x240>)
 8001dea:	f002 febb 	bl	8004b64 <siprintf>
		  lcd_send_string(LCD_send);
 8001dee:	4858      	ldr	r0, [pc, #352]	; (8001f50 <main+0x240>)
 8001df0:	f7ff ff22 	bl	8001c38 <lcd_send_string>
		  lcd_gotoxy(14,1);
 8001df4:	2101      	movs	r1, #1
 8001df6:	200e      	movs	r0, #14
 8001df8:	f7ff ff33 	bl	8001c62 <lcd_gotoxy>
		  lcd_send_string("   Gam");
 8001dfc:	4855      	ldr	r0, [pc, #340]	; (8001f54 <main+0x244>)
 8001dfe:	f7ff ff1b 	bl	8001c38 <lcd_send_string>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2101      	movs	r1, #1
 8001e06:	4854      	ldr	r0, [pc, #336]	; (8001f58 <main+0x248>)
 8001e08:	f000 fecd 	bl	8002ba6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15,0);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e12:	4852      	ldr	r0, [pc, #328]	; (8001f5c <main+0x24c>)
 8001e14:	f000 fec7 	bl	8002ba6 <HAL_GPIO_WritePin>
	  }
	  if(weight > 1)
 8001e18:	4b4b      	ldr	r3, [pc, #300]	; (8001f48 <main+0x238>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff f96b 	bl	80010fc <__aeabi_fcmpgt>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d004      	beq.n	8001e36 <main+0x126>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	2101      	movs	r1, #1
 8001e30:	4849      	ldr	r0, [pc, #292]	; (8001f58 <main+0x248>)
 8001e32:	f000 feb8 	bl	8002ba6 <HAL_GPIO_WritePin>
	  }
	  if(weight > 3000)
 8001e36:	4b44      	ldr	r3, [pc, #272]	; (8001f48 <main+0x238>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4949      	ldr	r1, [pc, #292]	; (8001f60 <main+0x250>)
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff f95d 	bl	80010fc <__aeabi_fcmpgt>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00c      	beq.n	8001e62 <main+0x152>
	  {
		  lcd_gotoxy(8,1);
 8001e48:	2101      	movs	r1, #1
 8001e4a:	2008      	movs	r0, #8
 8001e4c:	f7ff ff09 	bl	8001c62 <lcd_gotoxy>
		  lcd_send_string("OVERLOAD    ");
 8001e50:	4844      	ldr	r0, [pc, #272]	; (8001f64 <main+0x254>)
 8001e52:	f7ff fef1 	bl	8001c38 <lcd_send_string>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15,1);
 8001e56:	2201      	movs	r2, #1
 8001e58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e5c:	483f      	ldr	r0, [pc, #252]	; (8001f5c <main+0x24c>)
 8001e5e:	f000 fea2 	bl	8002ba6 <HAL_GPIO_WritePin>
	  }
/*LCD-Keypad 4x4 ------------------------------------------------------------------*/
	  buffer[key] = keypad_scan();
 8001e62:	4b41      	ldr	r3, [pc, #260]	; (8001f68 <main+0x258>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	461c      	mov	r4, r3
 8001e68:	f7ff fbc4 	bl	80015f4 <keypad_scan>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4b3e      	ldr	r3, [pc, #248]	; (8001f6c <main+0x25c>)
 8001e72:	551a      	strb	r2, [r3, r4]
	  if(buffer[key] != 0 && buffer[key] != 'A' && buffer[key] != 'B'&& buffer[key] != 'C')
 8001e74:	4b3c      	ldr	r3, [pc, #240]	; (8001f68 <main+0x258>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b3c      	ldr	r3, [pc, #240]	; (8001f6c <main+0x25c>)
 8001e7c:	5c9b      	ldrb	r3, [r3, r2]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d03c      	beq.n	8001efc <main+0x1ec>
 8001e82:	4b39      	ldr	r3, [pc, #228]	; (8001f68 <main+0x258>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	4b38      	ldr	r3, [pc, #224]	; (8001f6c <main+0x25c>)
 8001e8a:	5c9b      	ldrb	r3, [r3, r2]
 8001e8c:	2b41      	cmp	r3, #65	; 0x41
 8001e8e:	d035      	beq.n	8001efc <main+0x1ec>
 8001e90:	4b35      	ldr	r3, [pc, #212]	; (8001f68 <main+0x258>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b35      	ldr	r3, [pc, #212]	; (8001f6c <main+0x25c>)
 8001e98:	5c9b      	ldrb	r3, [r3, r2]
 8001e9a:	2b42      	cmp	r3, #66	; 0x42
 8001e9c:	d02e      	beq.n	8001efc <main+0x1ec>
 8001e9e:	4b32      	ldr	r3, [pc, #200]	; (8001f68 <main+0x258>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4b31      	ldr	r3, [pc, #196]	; (8001f6c <main+0x25c>)
 8001ea6:	5c9b      	ldrb	r3, [r3, r2]
 8001ea8:	2b43      	cmp	r3, #67	; 0x43
 8001eaa:	d027      	beq.n	8001efc <main+0x1ec>
	  {
		  lcd_gotoxy(0,2);
 8001eac:	2102      	movs	r1, #2
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f7ff fed7 	bl	8001c62 <lcd_gotoxy>
		  lcd_send_string("Price :");
 8001eb4:	4821      	ldr	r0, [pc, #132]	; (8001f3c <main+0x22c>)
 8001eb6:	f7ff febf 	bl	8001c38 <lcd_send_string>
		  lcd_gotoxy(shift, 2);
 8001eba:	4b2d      	ldr	r3, [pc, #180]	; (8001f70 <main+0x260>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2102      	movs	r1, #2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fece 	bl	8001c62 <lcd_gotoxy>
		  lcd_send_data(buffer[key]);
 8001ec6:	4b28      	ldr	r3, [pc, #160]	; (8001f68 <main+0x258>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	4b27      	ldr	r3, [pc, #156]	; (8001f6c <main+0x25c>)
 8001ece:	5c9b      	ldrb	r3, [r3, r2]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fe71 	bl	8001bb8 <lcd_send_data>
		  shift++;						 //Tăng giá trị vị trí hiển thị số tiếp theo
 8001ed6:	4b26      	ldr	r3, [pc, #152]	; (8001f70 <main+0x260>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	3301      	adds	r3, #1
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	4b24      	ldr	r3, [pc, #144]	; (8001f70 <main+0x260>)
 8001ee0:	701a      	strb	r2, [r3, #0]
		  if(shift > 19) shift = 8;
 8001ee2:	4b23      	ldr	r3, [pc, #140]	; (8001f70 <main+0x260>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b13      	cmp	r3, #19
 8001ee8:	d902      	bls.n	8001ef0 <main+0x1e0>
 8001eea:	4b21      	ldr	r3, [pc, #132]	; (8001f70 <main+0x260>)
 8001eec:	2208      	movs	r2, #8
 8001eee:	701a      	strb	r2, [r3, #0]
		  key++;						 //Tăng giá trị phần tử mảng sau khi nhấn nút
 8001ef0:	4b1d      	ldr	r3, [pc, #116]	; (8001f68 <main+0x258>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	4b1b      	ldr	r3, [pc, #108]	; (8001f68 <main+0x258>)
 8001efa:	701a      	strb	r2, [r3, #0]
	  }
/*Trừ bì khi nhấn nút A--------------------------------------------------------------*/
	  if(buffer[key] == 'A')
 8001efc:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <main+0x258>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	461a      	mov	r2, r3
 8001f02:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <main+0x25c>)
 8001f04:	5c9b      	ldrb	r3, [r3, r2]
 8001f06:	2b41      	cmp	r3, #65	; 0x41
 8001f08:	d101      	bne.n	8001f0e <main+0x1fe>
	  {
		  NVIC_SystemReset();
 8001f0a:	f7ff feeb 	bl	8001ce4 <__NVIC_SystemReset>
	  }
/* Xóa giá tri khi nhấn nút B-------------------------------------------------------*/
	  if(buffer[key] == 'B')
 8001f0e:	4b16      	ldr	r3, [pc, #88]	; (8001f68 <main+0x258>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <main+0x25c>)
 8001f16:	5c9b      	ldrb	r3, [r3, r2]
 8001f18:	2b42      	cmp	r3, #66	; 0x42
 8001f1a:	d147      	bne.n	8001fac <main+0x29c>
	  {
		  shift = 8;					// dua con tro vi tri gia tri dau tien 7
 8001f1c:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <main+0x260>)
 8001f1e:	2208      	movs	r2, #8
 8001f20:	701a      	strb	r2, [r3, #0]
		  for(int i = 0; i< 10; i ++)	//xóa dữ liệu trong mảng buffer[]
 8001f22:	2300      	movs	r3, #0
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	e02d      	b.n	8001f84 <main+0x274>
 8001f28:	40010800 	.word	0x40010800
 8001f2c:	20000218 	.word	0x20000218
 8001f30:	43ef0000 	.word	0x43ef0000
 8001f34:	080084a0 	.word	0x080084a0
 8001f38:	080084b4 	.word	0x080084b4
 8001f3c:	080084bc 	.word	0x080084bc
 8001f40:	080084c4 	.word	0x080084c4
 8001f44:	080084c8 	.word	0x080084c8
 8001f48:	20000214 	.word	0x20000214
 8001f4c:	080084d0 	.word	0x080084d0
 8001f50:	20000284 	.word	0x20000284
 8001f54:	080084d8 	.word	0x080084d8
 8001f58:	40010c00 	.word	0x40010c00
 8001f5c:	40011000 	.word	0x40011000
 8001f60:	453b8000 	.word	0x453b8000
 8001f64:	080084e0 	.word	0x080084e0
 8001f68:	2000028e 	.word	0x2000028e
 8001f6c:	20000290 	.word	0x20000290
 8001f70:	20000020 	.word	0x20000020
		  {
			  buffer[i] = 0;
 8001f74:	4a39      	ldr	r2, [pc, #228]	; (800205c <main+0x34c>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	701a      	strb	r2, [r3, #0]
		  for(int i = 0; i< 10; i ++)	//xóa dữ liệu trong mảng buffer[]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	3301      	adds	r3, #1
 8001f82:	607b      	str	r3, [r7, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b09      	cmp	r3, #9
 8001f88:	ddf4      	ble.n	8001f74 <main+0x264>
		  }
		  key = 0;						// Xóa giá trị phần tử
 8001f8a:	4b35      	ldr	r3, [pc, #212]	; (8002060 <main+0x350>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
		  lcd_gotoxy(0,2);
 8001f90:	2102      	movs	r1, #2
 8001f92:	2000      	movs	r0, #0
 8001f94:	f7ff fe65 	bl	8001c62 <lcd_gotoxy>
		  lcd_send_string("Price :          ");
 8001f98:	4832      	ldr	r0, [pc, #200]	; (8002064 <main+0x354>)
 8001f9a:	f7ff fe4d 	bl	8001c38 <lcd_send_string>
		  lcd_gotoxy(0, 3);
 8001f9e:	2103      	movs	r1, #3
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	f7ff fe5e 	bl	8001c62 <lcd_gotoxy>
		  lcd_send_string("Total :          ");
 8001fa6:	4830      	ldr	r0, [pc, #192]	; (8002068 <main+0x358>)
 8001fa8:	f7ff fe46 	bl	8001c38 <lcd_send_string>
	  }
/*Tính tổng khi nhấn nút C-----------------------------------------------------------*/
	  if(buffer[key] == 'C')
 8001fac:	4b2c      	ldr	r3, [pc, #176]	; (8002060 <main+0x350>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4b2a      	ldr	r3, [pc, #168]	; (800205c <main+0x34c>)
 8001fb4:	5c9b      	ldrb	r3, [r3, r2]
 8001fb6:	2b43      	cmp	r3, #67	; 0x43
 8001fb8:	f47f aef5 	bne.w	8001da6 <main+0x96>
	  {
		  //buffer[0] - 48 là để chuyển giá trị char thành giá trị int (Tham khảo bảng mã ASCII)
		  Total = (buffer[0] - 48)*10000 + (buffer[1] - 48)*1000+ (buffer[2] - 48)*100 + (buffer[3] - 48)*10 + (buffer[4] - 48)*1;
 8001fbc:	4b27      	ldr	r3, [pc, #156]	; (800205c <main+0x34c>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	3b30      	subs	r3, #48	; 0x30
 8001fc2:	f242 7210 	movw	r2, #10000	; 0x2710
 8001fc6:	fb03 f202 	mul.w	r2, r3, r2
 8001fca:	4b24      	ldr	r3, [pc, #144]	; (800205c <main+0x34c>)
 8001fcc:	785b      	ldrb	r3, [r3, #1]
 8001fce:	3b30      	subs	r3, #48	; 0x30
 8001fd0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001fd4:	fb01 f303 	mul.w	r3, r1, r3
 8001fd8:	441a      	add	r2, r3
 8001fda:	4b20      	ldr	r3, [pc, #128]	; (800205c <main+0x34c>)
 8001fdc:	789b      	ldrb	r3, [r3, #2]
 8001fde:	3b30      	subs	r3, #48	; 0x30
 8001fe0:	2164      	movs	r1, #100	; 0x64
 8001fe2:	fb01 f303 	mul.w	r3, r1, r3
 8001fe6:	18d1      	adds	r1, r2, r3
 8001fe8:	4b1c      	ldr	r3, [pc, #112]	; (800205c <main+0x34c>)
 8001fea:	78db      	ldrb	r3, [r3, #3]
 8001fec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	18ca      	adds	r2, r1, r3
 8001ffa:	4b18      	ldr	r3, [pc, #96]	; (800205c <main+0x34c>)
 8001ffc:	791b      	ldrb	r3, [r3, #4]
 8001ffe:	3b30      	subs	r3, #48	; 0x30
 8002000:	4413      	add	r3, r2
 8002002:	461a      	mov	r2, r3
 8002004:	4b19      	ldr	r3, [pc, #100]	; (800206c <main+0x35c>)
 8002006:	601a      	str	r2, [r3, #0]
		  Total = Total * weight;
 8002008:	4b18      	ldr	r3, [pc, #96]	; (800206c <main+0x35c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe fe61 	bl	8000cd4 <__aeabi_ui2f>
 8002012:	4602      	mov	r2, r0
 8002014:	4b16      	ldr	r3, [pc, #88]	; (8002070 <main+0x360>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4619      	mov	r1, r3
 800201a:	4610      	mov	r0, r2
 800201c:	f7fe feb2 	bl	8000d84 <__aeabi_fmul>
 8002020:	4603      	mov	r3, r0
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff f874 	bl	8001110 <__aeabi_f2uiz>
 8002028:	4603      	mov	r3, r0
 800202a:	4a10      	ldr	r2, [pc, #64]	; (800206c <main+0x35c>)
 800202c:	6013      	str	r3, [r2, #0]
		  sprintf(LCD_send,"%ld",Total);
 800202e:	4b0f      	ldr	r3, [pc, #60]	; (800206c <main+0x35c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	490f      	ldr	r1, [pc, #60]	; (8002074 <main+0x364>)
 8002036:	4810      	ldr	r0, [pc, #64]	; (8002078 <main+0x368>)
 8002038:	f002 fd94 	bl	8004b64 <siprintf>
		  lcd_gotoxy(0, 3);
 800203c:	2103      	movs	r1, #3
 800203e:	2000      	movs	r0, #0
 8002040:	f7ff fe0f 	bl	8001c62 <lcd_gotoxy>
		  lcd_send_string("Total : ");
 8002044:	480d      	ldr	r0, [pc, #52]	; (800207c <main+0x36c>)
 8002046:	f7ff fdf7 	bl	8001c38 <lcd_send_string>
		  lcd_gotoxy(8, 3);
 800204a:	2103      	movs	r1, #3
 800204c:	2008      	movs	r0, #8
 800204e:	f7ff fe08 	bl	8001c62 <lcd_gotoxy>
		  lcd_send_string(LCD_send);
 8002052:	4809      	ldr	r0, [pc, #36]	; (8002078 <main+0x368>)
 8002054:	f7ff fdf0 	bl	8001c38 <lcd_send_string>
	  weight = hx711_weight(&loadcell, 10);
 8002058:	e6a5      	b.n	8001da6 <main+0x96>
 800205a:	bf00      	nop
 800205c:	20000290 	.word	0x20000290
 8002060:	2000028e 	.word	0x2000028e
 8002064:	080084f0 	.word	0x080084f0
 8002068:	08008504 	.word	0x08008504
 800206c:	2000029c 	.word	0x2000029c
 8002070:	20000214 	.word	0x20000214
 8002074:	08008518 	.word	0x08008518
 8002078:	20000284 	.word	0x20000284
 800207c:	0800851c 	.word	0x0800851c

08002080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b090      	sub	sp, #64	; 0x40
 8002084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002086:	f107 0318 	add.w	r3, r7, #24
 800208a:	2228      	movs	r2, #40	; 0x28
 800208c:	2100      	movs	r1, #0
 800208e:	4618      	mov	r0, r3
 8002090:	f002 fdcb 	bl	8004c2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	609a      	str	r2, [r3, #8]
 800209e:	60da      	str	r2, [r3, #12]
 80020a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020a2:	2301      	movs	r3, #1
 80020a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80020ac:	2300      	movs	r3, #0
 80020ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020b0:	2301      	movs	r3, #1
 80020b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020b4:	2302      	movs	r3, #2
 80020b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80020be:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80020c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020c4:	f107 0318 	add.w	r3, r7, #24
 80020c8:	4618      	mov	r0, r3
 80020ca:	f001 fa21 	bl	8003510 <HAL_RCC_OscConfig>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80020d4:	f000 f8d8 	bl	8002288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020d8:	230f      	movs	r3, #15
 80020da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020dc:	2302      	movs	r3, #2
 80020de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	2102      	movs	r1, #2
 80020f2:	4618      	mov	r0, r3
 80020f4:	f001 fc8e 	bl	8003a14 <HAL_RCC_ClockConfig>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80020fe:	f000 f8c3 	bl	8002288 <Error_Handler>
  }
}
 8002102:	bf00      	nop
 8002104:	3740      	adds	r7, #64	; 0x40
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002110:	4b12      	ldr	r3, [pc, #72]	; (800215c <MX_I2C1_Init+0x50>)
 8002112:	4a13      	ldr	r2, [pc, #76]	; (8002160 <MX_I2C1_Init+0x54>)
 8002114:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002116:	4b11      	ldr	r3, [pc, #68]	; (800215c <MX_I2C1_Init+0x50>)
 8002118:	4a12      	ldr	r2, [pc, #72]	; (8002164 <MX_I2C1_Init+0x58>)
 800211a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800211c:	4b0f      	ldr	r3, [pc, #60]	; (800215c <MX_I2C1_Init+0x50>)
 800211e:	2200      	movs	r2, #0
 8002120:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002122:	4b0e      	ldr	r3, [pc, #56]	; (800215c <MX_I2C1_Init+0x50>)
 8002124:	2200      	movs	r2, #0
 8002126:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <MX_I2C1_Init+0x50>)
 800212a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800212e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002130:	4b0a      	ldr	r3, [pc, #40]	; (800215c <MX_I2C1_Init+0x50>)
 8002132:	2200      	movs	r2, #0
 8002134:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002136:	4b09      	ldr	r3, [pc, #36]	; (800215c <MX_I2C1_Init+0x50>)
 8002138:	2200      	movs	r2, #0
 800213a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800213c:	4b07      	ldr	r3, [pc, #28]	; (800215c <MX_I2C1_Init+0x50>)
 800213e:	2200      	movs	r2, #0
 8002140:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002142:	4b06      	ldr	r3, [pc, #24]	; (800215c <MX_I2C1_Init+0x50>)
 8002144:	2200      	movs	r2, #0
 8002146:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002148:	4804      	ldr	r0, [pc, #16]	; (800215c <MX_I2C1_Init+0x50>)
 800214a:	f000 fd45 	bl	8002bd8 <HAL_I2C_Init>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002154:	f000 f898 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20000230 	.word	0x20000230
 8002160:	40005400 	.word	0x40005400
 8002164:	000186a0 	.word	0x000186a0

08002168 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b088      	sub	sp, #32
 800216c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216e:	f107 0310 	add.w	r3, r7, #16
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	605a      	str	r2, [r3, #4]
 8002178:	609a      	str	r2, [r3, #8]
 800217a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800217c:	4b3e      	ldr	r3, [pc, #248]	; (8002278 <MX_GPIO_Init+0x110>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	4a3d      	ldr	r2, [pc, #244]	; (8002278 <MX_GPIO_Init+0x110>)
 8002182:	f043 0310 	orr.w	r3, r3, #16
 8002186:	6193      	str	r3, [r2, #24]
 8002188:	4b3b      	ldr	r3, [pc, #236]	; (8002278 <MX_GPIO_Init+0x110>)
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	f003 0310 	and.w	r3, r3, #16
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002194:	4b38      	ldr	r3, [pc, #224]	; (8002278 <MX_GPIO_Init+0x110>)
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	4a37      	ldr	r2, [pc, #220]	; (8002278 <MX_GPIO_Init+0x110>)
 800219a:	f043 0320 	orr.w	r3, r3, #32
 800219e:	6193      	str	r3, [r2, #24]
 80021a0:	4b35      	ldr	r3, [pc, #212]	; (8002278 <MX_GPIO_Init+0x110>)
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	f003 0320 	and.w	r3, r3, #32
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ac:	4b32      	ldr	r3, [pc, #200]	; (8002278 <MX_GPIO_Init+0x110>)
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	4a31      	ldr	r2, [pc, #196]	; (8002278 <MX_GPIO_Init+0x110>)
 80021b2:	f043 0304 	orr.w	r3, r3, #4
 80021b6:	6193      	str	r3, [r2, #24]
 80021b8:	4b2f      	ldr	r3, [pc, #188]	; (8002278 <MX_GPIO_Init+0x110>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	607b      	str	r3, [r7, #4]
 80021c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c4:	4b2c      	ldr	r3, [pc, #176]	; (8002278 <MX_GPIO_Init+0x110>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	4a2b      	ldr	r2, [pc, #172]	; (8002278 <MX_GPIO_Init+0x110>)
 80021ca:	f043 0308 	orr.w	r3, r3, #8
 80021ce:	6193      	str	r3, [r2, #24]
 80021d0:	4b29      	ldr	r3, [pc, #164]	; (8002278 <MX_GPIO_Init+0x110>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	f003 0308 	and.w	r3, r3, #8
 80021d8:	603b      	str	r3, [r7, #0]
 80021da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80021dc:	2200      	movs	r2, #0
 80021de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021e2:	4826      	ldr	r0, [pc, #152]	; (800227c <MX_GPIO_Init+0x114>)
 80021e4:	f000 fcdf 	bl	8002ba6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80021e8:	2200      	movs	r2, #0
 80021ea:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 80021ee:	4824      	ldr	r0, [pc, #144]	; (8002280 <MX_GPIO_Init+0x118>)
 80021f0:	f000 fcd9 	bl	8002ba6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80021f4:	2200      	movs	r2, #0
 80021f6:	2101      	movs	r1, #1
 80021f8:	4822      	ldr	r0, [pc, #136]	; (8002284 <MX_GPIO_Init+0x11c>)
 80021fa:	f000 fcd4 	bl	8002ba6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80021fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002202:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002204:	2301      	movs	r3, #1
 8002206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220c:	2302      	movs	r3, #2
 800220e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002210:	f107 0310 	add.w	r3, r7, #16
 8002214:	4619      	mov	r1, r3
 8002216:	4819      	ldr	r0, [pc, #100]	; (800227c <MX_GPIO_Init+0x114>)
 8002218:	f000 fb2a 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800221c:	230f      	movs	r3, #15
 800221e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002228:	f107 0310 	add.w	r3, r7, #16
 800222c:	4619      	mov	r1, r3
 800222e:	4814      	ldr	r0, [pc, #80]	; (8002280 <MX_GPIO_Init+0x118>)
 8002230:	f000 fb1e 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8002234:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8002238:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800223a:	2301      	movs	r3, #1
 800223c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002242:	2302      	movs	r3, #2
 8002244:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002246:	f107 0310 	add.w	r3, r7, #16
 800224a:	4619      	mov	r1, r3
 800224c:	480c      	ldr	r0, [pc, #48]	; (8002280 <MX_GPIO_Init+0x118>)
 800224e:	f000 fb0f 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002252:	2301      	movs	r3, #1
 8002254:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002256:	2301      	movs	r3, #1
 8002258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225e:	2302      	movs	r3, #2
 8002260:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002262:	f107 0310 	add.w	r3, r7, #16
 8002266:	4619      	mov	r1, r3
 8002268:	4806      	ldr	r0, [pc, #24]	; (8002284 <MX_GPIO_Init+0x11c>)
 800226a:	f000 fb01 	bl	8002870 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800226e:	bf00      	nop
 8002270:	3720      	adds	r7, #32
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40021000 	.word	0x40021000
 800227c:	40011000 	.word	0x40011000
 8002280:	40010800 	.word	0x40010800
 8002284:	40010c00 	.word	0x40010c00

08002288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800228c:	b672      	cpsid	i
}
 800228e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002290:	e7fe      	b.n	8002290 <Error_Handler+0x8>
	...

08002294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800229a:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <HAL_MspInit+0x5c>)
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <HAL_MspInit+0x5c>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6193      	str	r3, [r2, #24]
 80022a6:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <HAL_MspInit+0x5c>)
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022b2:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <HAL_MspInit+0x5c>)
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	4a0e      	ldr	r2, [pc, #56]	; (80022f0 <HAL_MspInit+0x5c>)
 80022b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022bc:	61d3      	str	r3, [r2, #28]
 80022be:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <HAL_MspInit+0x5c>)
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c6:	607b      	str	r3, [r7, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022ca:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <HAL_MspInit+0x60>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	4a04      	ldr	r2, [pc, #16]	; (80022f4 <HAL_MspInit+0x60>)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022e6:	bf00      	nop
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40010000 	.word	0x40010000

080022f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002300:	f107 0310 	add.w	r3, r7, #16
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a15      	ldr	r2, [pc, #84]	; (8002368 <HAL_I2C_MspInit+0x70>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d123      	bne.n	8002360 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002318:	4b14      	ldr	r3, [pc, #80]	; (800236c <HAL_I2C_MspInit+0x74>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	4a13      	ldr	r2, [pc, #76]	; (800236c <HAL_I2C_MspInit+0x74>)
 800231e:	f043 0308 	orr.w	r3, r3, #8
 8002322:	6193      	str	r3, [r2, #24]
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <HAL_I2C_MspInit+0x74>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	f003 0308 	and.w	r3, r3, #8
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002330:	23c0      	movs	r3, #192	; 0xc0
 8002332:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002334:	2312      	movs	r3, #18
 8002336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002338:	2303      	movs	r3, #3
 800233a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233c:	f107 0310 	add.w	r3, r7, #16
 8002340:	4619      	mov	r1, r3
 8002342:	480b      	ldr	r0, [pc, #44]	; (8002370 <HAL_I2C_MspInit+0x78>)
 8002344:	f000 fa94 	bl	8002870 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002348:	4b08      	ldr	r3, [pc, #32]	; (800236c <HAL_I2C_MspInit+0x74>)
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	4a07      	ldr	r2, [pc, #28]	; (800236c <HAL_I2C_MspInit+0x74>)
 800234e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002352:	61d3      	str	r3, [r2, #28]
 8002354:	4b05      	ldr	r3, [pc, #20]	; (800236c <HAL_I2C_MspInit+0x74>)
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002360:	bf00      	nop
 8002362:	3720      	adds	r7, #32
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40005400 	.word	0x40005400
 800236c:	40021000 	.word	0x40021000
 8002370:	40010c00 	.word	0x40010c00

08002374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002378:	e7fe      	b.n	8002378 <NMI_Handler+0x4>

0800237a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800237a:	b480      	push	{r7}
 800237c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800237e:	e7fe      	b.n	800237e <HardFault_Handler+0x4>

08002380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002384:	e7fe      	b.n	8002384 <MemManage_Handler+0x4>

08002386 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800238a:	e7fe      	b.n	800238a <BusFault_Handler+0x4>

0800238c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002390:	e7fe      	b.n	8002390 <UsageFault_Handler+0x4>

08002392 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr

0800239e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr

080023aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr

080023b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023ba:	f000 f935 	bl	8002628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0
  return 1;
 80023c6:	2301      	movs	r3, #1
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr

080023d0 <_kill>:

int _kill(int pid, int sig)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023da:	f002 fc79 	bl	8004cd0 <__errno>
 80023de:	4603      	mov	r3, r0
 80023e0:	2216      	movs	r2, #22
 80023e2:	601a      	str	r2, [r3, #0]
  return -1;
 80023e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <_exit>:

void _exit (int status)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023f8:	f04f 31ff 	mov.w	r1, #4294967295
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7ff ffe7 	bl	80023d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002402:	e7fe      	b.n	8002402 <_exit+0x12>

08002404 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	e00a      	b.n	800242c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002416:	f3af 8000 	nop.w
 800241a:	4601      	mov	r1, r0
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	60ba      	str	r2, [r7, #8]
 8002422:	b2ca      	uxtb	r2, r1
 8002424:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	3301      	adds	r3, #1
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	429a      	cmp	r2, r3
 8002432:	dbf0      	blt.n	8002416 <_read+0x12>
  }

  return len;
 8002434:	687b      	ldr	r3, [r7, #4]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b086      	sub	sp, #24
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	e009      	b.n	8002464 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	60ba      	str	r2, [r7, #8]
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	3301      	adds	r3, #1
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	429a      	cmp	r2, r3
 800246a:	dbf1      	blt.n	8002450 <_write+0x12>
  }
  return len;
 800246c:	687b      	ldr	r3, [r7, #4]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <_close>:

int _close(int file)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800247e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002482:	4618      	mov	r0, r3
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr

0800248c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800249c:	605a      	str	r2, [r3, #4]
  return 0;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr

080024aa <_isatty>:

int _isatty(int file)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024b2:	2301      	movs	r3, #1
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bc80      	pop	{r7}
 80024bc:	4770      	bx	lr

080024be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024be:	b480      	push	{r7}
 80024c0:	b085      	sub	sp, #20
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	60f8      	str	r0, [r7, #12]
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr
	...

080024d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024e0:	4a14      	ldr	r2, [pc, #80]	; (8002534 <_sbrk+0x5c>)
 80024e2:	4b15      	ldr	r3, [pc, #84]	; (8002538 <_sbrk+0x60>)
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024ec:	4b13      	ldr	r3, [pc, #76]	; (800253c <_sbrk+0x64>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d102      	bne.n	80024fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024f4:	4b11      	ldr	r3, [pc, #68]	; (800253c <_sbrk+0x64>)
 80024f6:	4a12      	ldr	r2, [pc, #72]	; (8002540 <_sbrk+0x68>)
 80024f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024fa:	4b10      	ldr	r3, [pc, #64]	; (800253c <_sbrk+0x64>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4413      	add	r3, r2
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	429a      	cmp	r2, r3
 8002506:	d207      	bcs.n	8002518 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002508:	f002 fbe2 	bl	8004cd0 <__errno>
 800250c:	4603      	mov	r3, r0
 800250e:	220c      	movs	r2, #12
 8002510:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002512:	f04f 33ff 	mov.w	r3, #4294967295
 8002516:	e009      	b.n	800252c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002518:	4b08      	ldr	r3, [pc, #32]	; (800253c <_sbrk+0x64>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800251e:	4b07      	ldr	r3, [pc, #28]	; (800253c <_sbrk+0x64>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4413      	add	r3, r2
 8002526:	4a05      	ldr	r2, [pc, #20]	; (800253c <_sbrk+0x64>)
 8002528:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800252a:	68fb      	ldr	r3, [r7, #12]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	20005000 	.word	0x20005000
 8002538:	00000400 	.word	0x00000400
 800253c:	200002a0 	.word	0x200002a0
 8002540:	200003f8 	.word	0x200003f8

08002544 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr

08002550 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002550:	f7ff fff8 	bl	8002544 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002554:	480b      	ldr	r0, [pc, #44]	; (8002584 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002556:	490c      	ldr	r1, [pc, #48]	; (8002588 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002558:	4a0c      	ldr	r2, [pc, #48]	; (800258c <LoopFillZerobss+0x16>)
  movs r3, #0
 800255a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800255c:	e002      	b.n	8002564 <LoopCopyDataInit>

0800255e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800255e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002562:	3304      	adds	r3, #4

08002564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002568:	d3f9      	bcc.n	800255e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800256a:	4a09      	ldr	r2, [pc, #36]	; (8002590 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800256c:	4c09      	ldr	r4, [pc, #36]	; (8002594 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800256e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002570:	e001      	b.n	8002576 <LoopFillZerobss>

08002572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002574:	3204      	adds	r2, #4

08002576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002578:	d3fb      	bcc.n	8002572 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800257a:	f002 fbaf 	bl	8004cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800257e:	f7ff fbc7 	bl	8001d10 <main>
  bx lr
 8002582:	4770      	bx	lr
  ldr r0, =_sdata
 8002584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002588:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 800258c:	08008990 	.word	0x08008990
  ldr r2, =_sbss
 8002590:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002594:	200003f4 	.word	0x200003f4

08002598 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002598:	e7fe      	b.n	8002598 <ADC1_2_IRQHandler>
	...

0800259c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025a0:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <HAL_Init+0x28>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a07      	ldr	r2, [pc, #28]	; (80025c4 <HAL_Init+0x28>)
 80025a6:	f043 0310 	orr.w	r3, r3, #16
 80025aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025ac:	2003      	movs	r0, #3
 80025ae:	f000 f92b 	bl	8002808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025b2:	200f      	movs	r0, #15
 80025b4:	f000 f808 	bl	80025c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025b8:	f7ff fe6c 	bl	8002294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40022000 	.word	0x40022000

080025c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025d0:	4b12      	ldr	r3, [pc, #72]	; (800261c <HAL_InitTick+0x54>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4b12      	ldr	r3, [pc, #72]	; (8002620 <HAL_InitTick+0x58>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	4619      	mov	r1, r3
 80025da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025de:	fbb3 f3f1 	udiv	r3, r3, r1
 80025e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 f935 	bl	8002856 <HAL_SYSTICK_Config>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e00e      	b.n	8002614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b0f      	cmp	r3, #15
 80025fa:	d80a      	bhi.n	8002612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025fc:	2200      	movs	r2, #0
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	f04f 30ff 	mov.w	r0, #4294967295
 8002604:	f000 f90b 	bl	800281e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002608:	4a06      	ldr	r2, [pc, #24]	; (8002624 <HAL_InitTick+0x5c>)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	e000      	b.n	8002614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20000024 	.word	0x20000024
 8002620:	2000002c 	.word	0x2000002c
 8002624:	20000028 	.word	0x20000028

08002628 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <HAL_IncTick+0x1c>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	461a      	mov	r2, r3
 8002632:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_IncTick+0x20>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4413      	add	r3, r2
 8002638:	4a03      	ldr	r2, [pc, #12]	; (8002648 <HAL_IncTick+0x20>)
 800263a:	6013      	str	r3, [r2, #0]
}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr
 8002644:	2000002c 	.word	0x2000002c
 8002648:	200002a4 	.word	0x200002a4

0800264c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  return uwTick;
 8002650:	4b02      	ldr	r3, [pc, #8]	; (800265c <HAL_GetTick+0x10>)
 8002652:	681b      	ldr	r3, [r3, #0]
}
 8002654:	4618      	mov	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr
 800265c:	200002a4 	.word	0x200002a4

08002660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002668:	f7ff fff0 	bl	800264c <HAL_GetTick>
 800266c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002678:	d005      	beq.n	8002686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800267a:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <HAL_Delay+0x44>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4413      	add	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002686:	bf00      	nop
 8002688:	f7ff ffe0 	bl	800264c <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	429a      	cmp	r2, r3
 8002696:	d8f7      	bhi.n	8002688 <HAL_Delay+0x28>
  {
  }
}
 8002698:	bf00      	nop
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	2000002c 	.word	0x2000002c

080026a8 <__NVIC_SetPriorityGrouping>:
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b8:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <__NVIC_SetPriorityGrouping+0x44>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026c4:	4013      	ands	r3, r2
 80026c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026da:	4a04      	ldr	r2, [pc, #16]	; (80026ec <__NVIC_SetPriorityGrouping+0x44>)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	60d3      	str	r3, [r2, #12]
}
 80026e0:	bf00      	nop
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	e000ed00 	.word	0xe000ed00

080026f0 <__NVIC_GetPriorityGrouping>:
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026f4:	4b04      	ldr	r3, [pc, #16]	; (8002708 <__NVIC_GetPriorityGrouping+0x18>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	0a1b      	lsrs	r3, r3, #8
 80026fa:	f003 0307 	and.w	r3, r3, #7
}
 80026fe:	4618      	mov	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <__NVIC_SetPriority>:
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	6039      	str	r1, [r7, #0]
 8002716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271c:	2b00      	cmp	r3, #0
 800271e:	db0a      	blt.n	8002736 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	b2da      	uxtb	r2, r3
 8002724:	490c      	ldr	r1, [pc, #48]	; (8002758 <__NVIC_SetPriority+0x4c>)
 8002726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272a:	0112      	lsls	r2, r2, #4
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	440b      	add	r3, r1
 8002730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002734:	e00a      	b.n	800274c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	b2da      	uxtb	r2, r3
 800273a:	4908      	ldr	r1, [pc, #32]	; (800275c <__NVIC_SetPriority+0x50>)
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	3b04      	subs	r3, #4
 8002744:	0112      	lsls	r2, r2, #4
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	440b      	add	r3, r1
 800274a:	761a      	strb	r2, [r3, #24]
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	e000e100 	.word	0xe000e100
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <NVIC_EncodePriority>:
{
 8002760:	b480      	push	{r7}
 8002762:	b089      	sub	sp, #36	; 0x24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f1c3 0307 	rsb	r3, r3, #7
 800277a:	2b04      	cmp	r3, #4
 800277c:	bf28      	it	cs
 800277e:	2304      	movcs	r3, #4
 8002780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3304      	adds	r3, #4
 8002786:	2b06      	cmp	r3, #6
 8002788:	d902      	bls.n	8002790 <NVIC_EncodePriority+0x30>
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3b03      	subs	r3, #3
 800278e:	e000      	b.n	8002792 <NVIC_EncodePriority+0x32>
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002794:	f04f 32ff 	mov.w	r2, #4294967295
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43da      	mvns	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	401a      	ands	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a8:	f04f 31ff 	mov.w	r1, #4294967295
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	fa01 f303 	lsl.w	r3, r1, r3
 80027b2:	43d9      	mvns	r1, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b8:	4313      	orrs	r3, r2
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3724      	adds	r7, #36	; 0x24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d4:	d301      	bcc.n	80027da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027d6:	2301      	movs	r3, #1
 80027d8:	e00f      	b.n	80027fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027da:	4a0a      	ldr	r2, [pc, #40]	; (8002804 <SysTick_Config+0x40>)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3b01      	subs	r3, #1
 80027e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027e2:	210f      	movs	r1, #15
 80027e4:	f04f 30ff 	mov.w	r0, #4294967295
 80027e8:	f7ff ff90 	bl	800270c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027ec:	4b05      	ldr	r3, [pc, #20]	; (8002804 <SysTick_Config+0x40>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027f2:	4b04      	ldr	r3, [pc, #16]	; (8002804 <SysTick_Config+0x40>)
 80027f4:	2207      	movs	r2, #7
 80027f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	e000e010 	.word	0xe000e010

08002808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff ff49 	bl	80026a8 <__NVIC_SetPriorityGrouping>
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800281e:	b580      	push	{r7, lr}
 8002820:	b086      	sub	sp, #24
 8002822:	af00      	add	r7, sp, #0
 8002824:	4603      	mov	r3, r0
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
 800282a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002830:	f7ff ff5e 	bl	80026f0 <__NVIC_GetPriorityGrouping>
 8002834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	68b9      	ldr	r1, [r7, #8]
 800283a:	6978      	ldr	r0, [r7, #20]
 800283c:	f7ff ff90 	bl	8002760 <NVIC_EncodePriority>
 8002840:	4602      	mov	r2, r0
 8002842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002846:	4611      	mov	r1, r2
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ff5f 	bl	800270c <__NVIC_SetPriority>
}
 800284e:	bf00      	nop
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7ff ffb0 	bl	80027c4 <SysTick_Config>
 8002864:	4603      	mov	r3, r0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002870:	b480      	push	{r7}
 8002872:	b08b      	sub	sp, #44	; 0x2c
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800287a:	2300      	movs	r3, #0
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800287e:	2300      	movs	r3, #0
 8002880:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002882:	e169      	b.n	8002b58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002884:	2201      	movs	r2, #1
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	69fa      	ldr	r2, [r7, #28]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	429a      	cmp	r2, r3
 800289e:	f040 8158 	bne.w	8002b52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4a9a      	ldr	r2, [pc, #616]	; (8002b10 <HAL_GPIO_Init+0x2a0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d05e      	beq.n	800296a <HAL_GPIO_Init+0xfa>
 80028ac:	4a98      	ldr	r2, [pc, #608]	; (8002b10 <HAL_GPIO_Init+0x2a0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d875      	bhi.n	800299e <HAL_GPIO_Init+0x12e>
 80028b2:	4a98      	ldr	r2, [pc, #608]	; (8002b14 <HAL_GPIO_Init+0x2a4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d058      	beq.n	800296a <HAL_GPIO_Init+0xfa>
 80028b8:	4a96      	ldr	r2, [pc, #600]	; (8002b14 <HAL_GPIO_Init+0x2a4>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d86f      	bhi.n	800299e <HAL_GPIO_Init+0x12e>
 80028be:	4a96      	ldr	r2, [pc, #600]	; (8002b18 <HAL_GPIO_Init+0x2a8>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d052      	beq.n	800296a <HAL_GPIO_Init+0xfa>
 80028c4:	4a94      	ldr	r2, [pc, #592]	; (8002b18 <HAL_GPIO_Init+0x2a8>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d869      	bhi.n	800299e <HAL_GPIO_Init+0x12e>
 80028ca:	4a94      	ldr	r2, [pc, #592]	; (8002b1c <HAL_GPIO_Init+0x2ac>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d04c      	beq.n	800296a <HAL_GPIO_Init+0xfa>
 80028d0:	4a92      	ldr	r2, [pc, #584]	; (8002b1c <HAL_GPIO_Init+0x2ac>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d863      	bhi.n	800299e <HAL_GPIO_Init+0x12e>
 80028d6:	4a92      	ldr	r2, [pc, #584]	; (8002b20 <HAL_GPIO_Init+0x2b0>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d046      	beq.n	800296a <HAL_GPIO_Init+0xfa>
 80028dc:	4a90      	ldr	r2, [pc, #576]	; (8002b20 <HAL_GPIO_Init+0x2b0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d85d      	bhi.n	800299e <HAL_GPIO_Init+0x12e>
 80028e2:	2b12      	cmp	r3, #18
 80028e4:	d82a      	bhi.n	800293c <HAL_GPIO_Init+0xcc>
 80028e6:	2b12      	cmp	r3, #18
 80028e8:	d859      	bhi.n	800299e <HAL_GPIO_Init+0x12e>
 80028ea:	a201      	add	r2, pc, #4	; (adr r2, 80028f0 <HAL_GPIO_Init+0x80>)
 80028ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f0:	0800296b 	.word	0x0800296b
 80028f4:	08002945 	.word	0x08002945
 80028f8:	08002957 	.word	0x08002957
 80028fc:	08002999 	.word	0x08002999
 8002900:	0800299f 	.word	0x0800299f
 8002904:	0800299f 	.word	0x0800299f
 8002908:	0800299f 	.word	0x0800299f
 800290c:	0800299f 	.word	0x0800299f
 8002910:	0800299f 	.word	0x0800299f
 8002914:	0800299f 	.word	0x0800299f
 8002918:	0800299f 	.word	0x0800299f
 800291c:	0800299f 	.word	0x0800299f
 8002920:	0800299f 	.word	0x0800299f
 8002924:	0800299f 	.word	0x0800299f
 8002928:	0800299f 	.word	0x0800299f
 800292c:	0800299f 	.word	0x0800299f
 8002930:	0800299f 	.word	0x0800299f
 8002934:	0800294d 	.word	0x0800294d
 8002938:	08002961 	.word	0x08002961
 800293c:	4a79      	ldr	r2, [pc, #484]	; (8002b24 <HAL_GPIO_Init+0x2b4>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d013      	beq.n	800296a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002942:	e02c      	b.n	800299e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	623b      	str	r3, [r7, #32]
          break;
 800294a:	e029      	b.n	80029a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	3304      	adds	r3, #4
 8002952:	623b      	str	r3, [r7, #32]
          break;
 8002954:	e024      	b.n	80029a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	3308      	adds	r3, #8
 800295c:	623b      	str	r3, [r7, #32]
          break;
 800295e:	e01f      	b.n	80029a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	330c      	adds	r3, #12
 8002966:	623b      	str	r3, [r7, #32]
          break;
 8002968:	e01a      	b.n	80029a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d102      	bne.n	8002978 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002972:	2304      	movs	r3, #4
 8002974:	623b      	str	r3, [r7, #32]
          break;
 8002976:	e013      	b.n	80029a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d105      	bne.n	800298c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002980:	2308      	movs	r3, #8
 8002982:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69fa      	ldr	r2, [r7, #28]
 8002988:	611a      	str	r2, [r3, #16]
          break;
 800298a:	e009      	b.n	80029a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800298c:	2308      	movs	r3, #8
 800298e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69fa      	ldr	r2, [r7, #28]
 8002994:	615a      	str	r2, [r3, #20]
          break;
 8002996:	e003      	b.n	80029a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002998:	2300      	movs	r3, #0
 800299a:	623b      	str	r3, [r7, #32]
          break;
 800299c:	e000      	b.n	80029a0 <HAL_GPIO_Init+0x130>
          break;
 800299e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	2bff      	cmp	r3, #255	; 0xff
 80029a4:	d801      	bhi.n	80029aa <HAL_GPIO_Init+0x13a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	e001      	b.n	80029ae <HAL_GPIO_Init+0x13e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3304      	adds	r3, #4
 80029ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	2bff      	cmp	r3, #255	; 0xff
 80029b4:	d802      	bhi.n	80029bc <HAL_GPIO_Init+0x14c>
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	e002      	b.n	80029c2 <HAL_GPIO_Init+0x152>
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	3b08      	subs	r3, #8
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	210f      	movs	r1, #15
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	fa01 f303 	lsl.w	r3, r1, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	401a      	ands	r2, r3
 80029d4:	6a39      	ldr	r1, [r7, #32]
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	fa01 f303 	lsl.w	r3, r1, r3
 80029dc:	431a      	orrs	r2, r3
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 80b1 	beq.w	8002b52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029f0:	4b4d      	ldr	r3, [pc, #308]	; (8002b28 <HAL_GPIO_Init+0x2b8>)
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	4a4c      	ldr	r2, [pc, #304]	; (8002b28 <HAL_GPIO_Init+0x2b8>)
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	6193      	str	r3, [r2, #24]
 80029fc:	4b4a      	ldr	r3, [pc, #296]	; (8002b28 <HAL_GPIO_Init+0x2b8>)
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	60bb      	str	r3, [r7, #8]
 8002a06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a08:	4a48      	ldr	r2, [pc, #288]	; (8002b2c <HAL_GPIO_Init+0x2bc>)
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	089b      	lsrs	r3, r3, #2
 8002a0e:	3302      	adds	r3, #2
 8002a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	220f      	movs	r2, #15
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a40      	ldr	r2, [pc, #256]	; (8002b30 <HAL_GPIO_Init+0x2c0>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d013      	beq.n	8002a5c <HAL_GPIO_Init+0x1ec>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a3f      	ldr	r2, [pc, #252]	; (8002b34 <HAL_GPIO_Init+0x2c4>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d00d      	beq.n	8002a58 <HAL_GPIO_Init+0x1e8>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a3e      	ldr	r2, [pc, #248]	; (8002b38 <HAL_GPIO_Init+0x2c8>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d007      	beq.n	8002a54 <HAL_GPIO_Init+0x1e4>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a3d      	ldr	r2, [pc, #244]	; (8002b3c <HAL_GPIO_Init+0x2cc>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d101      	bne.n	8002a50 <HAL_GPIO_Init+0x1e0>
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e006      	b.n	8002a5e <HAL_GPIO_Init+0x1ee>
 8002a50:	2304      	movs	r3, #4
 8002a52:	e004      	b.n	8002a5e <HAL_GPIO_Init+0x1ee>
 8002a54:	2302      	movs	r3, #2
 8002a56:	e002      	b.n	8002a5e <HAL_GPIO_Init+0x1ee>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <HAL_GPIO_Init+0x1ee>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a60:	f002 0203 	and.w	r2, r2, #3
 8002a64:	0092      	lsls	r2, r2, #2
 8002a66:	4093      	lsls	r3, r2
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a6e:	492f      	ldr	r1, [pc, #188]	; (8002b2c <HAL_GPIO_Init+0x2bc>)
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	089b      	lsrs	r3, r3, #2
 8002a74:	3302      	adds	r3, #2
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d006      	beq.n	8002a96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a88:	4b2d      	ldr	r3, [pc, #180]	; (8002b40 <HAL_GPIO_Init+0x2d0>)
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	492c      	ldr	r1, [pc, #176]	; (8002b40 <HAL_GPIO_Init+0x2d0>)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	608b      	str	r3, [r1, #8]
 8002a94:	e006      	b.n	8002aa4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a96:	4b2a      	ldr	r3, [pc, #168]	; (8002b40 <HAL_GPIO_Init+0x2d0>)
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	4928      	ldr	r1, [pc, #160]	; (8002b40 <HAL_GPIO_Init+0x2d0>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d006      	beq.n	8002abe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ab0:	4b23      	ldr	r3, [pc, #140]	; (8002b40 <HAL_GPIO_Init+0x2d0>)
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	4922      	ldr	r1, [pc, #136]	; (8002b40 <HAL_GPIO_Init+0x2d0>)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	60cb      	str	r3, [r1, #12]
 8002abc:	e006      	b.n	8002acc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002abe:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <HAL_GPIO_Init+0x2d0>)
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	491e      	ldr	r1, [pc, #120]	; (8002b40 <HAL_GPIO_Init+0x2d0>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d006      	beq.n	8002ae6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ad8:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <HAL_GPIO_Init+0x2d0>)
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	4918      	ldr	r1, [pc, #96]	; (8002b40 <HAL_GPIO_Init+0x2d0>)
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	604b      	str	r3, [r1, #4]
 8002ae4:	e006      	b.n	8002af4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ae6:	4b16      	ldr	r3, [pc, #88]	; (8002b40 <HAL_GPIO_Init+0x2d0>)
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	4914      	ldr	r1, [pc, #80]	; (8002b40 <HAL_GPIO_Init+0x2d0>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d021      	beq.n	8002b44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b00:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <HAL_GPIO_Init+0x2d0>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	490e      	ldr	r1, [pc, #56]	; (8002b40 <HAL_GPIO_Init+0x2d0>)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	600b      	str	r3, [r1, #0]
 8002b0c:	e021      	b.n	8002b52 <HAL_GPIO_Init+0x2e2>
 8002b0e:	bf00      	nop
 8002b10:	10320000 	.word	0x10320000
 8002b14:	10310000 	.word	0x10310000
 8002b18:	10220000 	.word	0x10220000
 8002b1c:	10210000 	.word	0x10210000
 8002b20:	10120000 	.word	0x10120000
 8002b24:	10110000 	.word	0x10110000
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	40010000 	.word	0x40010000
 8002b30:	40010800 	.word	0x40010800
 8002b34:	40010c00 	.word	0x40010c00
 8002b38:	40011000 	.word	0x40011000
 8002b3c:	40011400 	.word	0x40011400
 8002b40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b44:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <HAL_GPIO_Init+0x304>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	4909      	ldr	r1, [pc, #36]	; (8002b74 <HAL_GPIO_Init+0x304>)
 8002b4e:	4013      	ands	r3, r2
 8002b50:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	3301      	adds	r3, #1
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f47f ae8e 	bne.w	8002884 <HAL_GPIO_Init+0x14>
  }
}
 8002b68:	bf00      	nop
 8002b6a:	bf00      	nop
 8002b6c:	372c      	adds	r7, #44	; 0x2c
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr
 8002b74:	40010400 	.word	0x40010400

08002b78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	887b      	ldrh	r3, [r7, #2]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b90:	2301      	movs	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
 8002b94:	e001      	b.n	8002b9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b96:	2300      	movs	r3, #0
 8002b98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	807b      	strh	r3, [r7, #2]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bb6:	787b      	ldrb	r3, [r7, #1]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bbc:	887a      	ldrh	r2, [r7, #2]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002bc2:	e003      	b.n	8002bcc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bc4:	887b      	ldrh	r3, [r7, #2]
 8002bc6:	041a      	lsls	r2, r3, #16
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	611a      	str	r2, [r3, #16]
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr
	...

08002bd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e12b      	b.n	8002e42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d106      	bne.n	8002c04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7ff fb7a 	bl	80022f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2224      	movs	r2, #36	; 0x24
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0201 	bic.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c3c:	f001 f832 	bl	8003ca4 <HAL_RCC_GetPCLK1Freq>
 8002c40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	4a81      	ldr	r2, [pc, #516]	; (8002e4c <HAL_I2C_Init+0x274>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d807      	bhi.n	8002c5c <HAL_I2C_Init+0x84>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4a80      	ldr	r2, [pc, #512]	; (8002e50 <HAL_I2C_Init+0x278>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	bf94      	ite	ls
 8002c54:	2301      	movls	r3, #1
 8002c56:	2300      	movhi	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	e006      	b.n	8002c6a <HAL_I2C_Init+0x92>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4a7d      	ldr	r2, [pc, #500]	; (8002e54 <HAL_I2C_Init+0x27c>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	bf94      	ite	ls
 8002c64:	2301      	movls	r3, #1
 8002c66:	2300      	movhi	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e0e7      	b.n	8002e42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4a78      	ldr	r2, [pc, #480]	; (8002e58 <HAL_I2C_Init+0x280>)
 8002c76:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7a:	0c9b      	lsrs	r3, r3, #18
 8002c7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	4a6a      	ldr	r2, [pc, #424]	; (8002e4c <HAL_I2C_Init+0x274>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d802      	bhi.n	8002cac <HAL_I2C_Init+0xd4>
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	e009      	b.n	8002cc0 <HAL_I2C_Init+0xe8>
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cb2:	fb02 f303 	mul.w	r3, r2, r3
 8002cb6:	4a69      	ldr	r2, [pc, #420]	; (8002e5c <HAL_I2C_Init+0x284>)
 8002cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbc:	099b      	lsrs	r3, r3, #6
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	430b      	orrs	r3, r1
 8002cc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	495c      	ldr	r1, [pc, #368]	; (8002e4c <HAL_I2C_Init+0x274>)
 8002cdc:	428b      	cmp	r3, r1
 8002cde:	d819      	bhi.n	8002d14 <HAL_I2C_Init+0x13c>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	1e59      	subs	r1, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cee:	1c59      	adds	r1, r3, #1
 8002cf0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002cf4:	400b      	ands	r3, r1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <HAL_I2C_Init+0x138>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	1e59      	subs	r1, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d08:	3301      	adds	r3, #1
 8002d0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d0e:	e051      	b.n	8002db4 <HAL_I2C_Init+0x1dc>
 8002d10:	2304      	movs	r3, #4
 8002d12:	e04f      	b.n	8002db4 <HAL_I2C_Init+0x1dc>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d111      	bne.n	8002d40 <HAL_I2C_Init+0x168>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	1e58      	subs	r0, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6859      	ldr	r1, [r3, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	440b      	add	r3, r1
 8002d2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d2e:	3301      	adds	r3, #1
 8002d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	bf0c      	ite	eq
 8002d38:	2301      	moveq	r3, #1
 8002d3a:	2300      	movne	r3, #0
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	e012      	b.n	8002d66 <HAL_I2C_Init+0x18e>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	1e58      	subs	r0, r3, #1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6859      	ldr	r1, [r3, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	0099      	lsls	r1, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d56:	3301      	adds	r3, #1
 8002d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	bf0c      	ite	eq
 8002d60:	2301      	moveq	r3, #1
 8002d62:	2300      	movne	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_I2C_Init+0x196>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e022      	b.n	8002db4 <HAL_I2C_Init+0x1dc>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10e      	bne.n	8002d94 <HAL_I2C_Init+0x1bc>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	1e58      	subs	r0, r3, #1
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6859      	ldr	r1, [r3, #4]
 8002d7e:	460b      	mov	r3, r1
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	440b      	add	r3, r1
 8002d84:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d88:	3301      	adds	r3, #1
 8002d8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d92:	e00f      	b.n	8002db4 <HAL_I2C_Init+0x1dc>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	1e58      	subs	r0, r3, #1
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6859      	ldr	r1, [r3, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	0099      	lsls	r1, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002daa:	3301      	adds	r3, #1
 8002dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	6809      	ldr	r1, [r1, #0]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69da      	ldr	r2, [r3, #28]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002de2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6911      	ldr	r1, [r2, #16]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	68d2      	ldr	r2, [r2, #12]
 8002dee:	4311      	orrs	r1, r2
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6812      	ldr	r2, [r2, #0]
 8002df4:	430b      	orrs	r3, r1
 8002df6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695a      	ldr	r2, [r3, #20]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0201 	orr.w	r2, r2, #1
 8002e22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	000186a0 	.word	0x000186a0
 8002e50:	001e847f 	.word	0x001e847f
 8002e54:	003d08ff 	.word	0x003d08ff
 8002e58:	431bde83 	.word	0x431bde83
 8002e5c:	10624dd3 	.word	0x10624dd3

08002e60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af02      	add	r7, sp, #8
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	607a      	str	r2, [r7, #4]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	817b      	strh	r3, [r7, #10]
 8002e70:	4613      	mov	r3, r2
 8002e72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e74:	f7ff fbea 	bl	800264c <HAL_GetTick>
 8002e78:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b20      	cmp	r3, #32
 8002e84:	f040 80e0 	bne.w	8003048 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	2319      	movs	r3, #25
 8002e8e:	2201      	movs	r2, #1
 8002e90:	4970      	ldr	r1, [pc, #448]	; (8003054 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 f964 	bl	8003160 <I2C_WaitOnFlagUntilTimeout>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e0d3      	b.n	800304a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d101      	bne.n	8002eb0 <HAL_I2C_Master_Transmit+0x50>
 8002eac:	2302      	movs	r3, #2
 8002eae:	e0cc      	b.n	800304a <HAL_I2C_Master_Transmit+0x1ea>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d007      	beq.n	8002ed6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f042 0201 	orr.w	r2, r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ee4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2221      	movs	r2, #33	; 0x21
 8002eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2210      	movs	r2, #16
 8002ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	893a      	ldrh	r2, [r7, #8]
 8002f06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	4a50      	ldr	r2, [pc, #320]	; (8003058 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f18:	8979      	ldrh	r1, [r7, #10]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	6a3a      	ldr	r2, [r7, #32]
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 f89c 	bl	800305c <I2C_MasterRequestWrite>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e08d      	b.n	800304a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f2e:	2300      	movs	r3, #0
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	613b      	str	r3, [r7, #16]
 8002f42:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f44:	e066      	b.n	8003014 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	6a39      	ldr	r1, [r7, #32]
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 fa22 	bl	8003394 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00d      	beq.n	8002f72 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d107      	bne.n	8002f6e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e06b      	b.n	800304a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	781a      	ldrb	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d11b      	bne.n	8002fe8 <HAL_I2C_Master_Transmit+0x188>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d017      	beq.n	8002fe8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	781a      	ldrb	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	6a39      	ldr	r1, [r7, #32]
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 fa19 	bl	8003424 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00d      	beq.n	8003014 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	2b04      	cmp	r3, #4
 8002ffe:	d107      	bne.n	8003010 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800300e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e01a      	b.n	800304a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003018:	2b00      	cmp	r3, #0
 800301a:	d194      	bne.n	8002f46 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800302a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2220      	movs	r2, #32
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	e000      	b.n	800304a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003048:	2302      	movs	r3, #2
  }
}
 800304a:	4618      	mov	r0, r3
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	00100002 	.word	0x00100002
 8003058:	ffff0000 	.word	0xffff0000

0800305c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b088      	sub	sp, #32
 8003060:	af02      	add	r7, sp, #8
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	603b      	str	r3, [r7, #0]
 8003068:	460b      	mov	r3, r1
 800306a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003070:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	2b08      	cmp	r3, #8
 8003076:	d006      	beq.n	8003086 <I2C_MasterRequestWrite+0x2a>
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d003      	beq.n	8003086 <I2C_MasterRequestWrite+0x2a>
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003084:	d108      	bne.n	8003098 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	e00b      	b.n	80030b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309c:	2b12      	cmp	r3, #18
 800309e:	d107      	bne.n	80030b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 f84f 	bl	8003160 <I2C_WaitOnFlagUntilTimeout>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00d      	beq.n	80030e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030d6:	d103      	bne.n	80030e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e035      	b.n	8003150 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030ec:	d108      	bne.n	8003100 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030ee:	897b      	ldrh	r3, [r7, #10]
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	461a      	mov	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030fc:	611a      	str	r2, [r3, #16]
 80030fe:	e01b      	b.n	8003138 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003100:	897b      	ldrh	r3, [r7, #10]
 8003102:	11db      	asrs	r3, r3, #7
 8003104:	b2db      	uxtb	r3, r3
 8003106:	f003 0306 	and.w	r3, r3, #6
 800310a:	b2db      	uxtb	r3, r3
 800310c:	f063 030f 	orn	r3, r3, #15
 8003110:	b2da      	uxtb	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	490e      	ldr	r1, [pc, #56]	; (8003158 <I2C_MasterRequestWrite+0xfc>)
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 f898 	bl	8003254 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e010      	b.n	8003150 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800312e:	897b      	ldrh	r3, [r7, #10]
 8003130:	b2da      	uxtb	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	4907      	ldr	r1, [pc, #28]	; (800315c <I2C_MasterRequestWrite+0x100>)
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 f888 	bl	8003254 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	00010008 	.word	0x00010008
 800315c:	00010002 	.word	0x00010002

08003160 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	603b      	str	r3, [r7, #0]
 800316c:	4613      	mov	r3, r2
 800316e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003170:	e048      	b.n	8003204 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003178:	d044      	beq.n	8003204 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317a:	f7ff fa67 	bl	800264c <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	d302      	bcc.n	8003190 <I2C_WaitOnFlagUntilTimeout+0x30>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d139      	bne.n	8003204 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	0c1b      	lsrs	r3, r3, #16
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b01      	cmp	r3, #1
 8003198:	d10d      	bne.n	80031b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	43da      	mvns	r2, r3
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	4013      	ands	r3, r2
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	bf0c      	ite	eq
 80031ac:	2301      	moveq	r3, #1
 80031ae:	2300      	movne	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	461a      	mov	r2, r3
 80031b4:	e00c      	b.n	80031d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	43da      	mvns	r2, r3
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	4013      	ands	r3, r2
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf0c      	ite	eq
 80031c8:	2301      	moveq	r3, #1
 80031ca:	2300      	movne	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	461a      	mov	r2, r3
 80031d0:	79fb      	ldrb	r3, [r7, #7]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d116      	bne.n	8003204 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	f043 0220 	orr.w	r2, r3, #32
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e023      	b.n	800324c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	0c1b      	lsrs	r3, r3, #16
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b01      	cmp	r3, #1
 800320c:	d10d      	bne.n	800322a <I2C_WaitOnFlagUntilTimeout+0xca>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	43da      	mvns	r2, r3
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	4013      	ands	r3, r2
 800321a:	b29b      	uxth	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	bf0c      	ite	eq
 8003220:	2301      	moveq	r3, #1
 8003222:	2300      	movne	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	461a      	mov	r2, r3
 8003228:	e00c      	b.n	8003244 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	43da      	mvns	r2, r3
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	4013      	ands	r3, r2
 8003236:	b29b      	uxth	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	bf0c      	ite	eq
 800323c:	2301      	moveq	r3, #1
 800323e:	2300      	movne	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	461a      	mov	r2, r3
 8003244:	79fb      	ldrb	r3, [r7, #7]
 8003246:	429a      	cmp	r2, r3
 8003248:	d093      	beq.n	8003172 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
 8003260:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003262:	e071      	b.n	8003348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800326e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003272:	d123      	bne.n	80032bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003282:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800328c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2220      	movs	r2, #32
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	f043 0204 	orr.w	r2, r3, #4
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e067      	b.n	800338c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c2:	d041      	beq.n	8003348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c4:	f7ff f9c2 	bl	800264c <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d302      	bcc.n	80032da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d136      	bne.n	8003348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	0c1b      	lsrs	r3, r3, #16
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d10c      	bne.n	80032fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	43da      	mvns	r2, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	4013      	ands	r3, r2
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	bf14      	ite	ne
 80032f6:	2301      	movne	r3, #1
 80032f8:	2300      	moveq	r3, #0
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	e00b      	b.n	8003316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	43da      	mvns	r2, r3
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	4013      	ands	r3, r2
 800330a:	b29b      	uxth	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	bf14      	ite	ne
 8003310:	2301      	movne	r3, #1
 8003312:	2300      	moveq	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d016      	beq.n	8003348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2220      	movs	r2, #32
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003334:	f043 0220 	orr.w	r2, r3, #32
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e021      	b.n	800338c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	0c1b      	lsrs	r3, r3, #16
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b01      	cmp	r3, #1
 8003350:	d10c      	bne.n	800336c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	43da      	mvns	r2, r3
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	4013      	ands	r3, r2
 800335e:	b29b      	uxth	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	bf14      	ite	ne
 8003364:	2301      	movne	r3, #1
 8003366:	2300      	moveq	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	e00b      	b.n	8003384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	43da      	mvns	r2, r3
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	4013      	ands	r3, r2
 8003378:	b29b      	uxth	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	bf14      	ite	ne
 800337e:	2301      	movne	r3, #1
 8003380:	2300      	moveq	r3, #0
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	f47f af6d 	bne.w	8003264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033a0:	e034      	b.n	800340c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 f886 	bl	80034b4 <I2C_IsAcknowledgeFailed>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e034      	b.n	800341c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b8:	d028      	beq.n	800340c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ba:	f7ff f947 	bl	800264c <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d302      	bcc.n	80033d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d11d      	bne.n	800340c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033da:	2b80      	cmp	r3, #128	; 0x80
 80033dc:	d016      	beq.n	800340c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	f043 0220 	orr.w	r2, r3, #32
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e007      	b.n	800341c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003416:	2b80      	cmp	r3, #128	; 0x80
 8003418:	d1c3      	bne.n	80033a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003430:	e034      	b.n	800349c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 f83e 	bl	80034b4 <I2C_IsAcknowledgeFailed>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e034      	b.n	80034ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003448:	d028      	beq.n	800349c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800344a:	f7ff f8ff 	bl	800264c <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	429a      	cmp	r2, r3
 8003458:	d302      	bcc.n	8003460 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d11d      	bne.n	800349c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b04      	cmp	r3, #4
 800346c:	d016      	beq.n	800349c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	f043 0220 	orr.w	r2, r3, #32
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e007      	b.n	80034ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d1c3      	bne.n	8003432 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ca:	d11b      	bne.n	8003504 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f0:	f043 0204 	orr.w	r2, r3, #4
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e000      	b.n	8003506 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr

08003510 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e272      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 8087 	beq.w	800363e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003530:	4b92      	ldr	r3, [pc, #584]	; (800377c <HAL_RCC_OscConfig+0x26c>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 030c 	and.w	r3, r3, #12
 8003538:	2b04      	cmp	r3, #4
 800353a:	d00c      	beq.n	8003556 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800353c:	4b8f      	ldr	r3, [pc, #572]	; (800377c <HAL_RCC_OscConfig+0x26c>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 030c 	and.w	r3, r3, #12
 8003544:	2b08      	cmp	r3, #8
 8003546:	d112      	bne.n	800356e <HAL_RCC_OscConfig+0x5e>
 8003548:	4b8c      	ldr	r3, [pc, #560]	; (800377c <HAL_RCC_OscConfig+0x26c>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003554:	d10b      	bne.n	800356e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003556:	4b89      	ldr	r3, [pc, #548]	; (800377c <HAL_RCC_OscConfig+0x26c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d06c      	beq.n	800363c <HAL_RCC_OscConfig+0x12c>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d168      	bne.n	800363c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e24c      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003576:	d106      	bne.n	8003586 <HAL_RCC_OscConfig+0x76>
 8003578:	4b80      	ldr	r3, [pc, #512]	; (800377c <HAL_RCC_OscConfig+0x26c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a7f      	ldr	r2, [pc, #508]	; (800377c <HAL_RCC_OscConfig+0x26c>)
 800357e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	e02e      	b.n	80035e4 <HAL_RCC_OscConfig+0xd4>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10c      	bne.n	80035a8 <HAL_RCC_OscConfig+0x98>
 800358e:	4b7b      	ldr	r3, [pc, #492]	; (800377c <HAL_RCC_OscConfig+0x26c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a7a      	ldr	r2, [pc, #488]	; (800377c <HAL_RCC_OscConfig+0x26c>)
 8003594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	4b78      	ldr	r3, [pc, #480]	; (800377c <HAL_RCC_OscConfig+0x26c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a77      	ldr	r2, [pc, #476]	; (800377c <HAL_RCC_OscConfig+0x26c>)
 80035a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	e01d      	b.n	80035e4 <HAL_RCC_OscConfig+0xd4>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035b0:	d10c      	bne.n	80035cc <HAL_RCC_OscConfig+0xbc>
 80035b2:	4b72      	ldr	r3, [pc, #456]	; (800377c <HAL_RCC_OscConfig+0x26c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a71      	ldr	r2, [pc, #452]	; (800377c <HAL_RCC_OscConfig+0x26c>)
 80035b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	4b6f      	ldr	r3, [pc, #444]	; (800377c <HAL_RCC_OscConfig+0x26c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a6e      	ldr	r2, [pc, #440]	; (800377c <HAL_RCC_OscConfig+0x26c>)
 80035c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	e00b      	b.n	80035e4 <HAL_RCC_OscConfig+0xd4>
 80035cc:	4b6b      	ldr	r3, [pc, #428]	; (800377c <HAL_RCC_OscConfig+0x26c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a6a      	ldr	r2, [pc, #424]	; (800377c <HAL_RCC_OscConfig+0x26c>)
 80035d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d6:	6013      	str	r3, [r2, #0]
 80035d8:	4b68      	ldr	r3, [pc, #416]	; (800377c <HAL_RCC_OscConfig+0x26c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a67      	ldr	r2, [pc, #412]	; (800377c <HAL_RCC_OscConfig+0x26c>)
 80035de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d013      	beq.n	8003614 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ec:	f7ff f82e 	bl	800264c <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f4:	f7ff f82a 	bl	800264c <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b64      	cmp	r3, #100	; 0x64
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e200      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003606:	4b5d      	ldr	r3, [pc, #372]	; (800377c <HAL_RCC_OscConfig+0x26c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0f0      	beq.n	80035f4 <HAL_RCC_OscConfig+0xe4>
 8003612:	e014      	b.n	800363e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003614:	f7ff f81a 	bl	800264c <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800361c:	f7ff f816 	bl	800264c <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b64      	cmp	r3, #100	; 0x64
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e1ec      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800362e:	4b53      	ldr	r3, [pc, #332]	; (800377c <HAL_RCC_OscConfig+0x26c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f0      	bne.n	800361c <HAL_RCC_OscConfig+0x10c>
 800363a:	e000      	b.n	800363e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800363c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d063      	beq.n	8003712 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800364a:	4b4c      	ldr	r3, [pc, #304]	; (800377c <HAL_RCC_OscConfig+0x26c>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f003 030c 	and.w	r3, r3, #12
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00b      	beq.n	800366e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003656:	4b49      	ldr	r3, [pc, #292]	; (800377c <HAL_RCC_OscConfig+0x26c>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f003 030c 	and.w	r3, r3, #12
 800365e:	2b08      	cmp	r3, #8
 8003660:	d11c      	bne.n	800369c <HAL_RCC_OscConfig+0x18c>
 8003662:	4b46      	ldr	r3, [pc, #280]	; (800377c <HAL_RCC_OscConfig+0x26c>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d116      	bne.n	800369c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800366e:	4b43      	ldr	r3, [pc, #268]	; (800377c <HAL_RCC_OscConfig+0x26c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d005      	beq.n	8003686 <HAL_RCC_OscConfig+0x176>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d001      	beq.n	8003686 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e1c0      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003686:	4b3d      	ldr	r3, [pc, #244]	; (800377c <HAL_RCC_OscConfig+0x26c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	4939      	ldr	r1, [pc, #228]	; (800377c <HAL_RCC_OscConfig+0x26c>)
 8003696:	4313      	orrs	r3, r2
 8003698:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800369a:	e03a      	b.n	8003712 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d020      	beq.n	80036e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036a4:	4b36      	ldr	r3, [pc, #216]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 80036a6:	2201      	movs	r2, #1
 80036a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036aa:	f7fe ffcf 	bl	800264c <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b2:	f7fe ffcb 	bl	800264c <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e1a1      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c4:	4b2d      	ldr	r3, [pc, #180]	; (800377c <HAL_RCC_OscConfig+0x26c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0f0      	beq.n	80036b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d0:	4b2a      	ldr	r3, [pc, #168]	; (800377c <HAL_RCC_OscConfig+0x26c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	4927      	ldr	r1, [pc, #156]	; (800377c <HAL_RCC_OscConfig+0x26c>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	600b      	str	r3, [r1, #0]
 80036e4:	e015      	b.n	8003712 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036e6:	4b26      	ldr	r3, [pc, #152]	; (8003780 <HAL_RCC_OscConfig+0x270>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ec:	f7fe ffae 	bl	800264c <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036f4:	f7fe ffaa 	bl	800264c <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e180      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003706:	4b1d      	ldr	r3, [pc, #116]	; (800377c <HAL_RCC_OscConfig+0x26c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f0      	bne.n	80036f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d03a      	beq.n	8003794 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d019      	beq.n	800375a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003726:	4b17      	ldr	r3, [pc, #92]	; (8003784 <HAL_RCC_OscConfig+0x274>)
 8003728:	2201      	movs	r2, #1
 800372a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800372c:	f7fe ff8e 	bl	800264c <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003734:	f7fe ff8a 	bl	800264c <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e160      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003746:	4b0d      	ldr	r3, [pc, #52]	; (800377c <HAL_RCC_OscConfig+0x26c>)
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003752:	2001      	movs	r0, #1
 8003754:	f000 faba 	bl	8003ccc <RCC_Delay>
 8003758:	e01c      	b.n	8003794 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800375a:	4b0a      	ldr	r3, [pc, #40]	; (8003784 <HAL_RCC_OscConfig+0x274>)
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003760:	f7fe ff74 	bl	800264c <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003766:	e00f      	b.n	8003788 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003768:	f7fe ff70 	bl	800264c <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d908      	bls.n	8003788 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e146      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>
 800377a:	bf00      	nop
 800377c:	40021000 	.word	0x40021000
 8003780:	42420000 	.word	0x42420000
 8003784:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003788:	4b92      	ldr	r3, [pc, #584]	; (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1e9      	bne.n	8003768 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 80a6 	beq.w	80038ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037a2:	2300      	movs	r3, #0
 80037a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037a6:	4b8b      	ldr	r3, [pc, #556]	; (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10d      	bne.n	80037ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037b2:	4b88      	ldr	r3, [pc, #544]	; (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	4a87      	ldr	r2, [pc, #540]	; (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 80037b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037bc:	61d3      	str	r3, [r2, #28]
 80037be:	4b85      	ldr	r3, [pc, #532]	; (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c6:	60bb      	str	r3, [r7, #8]
 80037c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ca:	2301      	movs	r3, #1
 80037cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ce:	4b82      	ldr	r3, [pc, #520]	; (80039d8 <HAL_RCC_OscConfig+0x4c8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d118      	bne.n	800380c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037da:	4b7f      	ldr	r3, [pc, #508]	; (80039d8 <HAL_RCC_OscConfig+0x4c8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a7e      	ldr	r2, [pc, #504]	; (80039d8 <HAL_RCC_OscConfig+0x4c8>)
 80037e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037e6:	f7fe ff31 	bl	800264c <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ee:	f7fe ff2d 	bl	800264c <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b64      	cmp	r3, #100	; 0x64
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e103      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003800:	4b75      	ldr	r3, [pc, #468]	; (80039d8 <HAL_RCC_OscConfig+0x4c8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0f0      	beq.n	80037ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d106      	bne.n	8003822 <HAL_RCC_OscConfig+0x312>
 8003814:	4b6f      	ldr	r3, [pc, #444]	; (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	4a6e      	ldr	r2, [pc, #440]	; (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 800381a:	f043 0301 	orr.w	r3, r3, #1
 800381e:	6213      	str	r3, [r2, #32]
 8003820:	e02d      	b.n	800387e <HAL_RCC_OscConfig+0x36e>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10c      	bne.n	8003844 <HAL_RCC_OscConfig+0x334>
 800382a:	4b6a      	ldr	r3, [pc, #424]	; (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	4a69      	ldr	r2, [pc, #420]	; (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 8003830:	f023 0301 	bic.w	r3, r3, #1
 8003834:	6213      	str	r3, [r2, #32]
 8003836:	4b67      	ldr	r3, [pc, #412]	; (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	4a66      	ldr	r2, [pc, #408]	; (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 800383c:	f023 0304 	bic.w	r3, r3, #4
 8003840:	6213      	str	r3, [r2, #32]
 8003842:	e01c      	b.n	800387e <HAL_RCC_OscConfig+0x36e>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	2b05      	cmp	r3, #5
 800384a:	d10c      	bne.n	8003866 <HAL_RCC_OscConfig+0x356>
 800384c:	4b61      	ldr	r3, [pc, #388]	; (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	4a60      	ldr	r2, [pc, #384]	; (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 8003852:	f043 0304 	orr.w	r3, r3, #4
 8003856:	6213      	str	r3, [r2, #32]
 8003858:	4b5e      	ldr	r3, [pc, #376]	; (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	4a5d      	ldr	r2, [pc, #372]	; (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	6213      	str	r3, [r2, #32]
 8003864:	e00b      	b.n	800387e <HAL_RCC_OscConfig+0x36e>
 8003866:	4b5b      	ldr	r3, [pc, #364]	; (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	4a5a      	ldr	r2, [pc, #360]	; (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 800386c:	f023 0301 	bic.w	r3, r3, #1
 8003870:	6213      	str	r3, [r2, #32]
 8003872:	4b58      	ldr	r3, [pc, #352]	; (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	4a57      	ldr	r2, [pc, #348]	; (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 8003878:	f023 0304 	bic.w	r3, r3, #4
 800387c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d015      	beq.n	80038b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003886:	f7fe fee1 	bl	800264c <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388c:	e00a      	b.n	80038a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388e:	f7fe fedd 	bl	800264c <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	f241 3288 	movw	r2, #5000	; 0x1388
 800389c:	4293      	cmp	r3, r2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e0b1      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a4:	4b4b      	ldr	r3, [pc, #300]	; (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0ee      	beq.n	800388e <HAL_RCC_OscConfig+0x37e>
 80038b0:	e014      	b.n	80038dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b2:	f7fe fecb 	bl	800264c <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038b8:	e00a      	b.n	80038d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ba:	f7fe fec7 	bl	800264c <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e09b      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d0:	4b40      	ldr	r3, [pc, #256]	; (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1ee      	bne.n	80038ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038dc:	7dfb      	ldrb	r3, [r7, #23]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d105      	bne.n	80038ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e2:	4b3c      	ldr	r3, [pc, #240]	; (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	4a3b      	ldr	r2, [pc, #236]	; (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 80038e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f000 8087 	beq.w	8003a06 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038f8:	4b36      	ldr	r3, [pc, #216]	; (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f003 030c 	and.w	r3, r3, #12
 8003900:	2b08      	cmp	r3, #8
 8003902:	d061      	beq.n	80039c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	2b02      	cmp	r3, #2
 800390a:	d146      	bne.n	800399a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800390c:	4b33      	ldr	r3, [pc, #204]	; (80039dc <HAL_RCC_OscConfig+0x4cc>)
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003912:	f7fe fe9b 	bl	800264c <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800391a:	f7fe fe97 	bl	800264c <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e06d      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800392c:	4b29      	ldr	r3, [pc, #164]	; (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1f0      	bne.n	800391a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003940:	d108      	bne.n	8003954 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003942:	4b24      	ldr	r3, [pc, #144]	; (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	4921      	ldr	r1, [pc, #132]	; (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 8003950:	4313      	orrs	r3, r2
 8003952:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003954:	4b1f      	ldr	r3, [pc, #124]	; (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a19      	ldr	r1, [r3, #32]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	430b      	orrs	r3, r1
 8003966:	491b      	ldr	r1, [pc, #108]	; (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 8003968:	4313      	orrs	r3, r2
 800396a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800396c:	4b1b      	ldr	r3, [pc, #108]	; (80039dc <HAL_RCC_OscConfig+0x4cc>)
 800396e:	2201      	movs	r2, #1
 8003970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003972:	f7fe fe6b 	bl	800264c <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800397a:	f7fe fe67 	bl	800264c <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e03d      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800398c:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0f0      	beq.n	800397a <HAL_RCC_OscConfig+0x46a>
 8003998:	e035      	b.n	8003a06 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800399a:	4b10      	ldr	r3, [pc, #64]	; (80039dc <HAL_RCC_OscConfig+0x4cc>)
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a0:	f7fe fe54 	bl	800264c <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a8:	f7fe fe50 	bl	800264c <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e026      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ba:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <HAL_RCC_OscConfig+0x4c4>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f0      	bne.n	80039a8 <HAL_RCC_OscConfig+0x498>
 80039c6:	e01e      	b.n	8003a06 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d107      	bne.n	80039e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e019      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>
 80039d4:	40021000 	.word	0x40021000
 80039d8:	40007000 	.word	0x40007000
 80039dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039e0:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <HAL_RCC_OscConfig+0x500>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d106      	bne.n	8003a02 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d001      	beq.n	8003a06 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e000      	b.n	8003a08 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40021000 	.word	0x40021000

08003a14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e0d0      	b.n	8003bca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a28:	4b6a      	ldr	r3, [pc, #424]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d910      	bls.n	8003a58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a36:	4b67      	ldr	r3, [pc, #412]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f023 0207 	bic.w	r2, r3, #7
 8003a3e:	4965      	ldr	r1, [pc, #404]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a46:	4b63      	ldr	r3, [pc, #396]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d001      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e0b8      	b.n	8003bca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d020      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a70:	4b59      	ldr	r3, [pc, #356]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	4a58      	ldr	r2, [pc, #352]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a88:	4b53      	ldr	r3, [pc, #332]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	4a52      	ldr	r2, [pc, #328]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a94:	4b50      	ldr	r3, [pc, #320]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	494d      	ldr	r1, [pc, #308]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d040      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d107      	bne.n	8003aca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aba:	4b47      	ldr	r3, [pc, #284]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d115      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e07f      	b.n	8003bca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d107      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad2:	4b41      	ldr	r3, [pc, #260]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d109      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e073      	b.n	8003bca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae2:	4b3d      	ldr	r3, [pc, #244]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e06b      	b.n	8003bca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003af2:	4b39      	ldr	r3, [pc, #228]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f023 0203 	bic.w	r2, r3, #3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	4936      	ldr	r1, [pc, #216]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b04:	f7fe fda2 	bl	800264c <HAL_GetTick>
 8003b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0a:	e00a      	b.n	8003b22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b0c:	f7fe fd9e 	bl	800264c <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e053      	b.n	8003bca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b22:	4b2d      	ldr	r3, [pc, #180]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f003 020c 	and.w	r2, r3, #12
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d1eb      	bne.n	8003b0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b34:	4b27      	ldr	r3, [pc, #156]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d210      	bcs.n	8003b64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b42:	4b24      	ldr	r3, [pc, #144]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f023 0207 	bic.w	r2, r3, #7
 8003b4a:	4922      	ldr	r1, [pc, #136]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b52:	4b20      	ldr	r3, [pc, #128]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d001      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e032      	b.n	8003bca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d008      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b70:	4b19      	ldr	r3, [pc, #100]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	4916      	ldr	r1, [pc, #88]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d009      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b8e:	4b12      	ldr	r3, [pc, #72]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	490e      	ldr	r1, [pc, #56]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ba2:	f000 f821 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	091b      	lsrs	r3, r3, #4
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	490a      	ldr	r1, [pc, #40]	; (8003bdc <HAL_RCC_ClockConfig+0x1c8>)
 8003bb4:	5ccb      	ldrb	r3, [r1, r3]
 8003bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bba:	4a09      	ldr	r2, [pc, #36]	; (8003be0 <HAL_RCC_ClockConfig+0x1cc>)
 8003bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bbe:	4b09      	ldr	r3, [pc, #36]	; (8003be4 <HAL_RCC_ClockConfig+0x1d0>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe fd00 	bl	80025c8 <HAL_InitTick>

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40022000 	.word	0x40022000
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	08008528 	.word	0x08008528
 8003be0:	20000024 	.word	0x20000024
 8003be4:	20000028 	.word	0x20000028

08003be8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60fb      	str	r3, [r7, #12]
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60bb      	str	r3, [r7, #8]
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	617b      	str	r3, [r7, #20]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c02:	4b1e      	ldr	r3, [pc, #120]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x94>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	d002      	beq.n	8003c18 <HAL_RCC_GetSysClockFreq+0x30>
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d003      	beq.n	8003c1e <HAL_RCC_GetSysClockFreq+0x36>
 8003c16:	e027      	b.n	8003c68 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c18:	4b19      	ldr	r3, [pc, #100]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c1a:	613b      	str	r3, [r7, #16]
      break;
 8003c1c:	e027      	b.n	8003c6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	0c9b      	lsrs	r3, r3, #18
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	4a17      	ldr	r2, [pc, #92]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c28:	5cd3      	ldrb	r3, [r2, r3]
 8003c2a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d010      	beq.n	8003c58 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c36:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x94>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	0c5b      	lsrs	r3, r3, #17
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	4a11      	ldr	r2, [pc, #68]	; (8003c88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c42:	5cd3      	ldrb	r3, [r2, r3]
 8003c44:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a0d      	ldr	r2, [pc, #52]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c4a:	fb03 f202 	mul.w	r2, r3, r2
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c54:	617b      	str	r3, [r7, #20]
 8003c56:	e004      	b.n	8003c62 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a0c      	ldr	r2, [pc, #48]	; (8003c8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c5c:	fb02 f303 	mul.w	r3, r2, r3
 8003c60:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	613b      	str	r3, [r7, #16]
      break;
 8003c66:	e002      	b.n	8003c6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c68:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c6a:	613b      	str	r3, [r7, #16]
      break;
 8003c6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c6e:	693b      	ldr	r3, [r7, #16]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	371c      	adds	r7, #28
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bc80      	pop	{r7}
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	007a1200 	.word	0x007a1200
 8003c84:	08008540 	.word	0x08008540
 8003c88:	08008550 	.word	0x08008550
 8003c8c:	003d0900 	.word	0x003d0900

08003c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c94:	4b02      	ldr	r3, [pc, #8]	; (8003ca0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c96:	681b      	ldr	r3, [r3, #0]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr
 8003ca0:	20000024 	.word	0x20000024

08003ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ca8:	f7ff fff2 	bl	8003c90 <HAL_RCC_GetHCLKFreq>
 8003cac:	4602      	mov	r2, r0
 8003cae:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	0a1b      	lsrs	r3, r3, #8
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	4903      	ldr	r1, [pc, #12]	; (8003cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cba:	5ccb      	ldrb	r3, [r1, r3]
 8003cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	08008538 	.word	0x08008538

08003ccc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003cd4:	4b0a      	ldr	r3, [pc, #40]	; (8003d00 <RCC_Delay+0x34>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a0a      	ldr	r2, [pc, #40]	; (8003d04 <RCC_Delay+0x38>)
 8003cda:	fba2 2303 	umull	r2, r3, r2, r3
 8003cde:	0a5b      	lsrs	r3, r3, #9
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	fb02 f303 	mul.w	r3, r2, r3
 8003ce6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ce8:	bf00      	nop
  }
  while (Delay --);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	1e5a      	subs	r2, r3, #1
 8003cee:	60fa      	str	r2, [r7, #12]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1f9      	bne.n	8003ce8 <RCC_Delay+0x1c>
}
 8003cf4:	bf00      	nop
 8003cf6:	bf00      	nop
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr
 8003d00:	20000024 	.word	0x20000024
 8003d04:	10624dd3 	.word	0x10624dd3

08003d08 <__cvt>:
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d0e:	461f      	mov	r7, r3
 8003d10:	bfbb      	ittet	lt
 8003d12:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003d16:	461f      	movlt	r7, r3
 8003d18:	2300      	movge	r3, #0
 8003d1a:	232d      	movlt	r3, #45	; 0x2d
 8003d1c:	b088      	sub	sp, #32
 8003d1e:	4614      	mov	r4, r2
 8003d20:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003d22:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003d24:	7013      	strb	r3, [r2, #0]
 8003d26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003d28:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003d2c:	f023 0820 	bic.w	r8, r3, #32
 8003d30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003d34:	d005      	beq.n	8003d42 <__cvt+0x3a>
 8003d36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003d3a:	d100      	bne.n	8003d3e <__cvt+0x36>
 8003d3c:	3501      	adds	r5, #1
 8003d3e:	2302      	movs	r3, #2
 8003d40:	e000      	b.n	8003d44 <__cvt+0x3c>
 8003d42:	2303      	movs	r3, #3
 8003d44:	aa07      	add	r2, sp, #28
 8003d46:	9204      	str	r2, [sp, #16]
 8003d48:	aa06      	add	r2, sp, #24
 8003d4a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003d4e:	e9cd 3500 	strd	r3, r5, [sp]
 8003d52:	4622      	mov	r2, r4
 8003d54:	463b      	mov	r3, r7
 8003d56:	f001 f887 	bl	8004e68 <_dtoa_r>
 8003d5a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003d5e:	4606      	mov	r6, r0
 8003d60:	d102      	bne.n	8003d68 <__cvt+0x60>
 8003d62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003d64:	07db      	lsls	r3, r3, #31
 8003d66:	d522      	bpl.n	8003dae <__cvt+0xa6>
 8003d68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003d6c:	eb06 0905 	add.w	r9, r6, r5
 8003d70:	d110      	bne.n	8003d94 <__cvt+0x8c>
 8003d72:	7833      	ldrb	r3, [r6, #0]
 8003d74:	2b30      	cmp	r3, #48	; 0x30
 8003d76:	d10a      	bne.n	8003d8e <__cvt+0x86>
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	4620      	mov	r0, r4
 8003d7e:	4639      	mov	r1, r7
 8003d80:	f7fc fe12 	bl	80009a8 <__aeabi_dcmpeq>
 8003d84:	b918      	cbnz	r0, 8003d8e <__cvt+0x86>
 8003d86:	f1c5 0501 	rsb	r5, r5, #1
 8003d8a:	f8ca 5000 	str.w	r5, [sl]
 8003d8e:	f8da 3000 	ldr.w	r3, [sl]
 8003d92:	4499      	add	r9, r3
 8003d94:	2200      	movs	r2, #0
 8003d96:	2300      	movs	r3, #0
 8003d98:	4620      	mov	r0, r4
 8003d9a:	4639      	mov	r1, r7
 8003d9c:	f7fc fe04 	bl	80009a8 <__aeabi_dcmpeq>
 8003da0:	b108      	cbz	r0, 8003da6 <__cvt+0x9e>
 8003da2:	f8cd 901c 	str.w	r9, [sp, #28]
 8003da6:	2230      	movs	r2, #48	; 0x30
 8003da8:	9b07      	ldr	r3, [sp, #28]
 8003daa:	454b      	cmp	r3, r9
 8003dac:	d307      	bcc.n	8003dbe <__cvt+0xb6>
 8003dae:	4630      	mov	r0, r6
 8003db0:	9b07      	ldr	r3, [sp, #28]
 8003db2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003db4:	1b9b      	subs	r3, r3, r6
 8003db6:	6013      	str	r3, [r2, #0]
 8003db8:	b008      	add	sp, #32
 8003dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dbe:	1c59      	adds	r1, r3, #1
 8003dc0:	9107      	str	r1, [sp, #28]
 8003dc2:	701a      	strb	r2, [r3, #0]
 8003dc4:	e7f0      	b.n	8003da8 <__cvt+0xa0>

08003dc6 <__exponent>:
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dca:	2900      	cmp	r1, #0
 8003dcc:	f803 2b02 	strb.w	r2, [r3], #2
 8003dd0:	bfb6      	itet	lt
 8003dd2:	222d      	movlt	r2, #45	; 0x2d
 8003dd4:	222b      	movge	r2, #43	; 0x2b
 8003dd6:	4249      	neglt	r1, r1
 8003dd8:	2909      	cmp	r1, #9
 8003dda:	7042      	strb	r2, [r0, #1]
 8003ddc:	dd2a      	ble.n	8003e34 <__exponent+0x6e>
 8003dde:	f10d 0207 	add.w	r2, sp, #7
 8003de2:	4617      	mov	r7, r2
 8003de4:	260a      	movs	r6, #10
 8003de6:	fb91 f5f6 	sdiv	r5, r1, r6
 8003dea:	4694      	mov	ip, r2
 8003dec:	fb06 1415 	mls	r4, r6, r5, r1
 8003df0:	3430      	adds	r4, #48	; 0x30
 8003df2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003df6:	460c      	mov	r4, r1
 8003df8:	2c63      	cmp	r4, #99	; 0x63
 8003dfa:	4629      	mov	r1, r5
 8003dfc:	f102 32ff 	add.w	r2, r2, #4294967295
 8003e00:	dcf1      	bgt.n	8003de6 <__exponent+0x20>
 8003e02:	3130      	adds	r1, #48	; 0x30
 8003e04:	f1ac 0402 	sub.w	r4, ip, #2
 8003e08:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003e0c:	4622      	mov	r2, r4
 8003e0e:	1c41      	adds	r1, r0, #1
 8003e10:	42ba      	cmp	r2, r7
 8003e12:	d30a      	bcc.n	8003e2a <__exponent+0x64>
 8003e14:	f10d 0209 	add.w	r2, sp, #9
 8003e18:	eba2 020c 	sub.w	r2, r2, ip
 8003e1c:	42bc      	cmp	r4, r7
 8003e1e:	bf88      	it	hi
 8003e20:	2200      	movhi	r2, #0
 8003e22:	4413      	add	r3, r2
 8003e24:	1a18      	subs	r0, r3, r0
 8003e26:	b003      	add	sp, #12
 8003e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e2a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003e2e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003e32:	e7ed      	b.n	8003e10 <__exponent+0x4a>
 8003e34:	2330      	movs	r3, #48	; 0x30
 8003e36:	3130      	adds	r1, #48	; 0x30
 8003e38:	7083      	strb	r3, [r0, #2]
 8003e3a:	70c1      	strb	r1, [r0, #3]
 8003e3c:	1d03      	adds	r3, r0, #4
 8003e3e:	e7f1      	b.n	8003e24 <__exponent+0x5e>

08003e40 <_printf_float>:
 8003e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e44:	b091      	sub	sp, #68	; 0x44
 8003e46:	460c      	mov	r4, r1
 8003e48:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003e4c:	4616      	mov	r6, r2
 8003e4e:	461f      	mov	r7, r3
 8003e50:	4605      	mov	r5, r0
 8003e52:	f000 fef3 	bl	8004c3c <_localeconv_r>
 8003e56:	6803      	ldr	r3, [r0, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	9309      	str	r3, [sp, #36]	; 0x24
 8003e5c:	f7fc f978 	bl	8000150 <strlen>
 8003e60:	2300      	movs	r3, #0
 8003e62:	930e      	str	r3, [sp, #56]	; 0x38
 8003e64:	f8d8 3000 	ldr.w	r3, [r8]
 8003e68:	900a      	str	r0, [sp, #40]	; 0x28
 8003e6a:	3307      	adds	r3, #7
 8003e6c:	f023 0307 	bic.w	r3, r3, #7
 8003e70:	f103 0208 	add.w	r2, r3, #8
 8003e74:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003e78:	f8d4 b000 	ldr.w	fp, [r4]
 8003e7c:	f8c8 2000 	str.w	r2, [r8]
 8003e80:	e9d3 a800 	ldrd	sl, r8, [r3]
 8003e84:	4652      	mov	r2, sl
 8003e86:	4643      	mov	r3, r8
 8003e88:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003e8c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8003e90:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e92:	f04f 32ff 	mov.w	r2, #4294967295
 8003e96:	4650      	mov	r0, sl
 8003e98:	4b9c      	ldr	r3, [pc, #624]	; (800410c <_printf_float+0x2cc>)
 8003e9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003e9c:	f7fc fdb6 	bl	8000a0c <__aeabi_dcmpun>
 8003ea0:	bb70      	cbnz	r0, 8003f00 <_printf_float+0xc0>
 8003ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea6:	4650      	mov	r0, sl
 8003ea8:	4b98      	ldr	r3, [pc, #608]	; (800410c <_printf_float+0x2cc>)
 8003eaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003eac:	f7fc fd90 	bl	80009d0 <__aeabi_dcmple>
 8003eb0:	bb30      	cbnz	r0, 8003f00 <_printf_float+0xc0>
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	4650      	mov	r0, sl
 8003eb8:	4641      	mov	r1, r8
 8003eba:	f7fc fd7f 	bl	80009bc <__aeabi_dcmplt>
 8003ebe:	b110      	cbz	r0, 8003ec6 <_printf_float+0x86>
 8003ec0:	232d      	movs	r3, #45	; 0x2d
 8003ec2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ec6:	4a92      	ldr	r2, [pc, #584]	; (8004110 <_printf_float+0x2d0>)
 8003ec8:	4b92      	ldr	r3, [pc, #584]	; (8004114 <_printf_float+0x2d4>)
 8003eca:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003ece:	bf94      	ite	ls
 8003ed0:	4690      	movls	r8, r2
 8003ed2:	4698      	movhi	r8, r3
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	f04f 0a00 	mov.w	sl, #0
 8003eda:	6123      	str	r3, [r4, #16]
 8003edc:	f02b 0304 	bic.w	r3, fp, #4
 8003ee0:	6023      	str	r3, [r4, #0]
 8003ee2:	4633      	mov	r3, r6
 8003ee4:	4621      	mov	r1, r4
 8003ee6:	4628      	mov	r0, r5
 8003ee8:	9700      	str	r7, [sp, #0]
 8003eea:	aa0f      	add	r2, sp, #60	; 0x3c
 8003eec:	f000 f9d6 	bl	800429c <_printf_common>
 8003ef0:	3001      	adds	r0, #1
 8003ef2:	f040 8090 	bne.w	8004016 <_printf_float+0x1d6>
 8003ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8003efa:	b011      	add	sp, #68	; 0x44
 8003efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f00:	4652      	mov	r2, sl
 8003f02:	4643      	mov	r3, r8
 8003f04:	4650      	mov	r0, sl
 8003f06:	4641      	mov	r1, r8
 8003f08:	f7fc fd80 	bl	8000a0c <__aeabi_dcmpun>
 8003f0c:	b148      	cbz	r0, 8003f22 <_printf_float+0xe2>
 8003f0e:	f1b8 0f00 	cmp.w	r8, #0
 8003f12:	bfb8      	it	lt
 8003f14:	232d      	movlt	r3, #45	; 0x2d
 8003f16:	4a80      	ldr	r2, [pc, #512]	; (8004118 <_printf_float+0x2d8>)
 8003f18:	bfb8      	it	lt
 8003f1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003f1e:	4b7f      	ldr	r3, [pc, #508]	; (800411c <_printf_float+0x2dc>)
 8003f20:	e7d3      	b.n	8003eca <_printf_float+0x8a>
 8003f22:	6863      	ldr	r3, [r4, #4]
 8003f24:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	d142      	bne.n	8003fb2 <_printf_float+0x172>
 8003f2c:	2306      	movs	r3, #6
 8003f2e:	6063      	str	r3, [r4, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	9206      	str	r2, [sp, #24]
 8003f34:	aa0e      	add	r2, sp, #56	; 0x38
 8003f36:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003f3a:	aa0d      	add	r2, sp, #52	; 0x34
 8003f3c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003f40:	9203      	str	r2, [sp, #12]
 8003f42:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003f46:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003f4a:	6023      	str	r3, [r4, #0]
 8003f4c:	6863      	ldr	r3, [r4, #4]
 8003f4e:	4652      	mov	r2, sl
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	4628      	mov	r0, r5
 8003f54:	4643      	mov	r3, r8
 8003f56:	910b      	str	r1, [sp, #44]	; 0x2c
 8003f58:	f7ff fed6 	bl	8003d08 <__cvt>
 8003f5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f5e:	4680      	mov	r8, r0
 8003f60:	2947      	cmp	r1, #71	; 0x47
 8003f62:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003f64:	d108      	bne.n	8003f78 <_printf_float+0x138>
 8003f66:	1cc8      	adds	r0, r1, #3
 8003f68:	db02      	blt.n	8003f70 <_printf_float+0x130>
 8003f6a:	6863      	ldr	r3, [r4, #4]
 8003f6c:	4299      	cmp	r1, r3
 8003f6e:	dd40      	ble.n	8003ff2 <_printf_float+0x1b2>
 8003f70:	f1a9 0902 	sub.w	r9, r9, #2
 8003f74:	fa5f f989 	uxtb.w	r9, r9
 8003f78:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003f7c:	d81f      	bhi.n	8003fbe <_printf_float+0x17e>
 8003f7e:	464a      	mov	r2, r9
 8003f80:	3901      	subs	r1, #1
 8003f82:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003f86:	910d      	str	r1, [sp, #52]	; 0x34
 8003f88:	f7ff ff1d 	bl	8003dc6 <__exponent>
 8003f8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f8e:	4682      	mov	sl, r0
 8003f90:	1813      	adds	r3, r2, r0
 8003f92:	2a01      	cmp	r2, #1
 8003f94:	6123      	str	r3, [r4, #16]
 8003f96:	dc02      	bgt.n	8003f9e <_printf_float+0x15e>
 8003f98:	6822      	ldr	r2, [r4, #0]
 8003f9a:	07d2      	lsls	r2, r2, #31
 8003f9c:	d501      	bpl.n	8003fa2 <_printf_float+0x162>
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	6123      	str	r3, [r4, #16]
 8003fa2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d09b      	beq.n	8003ee2 <_printf_float+0xa2>
 8003faa:	232d      	movs	r3, #45	; 0x2d
 8003fac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fb0:	e797      	b.n	8003ee2 <_printf_float+0xa2>
 8003fb2:	2947      	cmp	r1, #71	; 0x47
 8003fb4:	d1bc      	bne.n	8003f30 <_printf_float+0xf0>
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1ba      	bne.n	8003f30 <_printf_float+0xf0>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e7b7      	b.n	8003f2e <_printf_float+0xee>
 8003fbe:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003fc2:	d118      	bne.n	8003ff6 <_printf_float+0x1b6>
 8003fc4:	2900      	cmp	r1, #0
 8003fc6:	6863      	ldr	r3, [r4, #4]
 8003fc8:	dd0b      	ble.n	8003fe2 <_printf_float+0x1a2>
 8003fca:	6121      	str	r1, [r4, #16]
 8003fcc:	b913      	cbnz	r3, 8003fd4 <_printf_float+0x194>
 8003fce:	6822      	ldr	r2, [r4, #0]
 8003fd0:	07d0      	lsls	r0, r2, #31
 8003fd2:	d502      	bpl.n	8003fda <_printf_float+0x19a>
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	440b      	add	r3, r1
 8003fd8:	6123      	str	r3, [r4, #16]
 8003fda:	f04f 0a00 	mov.w	sl, #0
 8003fde:	65a1      	str	r1, [r4, #88]	; 0x58
 8003fe0:	e7df      	b.n	8003fa2 <_printf_float+0x162>
 8003fe2:	b913      	cbnz	r3, 8003fea <_printf_float+0x1aa>
 8003fe4:	6822      	ldr	r2, [r4, #0]
 8003fe6:	07d2      	lsls	r2, r2, #31
 8003fe8:	d501      	bpl.n	8003fee <_printf_float+0x1ae>
 8003fea:	3302      	adds	r3, #2
 8003fec:	e7f4      	b.n	8003fd8 <_printf_float+0x198>
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e7f2      	b.n	8003fd8 <_printf_float+0x198>
 8003ff2:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003ff6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ff8:	4299      	cmp	r1, r3
 8003ffa:	db05      	blt.n	8004008 <_printf_float+0x1c8>
 8003ffc:	6823      	ldr	r3, [r4, #0]
 8003ffe:	6121      	str	r1, [r4, #16]
 8004000:	07d8      	lsls	r0, r3, #31
 8004002:	d5ea      	bpl.n	8003fda <_printf_float+0x19a>
 8004004:	1c4b      	adds	r3, r1, #1
 8004006:	e7e7      	b.n	8003fd8 <_printf_float+0x198>
 8004008:	2900      	cmp	r1, #0
 800400a:	bfcc      	ite	gt
 800400c:	2201      	movgt	r2, #1
 800400e:	f1c1 0202 	rsble	r2, r1, #2
 8004012:	4413      	add	r3, r2
 8004014:	e7e0      	b.n	8003fd8 <_printf_float+0x198>
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	055a      	lsls	r2, r3, #21
 800401a:	d407      	bmi.n	800402c <_printf_float+0x1ec>
 800401c:	6923      	ldr	r3, [r4, #16]
 800401e:	4642      	mov	r2, r8
 8004020:	4631      	mov	r1, r6
 8004022:	4628      	mov	r0, r5
 8004024:	47b8      	blx	r7
 8004026:	3001      	adds	r0, #1
 8004028:	d12b      	bne.n	8004082 <_printf_float+0x242>
 800402a:	e764      	b.n	8003ef6 <_printf_float+0xb6>
 800402c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004030:	f240 80dd 	bls.w	80041ee <_printf_float+0x3ae>
 8004034:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004038:	2200      	movs	r2, #0
 800403a:	2300      	movs	r3, #0
 800403c:	f7fc fcb4 	bl	80009a8 <__aeabi_dcmpeq>
 8004040:	2800      	cmp	r0, #0
 8004042:	d033      	beq.n	80040ac <_printf_float+0x26c>
 8004044:	2301      	movs	r3, #1
 8004046:	4631      	mov	r1, r6
 8004048:	4628      	mov	r0, r5
 800404a:	4a35      	ldr	r2, [pc, #212]	; (8004120 <_printf_float+0x2e0>)
 800404c:	47b8      	blx	r7
 800404e:	3001      	adds	r0, #1
 8004050:	f43f af51 	beq.w	8003ef6 <_printf_float+0xb6>
 8004054:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004058:	429a      	cmp	r2, r3
 800405a:	db02      	blt.n	8004062 <_printf_float+0x222>
 800405c:	6823      	ldr	r3, [r4, #0]
 800405e:	07d8      	lsls	r0, r3, #31
 8004060:	d50f      	bpl.n	8004082 <_printf_float+0x242>
 8004062:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004066:	4631      	mov	r1, r6
 8004068:	4628      	mov	r0, r5
 800406a:	47b8      	blx	r7
 800406c:	3001      	adds	r0, #1
 800406e:	f43f af42 	beq.w	8003ef6 <_printf_float+0xb6>
 8004072:	f04f 0800 	mov.w	r8, #0
 8004076:	f104 091a 	add.w	r9, r4, #26
 800407a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800407c:	3b01      	subs	r3, #1
 800407e:	4543      	cmp	r3, r8
 8004080:	dc09      	bgt.n	8004096 <_printf_float+0x256>
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	079b      	lsls	r3, r3, #30
 8004086:	f100 8104 	bmi.w	8004292 <_printf_float+0x452>
 800408a:	68e0      	ldr	r0, [r4, #12]
 800408c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800408e:	4298      	cmp	r0, r3
 8004090:	bfb8      	it	lt
 8004092:	4618      	movlt	r0, r3
 8004094:	e731      	b.n	8003efa <_printf_float+0xba>
 8004096:	2301      	movs	r3, #1
 8004098:	464a      	mov	r2, r9
 800409a:	4631      	mov	r1, r6
 800409c:	4628      	mov	r0, r5
 800409e:	47b8      	blx	r7
 80040a0:	3001      	adds	r0, #1
 80040a2:	f43f af28 	beq.w	8003ef6 <_printf_float+0xb6>
 80040a6:	f108 0801 	add.w	r8, r8, #1
 80040aa:	e7e6      	b.n	800407a <_printf_float+0x23a>
 80040ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	dc38      	bgt.n	8004124 <_printf_float+0x2e4>
 80040b2:	2301      	movs	r3, #1
 80040b4:	4631      	mov	r1, r6
 80040b6:	4628      	mov	r0, r5
 80040b8:	4a19      	ldr	r2, [pc, #100]	; (8004120 <_printf_float+0x2e0>)
 80040ba:	47b8      	blx	r7
 80040bc:	3001      	adds	r0, #1
 80040be:	f43f af1a 	beq.w	8003ef6 <_printf_float+0xb6>
 80040c2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80040c6:	4313      	orrs	r3, r2
 80040c8:	d102      	bne.n	80040d0 <_printf_float+0x290>
 80040ca:	6823      	ldr	r3, [r4, #0]
 80040cc:	07d9      	lsls	r1, r3, #31
 80040ce:	d5d8      	bpl.n	8004082 <_printf_float+0x242>
 80040d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040d4:	4631      	mov	r1, r6
 80040d6:	4628      	mov	r0, r5
 80040d8:	47b8      	blx	r7
 80040da:	3001      	adds	r0, #1
 80040dc:	f43f af0b 	beq.w	8003ef6 <_printf_float+0xb6>
 80040e0:	f04f 0900 	mov.w	r9, #0
 80040e4:	f104 0a1a 	add.w	sl, r4, #26
 80040e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040ea:	425b      	negs	r3, r3
 80040ec:	454b      	cmp	r3, r9
 80040ee:	dc01      	bgt.n	80040f4 <_printf_float+0x2b4>
 80040f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040f2:	e794      	b.n	800401e <_printf_float+0x1de>
 80040f4:	2301      	movs	r3, #1
 80040f6:	4652      	mov	r2, sl
 80040f8:	4631      	mov	r1, r6
 80040fa:	4628      	mov	r0, r5
 80040fc:	47b8      	blx	r7
 80040fe:	3001      	adds	r0, #1
 8004100:	f43f aef9 	beq.w	8003ef6 <_printf_float+0xb6>
 8004104:	f109 0901 	add.w	r9, r9, #1
 8004108:	e7ee      	b.n	80040e8 <_printf_float+0x2a8>
 800410a:	bf00      	nop
 800410c:	7fefffff 	.word	0x7fefffff
 8004110:	08008552 	.word	0x08008552
 8004114:	08008556 	.word	0x08008556
 8004118:	0800855a 	.word	0x0800855a
 800411c:	0800855e 	.word	0x0800855e
 8004120:	08008562 	.word	0x08008562
 8004124:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004126:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004128:	429a      	cmp	r2, r3
 800412a:	bfa8      	it	ge
 800412c:	461a      	movge	r2, r3
 800412e:	2a00      	cmp	r2, #0
 8004130:	4691      	mov	r9, r2
 8004132:	dc37      	bgt.n	80041a4 <_printf_float+0x364>
 8004134:	f04f 0b00 	mov.w	fp, #0
 8004138:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800413c:	f104 021a 	add.w	r2, r4, #26
 8004140:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004144:	ebaa 0309 	sub.w	r3, sl, r9
 8004148:	455b      	cmp	r3, fp
 800414a:	dc33      	bgt.n	80041b4 <_printf_float+0x374>
 800414c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004150:	429a      	cmp	r2, r3
 8004152:	db3b      	blt.n	80041cc <_printf_float+0x38c>
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	07da      	lsls	r2, r3, #31
 8004158:	d438      	bmi.n	80041cc <_printf_float+0x38c>
 800415a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800415e:	eba2 0903 	sub.w	r9, r2, r3
 8004162:	eba2 020a 	sub.w	r2, r2, sl
 8004166:	4591      	cmp	r9, r2
 8004168:	bfa8      	it	ge
 800416a:	4691      	movge	r9, r2
 800416c:	f1b9 0f00 	cmp.w	r9, #0
 8004170:	dc34      	bgt.n	80041dc <_printf_float+0x39c>
 8004172:	f04f 0800 	mov.w	r8, #0
 8004176:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800417a:	f104 0a1a 	add.w	sl, r4, #26
 800417e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004182:	1a9b      	subs	r3, r3, r2
 8004184:	eba3 0309 	sub.w	r3, r3, r9
 8004188:	4543      	cmp	r3, r8
 800418a:	f77f af7a 	ble.w	8004082 <_printf_float+0x242>
 800418e:	2301      	movs	r3, #1
 8004190:	4652      	mov	r2, sl
 8004192:	4631      	mov	r1, r6
 8004194:	4628      	mov	r0, r5
 8004196:	47b8      	blx	r7
 8004198:	3001      	adds	r0, #1
 800419a:	f43f aeac 	beq.w	8003ef6 <_printf_float+0xb6>
 800419e:	f108 0801 	add.w	r8, r8, #1
 80041a2:	e7ec      	b.n	800417e <_printf_float+0x33e>
 80041a4:	4613      	mov	r3, r2
 80041a6:	4631      	mov	r1, r6
 80041a8:	4642      	mov	r2, r8
 80041aa:	4628      	mov	r0, r5
 80041ac:	47b8      	blx	r7
 80041ae:	3001      	adds	r0, #1
 80041b0:	d1c0      	bne.n	8004134 <_printf_float+0x2f4>
 80041b2:	e6a0      	b.n	8003ef6 <_printf_float+0xb6>
 80041b4:	2301      	movs	r3, #1
 80041b6:	4631      	mov	r1, r6
 80041b8:	4628      	mov	r0, r5
 80041ba:	920b      	str	r2, [sp, #44]	; 0x2c
 80041bc:	47b8      	blx	r7
 80041be:	3001      	adds	r0, #1
 80041c0:	f43f ae99 	beq.w	8003ef6 <_printf_float+0xb6>
 80041c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80041c6:	f10b 0b01 	add.w	fp, fp, #1
 80041ca:	e7b9      	b.n	8004140 <_printf_float+0x300>
 80041cc:	4631      	mov	r1, r6
 80041ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041d2:	4628      	mov	r0, r5
 80041d4:	47b8      	blx	r7
 80041d6:	3001      	adds	r0, #1
 80041d8:	d1bf      	bne.n	800415a <_printf_float+0x31a>
 80041da:	e68c      	b.n	8003ef6 <_printf_float+0xb6>
 80041dc:	464b      	mov	r3, r9
 80041de:	4631      	mov	r1, r6
 80041e0:	4628      	mov	r0, r5
 80041e2:	eb08 020a 	add.w	r2, r8, sl
 80041e6:	47b8      	blx	r7
 80041e8:	3001      	adds	r0, #1
 80041ea:	d1c2      	bne.n	8004172 <_printf_float+0x332>
 80041ec:	e683      	b.n	8003ef6 <_printf_float+0xb6>
 80041ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041f0:	2a01      	cmp	r2, #1
 80041f2:	dc01      	bgt.n	80041f8 <_printf_float+0x3b8>
 80041f4:	07db      	lsls	r3, r3, #31
 80041f6:	d539      	bpl.n	800426c <_printf_float+0x42c>
 80041f8:	2301      	movs	r3, #1
 80041fa:	4642      	mov	r2, r8
 80041fc:	4631      	mov	r1, r6
 80041fe:	4628      	mov	r0, r5
 8004200:	47b8      	blx	r7
 8004202:	3001      	adds	r0, #1
 8004204:	f43f ae77 	beq.w	8003ef6 <_printf_float+0xb6>
 8004208:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800420c:	4631      	mov	r1, r6
 800420e:	4628      	mov	r0, r5
 8004210:	47b8      	blx	r7
 8004212:	3001      	adds	r0, #1
 8004214:	f43f ae6f 	beq.w	8003ef6 <_printf_float+0xb6>
 8004218:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800421c:	2200      	movs	r2, #0
 800421e:	2300      	movs	r3, #0
 8004220:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004224:	f7fc fbc0 	bl	80009a8 <__aeabi_dcmpeq>
 8004228:	b9d8      	cbnz	r0, 8004262 <_printf_float+0x422>
 800422a:	f109 33ff 	add.w	r3, r9, #4294967295
 800422e:	f108 0201 	add.w	r2, r8, #1
 8004232:	4631      	mov	r1, r6
 8004234:	4628      	mov	r0, r5
 8004236:	47b8      	blx	r7
 8004238:	3001      	adds	r0, #1
 800423a:	d10e      	bne.n	800425a <_printf_float+0x41a>
 800423c:	e65b      	b.n	8003ef6 <_printf_float+0xb6>
 800423e:	2301      	movs	r3, #1
 8004240:	464a      	mov	r2, r9
 8004242:	4631      	mov	r1, r6
 8004244:	4628      	mov	r0, r5
 8004246:	47b8      	blx	r7
 8004248:	3001      	adds	r0, #1
 800424a:	f43f ae54 	beq.w	8003ef6 <_printf_float+0xb6>
 800424e:	f108 0801 	add.w	r8, r8, #1
 8004252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004254:	3b01      	subs	r3, #1
 8004256:	4543      	cmp	r3, r8
 8004258:	dcf1      	bgt.n	800423e <_printf_float+0x3fe>
 800425a:	4653      	mov	r3, sl
 800425c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004260:	e6de      	b.n	8004020 <_printf_float+0x1e0>
 8004262:	f04f 0800 	mov.w	r8, #0
 8004266:	f104 091a 	add.w	r9, r4, #26
 800426a:	e7f2      	b.n	8004252 <_printf_float+0x412>
 800426c:	2301      	movs	r3, #1
 800426e:	4642      	mov	r2, r8
 8004270:	e7df      	b.n	8004232 <_printf_float+0x3f2>
 8004272:	2301      	movs	r3, #1
 8004274:	464a      	mov	r2, r9
 8004276:	4631      	mov	r1, r6
 8004278:	4628      	mov	r0, r5
 800427a:	47b8      	blx	r7
 800427c:	3001      	adds	r0, #1
 800427e:	f43f ae3a 	beq.w	8003ef6 <_printf_float+0xb6>
 8004282:	f108 0801 	add.w	r8, r8, #1
 8004286:	68e3      	ldr	r3, [r4, #12]
 8004288:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800428a:	1a5b      	subs	r3, r3, r1
 800428c:	4543      	cmp	r3, r8
 800428e:	dcf0      	bgt.n	8004272 <_printf_float+0x432>
 8004290:	e6fb      	b.n	800408a <_printf_float+0x24a>
 8004292:	f04f 0800 	mov.w	r8, #0
 8004296:	f104 0919 	add.w	r9, r4, #25
 800429a:	e7f4      	b.n	8004286 <_printf_float+0x446>

0800429c <_printf_common>:
 800429c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042a0:	4616      	mov	r6, r2
 80042a2:	4699      	mov	r9, r3
 80042a4:	688a      	ldr	r2, [r1, #8]
 80042a6:	690b      	ldr	r3, [r1, #16]
 80042a8:	4607      	mov	r7, r0
 80042aa:	4293      	cmp	r3, r2
 80042ac:	bfb8      	it	lt
 80042ae:	4613      	movlt	r3, r2
 80042b0:	6033      	str	r3, [r6, #0]
 80042b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042b6:	460c      	mov	r4, r1
 80042b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042bc:	b10a      	cbz	r2, 80042c2 <_printf_common+0x26>
 80042be:	3301      	adds	r3, #1
 80042c0:	6033      	str	r3, [r6, #0]
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	0699      	lsls	r1, r3, #26
 80042c6:	bf42      	ittt	mi
 80042c8:	6833      	ldrmi	r3, [r6, #0]
 80042ca:	3302      	addmi	r3, #2
 80042cc:	6033      	strmi	r3, [r6, #0]
 80042ce:	6825      	ldr	r5, [r4, #0]
 80042d0:	f015 0506 	ands.w	r5, r5, #6
 80042d4:	d106      	bne.n	80042e4 <_printf_common+0x48>
 80042d6:	f104 0a19 	add.w	sl, r4, #25
 80042da:	68e3      	ldr	r3, [r4, #12]
 80042dc:	6832      	ldr	r2, [r6, #0]
 80042de:	1a9b      	subs	r3, r3, r2
 80042e0:	42ab      	cmp	r3, r5
 80042e2:	dc2b      	bgt.n	800433c <_printf_common+0xa0>
 80042e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80042e8:	1e13      	subs	r3, r2, #0
 80042ea:	6822      	ldr	r2, [r4, #0]
 80042ec:	bf18      	it	ne
 80042ee:	2301      	movne	r3, #1
 80042f0:	0692      	lsls	r2, r2, #26
 80042f2:	d430      	bmi.n	8004356 <_printf_common+0xba>
 80042f4:	4649      	mov	r1, r9
 80042f6:	4638      	mov	r0, r7
 80042f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042fc:	47c0      	blx	r8
 80042fe:	3001      	adds	r0, #1
 8004300:	d023      	beq.n	800434a <_printf_common+0xae>
 8004302:	6823      	ldr	r3, [r4, #0]
 8004304:	6922      	ldr	r2, [r4, #16]
 8004306:	f003 0306 	and.w	r3, r3, #6
 800430a:	2b04      	cmp	r3, #4
 800430c:	bf14      	ite	ne
 800430e:	2500      	movne	r5, #0
 8004310:	6833      	ldreq	r3, [r6, #0]
 8004312:	f04f 0600 	mov.w	r6, #0
 8004316:	bf08      	it	eq
 8004318:	68e5      	ldreq	r5, [r4, #12]
 800431a:	f104 041a 	add.w	r4, r4, #26
 800431e:	bf08      	it	eq
 8004320:	1aed      	subeq	r5, r5, r3
 8004322:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004326:	bf08      	it	eq
 8004328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800432c:	4293      	cmp	r3, r2
 800432e:	bfc4      	itt	gt
 8004330:	1a9b      	subgt	r3, r3, r2
 8004332:	18ed      	addgt	r5, r5, r3
 8004334:	42b5      	cmp	r5, r6
 8004336:	d11a      	bne.n	800436e <_printf_common+0xd2>
 8004338:	2000      	movs	r0, #0
 800433a:	e008      	b.n	800434e <_printf_common+0xb2>
 800433c:	2301      	movs	r3, #1
 800433e:	4652      	mov	r2, sl
 8004340:	4649      	mov	r1, r9
 8004342:	4638      	mov	r0, r7
 8004344:	47c0      	blx	r8
 8004346:	3001      	adds	r0, #1
 8004348:	d103      	bne.n	8004352 <_printf_common+0xb6>
 800434a:	f04f 30ff 	mov.w	r0, #4294967295
 800434e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004352:	3501      	adds	r5, #1
 8004354:	e7c1      	b.n	80042da <_printf_common+0x3e>
 8004356:	2030      	movs	r0, #48	; 0x30
 8004358:	18e1      	adds	r1, r4, r3
 800435a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004364:	4422      	add	r2, r4
 8004366:	3302      	adds	r3, #2
 8004368:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800436c:	e7c2      	b.n	80042f4 <_printf_common+0x58>
 800436e:	2301      	movs	r3, #1
 8004370:	4622      	mov	r2, r4
 8004372:	4649      	mov	r1, r9
 8004374:	4638      	mov	r0, r7
 8004376:	47c0      	blx	r8
 8004378:	3001      	adds	r0, #1
 800437a:	d0e6      	beq.n	800434a <_printf_common+0xae>
 800437c:	3601      	adds	r6, #1
 800437e:	e7d9      	b.n	8004334 <_printf_common+0x98>

08004380 <_printf_i>:
 8004380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004384:	7e0f      	ldrb	r7, [r1, #24]
 8004386:	4691      	mov	r9, r2
 8004388:	2f78      	cmp	r7, #120	; 0x78
 800438a:	4680      	mov	r8, r0
 800438c:	460c      	mov	r4, r1
 800438e:	469a      	mov	sl, r3
 8004390:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004392:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004396:	d807      	bhi.n	80043a8 <_printf_i+0x28>
 8004398:	2f62      	cmp	r7, #98	; 0x62
 800439a:	d80a      	bhi.n	80043b2 <_printf_i+0x32>
 800439c:	2f00      	cmp	r7, #0
 800439e:	f000 80d5 	beq.w	800454c <_printf_i+0x1cc>
 80043a2:	2f58      	cmp	r7, #88	; 0x58
 80043a4:	f000 80c1 	beq.w	800452a <_printf_i+0x1aa>
 80043a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043b0:	e03a      	b.n	8004428 <_printf_i+0xa8>
 80043b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043b6:	2b15      	cmp	r3, #21
 80043b8:	d8f6      	bhi.n	80043a8 <_printf_i+0x28>
 80043ba:	a101      	add	r1, pc, #4	; (adr r1, 80043c0 <_printf_i+0x40>)
 80043bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043c0:	08004419 	.word	0x08004419
 80043c4:	0800442d 	.word	0x0800442d
 80043c8:	080043a9 	.word	0x080043a9
 80043cc:	080043a9 	.word	0x080043a9
 80043d0:	080043a9 	.word	0x080043a9
 80043d4:	080043a9 	.word	0x080043a9
 80043d8:	0800442d 	.word	0x0800442d
 80043dc:	080043a9 	.word	0x080043a9
 80043e0:	080043a9 	.word	0x080043a9
 80043e4:	080043a9 	.word	0x080043a9
 80043e8:	080043a9 	.word	0x080043a9
 80043ec:	08004533 	.word	0x08004533
 80043f0:	08004459 	.word	0x08004459
 80043f4:	080044ed 	.word	0x080044ed
 80043f8:	080043a9 	.word	0x080043a9
 80043fc:	080043a9 	.word	0x080043a9
 8004400:	08004555 	.word	0x08004555
 8004404:	080043a9 	.word	0x080043a9
 8004408:	08004459 	.word	0x08004459
 800440c:	080043a9 	.word	0x080043a9
 8004410:	080043a9 	.word	0x080043a9
 8004414:	080044f5 	.word	0x080044f5
 8004418:	682b      	ldr	r3, [r5, #0]
 800441a:	1d1a      	adds	r2, r3, #4
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	602a      	str	r2, [r5, #0]
 8004420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004428:	2301      	movs	r3, #1
 800442a:	e0a0      	b.n	800456e <_printf_i+0x1ee>
 800442c:	6820      	ldr	r0, [r4, #0]
 800442e:	682b      	ldr	r3, [r5, #0]
 8004430:	0607      	lsls	r7, r0, #24
 8004432:	f103 0104 	add.w	r1, r3, #4
 8004436:	6029      	str	r1, [r5, #0]
 8004438:	d501      	bpl.n	800443e <_printf_i+0xbe>
 800443a:	681e      	ldr	r6, [r3, #0]
 800443c:	e003      	b.n	8004446 <_printf_i+0xc6>
 800443e:	0646      	lsls	r6, r0, #25
 8004440:	d5fb      	bpl.n	800443a <_printf_i+0xba>
 8004442:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004446:	2e00      	cmp	r6, #0
 8004448:	da03      	bge.n	8004452 <_printf_i+0xd2>
 800444a:	232d      	movs	r3, #45	; 0x2d
 800444c:	4276      	negs	r6, r6
 800444e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004452:	230a      	movs	r3, #10
 8004454:	4859      	ldr	r0, [pc, #356]	; (80045bc <_printf_i+0x23c>)
 8004456:	e012      	b.n	800447e <_printf_i+0xfe>
 8004458:	682b      	ldr	r3, [r5, #0]
 800445a:	6820      	ldr	r0, [r4, #0]
 800445c:	1d19      	adds	r1, r3, #4
 800445e:	6029      	str	r1, [r5, #0]
 8004460:	0605      	lsls	r5, r0, #24
 8004462:	d501      	bpl.n	8004468 <_printf_i+0xe8>
 8004464:	681e      	ldr	r6, [r3, #0]
 8004466:	e002      	b.n	800446e <_printf_i+0xee>
 8004468:	0641      	lsls	r1, r0, #25
 800446a:	d5fb      	bpl.n	8004464 <_printf_i+0xe4>
 800446c:	881e      	ldrh	r6, [r3, #0]
 800446e:	2f6f      	cmp	r7, #111	; 0x6f
 8004470:	bf0c      	ite	eq
 8004472:	2308      	moveq	r3, #8
 8004474:	230a      	movne	r3, #10
 8004476:	4851      	ldr	r0, [pc, #324]	; (80045bc <_printf_i+0x23c>)
 8004478:	2100      	movs	r1, #0
 800447a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800447e:	6865      	ldr	r5, [r4, #4]
 8004480:	2d00      	cmp	r5, #0
 8004482:	bfa8      	it	ge
 8004484:	6821      	ldrge	r1, [r4, #0]
 8004486:	60a5      	str	r5, [r4, #8]
 8004488:	bfa4      	itt	ge
 800448a:	f021 0104 	bicge.w	r1, r1, #4
 800448e:	6021      	strge	r1, [r4, #0]
 8004490:	b90e      	cbnz	r6, 8004496 <_printf_i+0x116>
 8004492:	2d00      	cmp	r5, #0
 8004494:	d04b      	beq.n	800452e <_printf_i+0x1ae>
 8004496:	4615      	mov	r5, r2
 8004498:	fbb6 f1f3 	udiv	r1, r6, r3
 800449c:	fb03 6711 	mls	r7, r3, r1, r6
 80044a0:	5dc7      	ldrb	r7, [r0, r7]
 80044a2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044a6:	4637      	mov	r7, r6
 80044a8:	42bb      	cmp	r3, r7
 80044aa:	460e      	mov	r6, r1
 80044ac:	d9f4      	bls.n	8004498 <_printf_i+0x118>
 80044ae:	2b08      	cmp	r3, #8
 80044b0:	d10b      	bne.n	80044ca <_printf_i+0x14a>
 80044b2:	6823      	ldr	r3, [r4, #0]
 80044b4:	07de      	lsls	r6, r3, #31
 80044b6:	d508      	bpl.n	80044ca <_printf_i+0x14a>
 80044b8:	6923      	ldr	r3, [r4, #16]
 80044ba:	6861      	ldr	r1, [r4, #4]
 80044bc:	4299      	cmp	r1, r3
 80044be:	bfde      	ittt	le
 80044c0:	2330      	movle	r3, #48	; 0x30
 80044c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80044ca:	1b52      	subs	r2, r2, r5
 80044cc:	6122      	str	r2, [r4, #16]
 80044ce:	464b      	mov	r3, r9
 80044d0:	4621      	mov	r1, r4
 80044d2:	4640      	mov	r0, r8
 80044d4:	f8cd a000 	str.w	sl, [sp]
 80044d8:	aa03      	add	r2, sp, #12
 80044da:	f7ff fedf 	bl	800429c <_printf_common>
 80044de:	3001      	adds	r0, #1
 80044e0:	d14a      	bne.n	8004578 <_printf_i+0x1f8>
 80044e2:	f04f 30ff 	mov.w	r0, #4294967295
 80044e6:	b004      	add	sp, #16
 80044e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044ec:	6823      	ldr	r3, [r4, #0]
 80044ee:	f043 0320 	orr.w	r3, r3, #32
 80044f2:	6023      	str	r3, [r4, #0]
 80044f4:	2778      	movs	r7, #120	; 0x78
 80044f6:	4832      	ldr	r0, [pc, #200]	; (80045c0 <_printf_i+0x240>)
 80044f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80044fc:	6823      	ldr	r3, [r4, #0]
 80044fe:	6829      	ldr	r1, [r5, #0]
 8004500:	061f      	lsls	r7, r3, #24
 8004502:	f851 6b04 	ldr.w	r6, [r1], #4
 8004506:	d402      	bmi.n	800450e <_printf_i+0x18e>
 8004508:	065f      	lsls	r7, r3, #25
 800450a:	bf48      	it	mi
 800450c:	b2b6      	uxthmi	r6, r6
 800450e:	07df      	lsls	r7, r3, #31
 8004510:	bf48      	it	mi
 8004512:	f043 0320 	orrmi.w	r3, r3, #32
 8004516:	6029      	str	r1, [r5, #0]
 8004518:	bf48      	it	mi
 800451a:	6023      	strmi	r3, [r4, #0]
 800451c:	b91e      	cbnz	r6, 8004526 <_printf_i+0x1a6>
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	f023 0320 	bic.w	r3, r3, #32
 8004524:	6023      	str	r3, [r4, #0]
 8004526:	2310      	movs	r3, #16
 8004528:	e7a6      	b.n	8004478 <_printf_i+0xf8>
 800452a:	4824      	ldr	r0, [pc, #144]	; (80045bc <_printf_i+0x23c>)
 800452c:	e7e4      	b.n	80044f8 <_printf_i+0x178>
 800452e:	4615      	mov	r5, r2
 8004530:	e7bd      	b.n	80044ae <_printf_i+0x12e>
 8004532:	682b      	ldr	r3, [r5, #0]
 8004534:	6826      	ldr	r6, [r4, #0]
 8004536:	1d18      	adds	r0, r3, #4
 8004538:	6961      	ldr	r1, [r4, #20]
 800453a:	6028      	str	r0, [r5, #0]
 800453c:	0635      	lsls	r5, r6, #24
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	d501      	bpl.n	8004546 <_printf_i+0x1c6>
 8004542:	6019      	str	r1, [r3, #0]
 8004544:	e002      	b.n	800454c <_printf_i+0x1cc>
 8004546:	0670      	lsls	r0, r6, #25
 8004548:	d5fb      	bpl.n	8004542 <_printf_i+0x1c2>
 800454a:	8019      	strh	r1, [r3, #0]
 800454c:	2300      	movs	r3, #0
 800454e:	4615      	mov	r5, r2
 8004550:	6123      	str	r3, [r4, #16]
 8004552:	e7bc      	b.n	80044ce <_printf_i+0x14e>
 8004554:	682b      	ldr	r3, [r5, #0]
 8004556:	2100      	movs	r1, #0
 8004558:	1d1a      	adds	r2, r3, #4
 800455a:	602a      	str	r2, [r5, #0]
 800455c:	681d      	ldr	r5, [r3, #0]
 800455e:	6862      	ldr	r2, [r4, #4]
 8004560:	4628      	mov	r0, r5
 8004562:	f000 fbe2 	bl	8004d2a <memchr>
 8004566:	b108      	cbz	r0, 800456c <_printf_i+0x1ec>
 8004568:	1b40      	subs	r0, r0, r5
 800456a:	6060      	str	r0, [r4, #4]
 800456c:	6863      	ldr	r3, [r4, #4]
 800456e:	6123      	str	r3, [r4, #16]
 8004570:	2300      	movs	r3, #0
 8004572:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004576:	e7aa      	b.n	80044ce <_printf_i+0x14e>
 8004578:	462a      	mov	r2, r5
 800457a:	4649      	mov	r1, r9
 800457c:	4640      	mov	r0, r8
 800457e:	6923      	ldr	r3, [r4, #16]
 8004580:	47d0      	blx	sl
 8004582:	3001      	adds	r0, #1
 8004584:	d0ad      	beq.n	80044e2 <_printf_i+0x162>
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	079b      	lsls	r3, r3, #30
 800458a:	d413      	bmi.n	80045b4 <_printf_i+0x234>
 800458c:	68e0      	ldr	r0, [r4, #12]
 800458e:	9b03      	ldr	r3, [sp, #12]
 8004590:	4298      	cmp	r0, r3
 8004592:	bfb8      	it	lt
 8004594:	4618      	movlt	r0, r3
 8004596:	e7a6      	b.n	80044e6 <_printf_i+0x166>
 8004598:	2301      	movs	r3, #1
 800459a:	4632      	mov	r2, r6
 800459c:	4649      	mov	r1, r9
 800459e:	4640      	mov	r0, r8
 80045a0:	47d0      	blx	sl
 80045a2:	3001      	adds	r0, #1
 80045a4:	d09d      	beq.n	80044e2 <_printf_i+0x162>
 80045a6:	3501      	adds	r5, #1
 80045a8:	68e3      	ldr	r3, [r4, #12]
 80045aa:	9903      	ldr	r1, [sp, #12]
 80045ac:	1a5b      	subs	r3, r3, r1
 80045ae:	42ab      	cmp	r3, r5
 80045b0:	dcf2      	bgt.n	8004598 <_printf_i+0x218>
 80045b2:	e7eb      	b.n	800458c <_printf_i+0x20c>
 80045b4:	2500      	movs	r5, #0
 80045b6:	f104 0619 	add.w	r6, r4, #25
 80045ba:	e7f5      	b.n	80045a8 <_printf_i+0x228>
 80045bc:	08008564 	.word	0x08008564
 80045c0:	08008575 	.word	0x08008575

080045c4 <_scanf_float>:
 80045c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c8:	b087      	sub	sp, #28
 80045ca:	9303      	str	r3, [sp, #12]
 80045cc:	688b      	ldr	r3, [r1, #8]
 80045ce:	4617      	mov	r7, r2
 80045d0:	1e5a      	subs	r2, r3, #1
 80045d2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80045d6:	bf85      	ittet	hi
 80045d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80045dc:	195b      	addhi	r3, r3, r5
 80045de:	2300      	movls	r3, #0
 80045e0:	9302      	strhi	r3, [sp, #8]
 80045e2:	bf88      	it	hi
 80045e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80045e8:	468b      	mov	fp, r1
 80045ea:	f04f 0500 	mov.w	r5, #0
 80045ee:	bf8c      	ite	hi
 80045f0:	608b      	strhi	r3, [r1, #8]
 80045f2:	9302      	strls	r3, [sp, #8]
 80045f4:	680b      	ldr	r3, [r1, #0]
 80045f6:	4680      	mov	r8, r0
 80045f8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80045fc:	f84b 3b1c 	str.w	r3, [fp], #28
 8004600:	460c      	mov	r4, r1
 8004602:	465e      	mov	r6, fp
 8004604:	46aa      	mov	sl, r5
 8004606:	46a9      	mov	r9, r5
 8004608:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800460c:	9501      	str	r5, [sp, #4]
 800460e:	68a2      	ldr	r2, [r4, #8]
 8004610:	b152      	cbz	r2, 8004628 <_scanf_float+0x64>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	2b4e      	cmp	r3, #78	; 0x4e
 8004618:	d864      	bhi.n	80046e4 <_scanf_float+0x120>
 800461a:	2b40      	cmp	r3, #64	; 0x40
 800461c:	d83c      	bhi.n	8004698 <_scanf_float+0xd4>
 800461e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004622:	b2c8      	uxtb	r0, r1
 8004624:	280e      	cmp	r0, #14
 8004626:	d93a      	bls.n	800469e <_scanf_float+0xda>
 8004628:	f1b9 0f00 	cmp.w	r9, #0
 800462c:	d003      	beq.n	8004636 <_scanf_float+0x72>
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004634:	6023      	str	r3, [r4, #0]
 8004636:	f10a 3aff 	add.w	sl, sl, #4294967295
 800463a:	f1ba 0f01 	cmp.w	sl, #1
 800463e:	f200 8113 	bhi.w	8004868 <_scanf_float+0x2a4>
 8004642:	455e      	cmp	r6, fp
 8004644:	f200 8105 	bhi.w	8004852 <_scanf_float+0x28e>
 8004648:	2501      	movs	r5, #1
 800464a:	4628      	mov	r0, r5
 800464c:	b007      	add	sp, #28
 800464e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004652:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004656:	2a0d      	cmp	r2, #13
 8004658:	d8e6      	bhi.n	8004628 <_scanf_float+0x64>
 800465a:	a101      	add	r1, pc, #4	; (adr r1, 8004660 <_scanf_float+0x9c>)
 800465c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004660:	0800479f 	.word	0x0800479f
 8004664:	08004629 	.word	0x08004629
 8004668:	08004629 	.word	0x08004629
 800466c:	08004629 	.word	0x08004629
 8004670:	080047ff 	.word	0x080047ff
 8004674:	080047d7 	.word	0x080047d7
 8004678:	08004629 	.word	0x08004629
 800467c:	08004629 	.word	0x08004629
 8004680:	080047ad 	.word	0x080047ad
 8004684:	08004629 	.word	0x08004629
 8004688:	08004629 	.word	0x08004629
 800468c:	08004629 	.word	0x08004629
 8004690:	08004629 	.word	0x08004629
 8004694:	08004765 	.word	0x08004765
 8004698:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800469c:	e7db      	b.n	8004656 <_scanf_float+0x92>
 800469e:	290e      	cmp	r1, #14
 80046a0:	d8c2      	bhi.n	8004628 <_scanf_float+0x64>
 80046a2:	a001      	add	r0, pc, #4	; (adr r0, 80046a8 <_scanf_float+0xe4>)
 80046a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80046a8:	08004757 	.word	0x08004757
 80046ac:	08004629 	.word	0x08004629
 80046b0:	08004757 	.word	0x08004757
 80046b4:	080047eb 	.word	0x080047eb
 80046b8:	08004629 	.word	0x08004629
 80046bc:	08004705 	.word	0x08004705
 80046c0:	08004741 	.word	0x08004741
 80046c4:	08004741 	.word	0x08004741
 80046c8:	08004741 	.word	0x08004741
 80046cc:	08004741 	.word	0x08004741
 80046d0:	08004741 	.word	0x08004741
 80046d4:	08004741 	.word	0x08004741
 80046d8:	08004741 	.word	0x08004741
 80046dc:	08004741 	.word	0x08004741
 80046e0:	08004741 	.word	0x08004741
 80046e4:	2b6e      	cmp	r3, #110	; 0x6e
 80046e6:	d809      	bhi.n	80046fc <_scanf_float+0x138>
 80046e8:	2b60      	cmp	r3, #96	; 0x60
 80046ea:	d8b2      	bhi.n	8004652 <_scanf_float+0x8e>
 80046ec:	2b54      	cmp	r3, #84	; 0x54
 80046ee:	d077      	beq.n	80047e0 <_scanf_float+0x21c>
 80046f0:	2b59      	cmp	r3, #89	; 0x59
 80046f2:	d199      	bne.n	8004628 <_scanf_float+0x64>
 80046f4:	2d07      	cmp	r5, #7
 80046f6:	d197      	bne.n	8004628 <_scanf_float+0x64>
 80046f8:	2508      	movs	r5, #8
 80046fa:	e029      	b.n	8004750 <_scanf_float+0x18c>
 80046fc:	2b74      	cmp	r3, #116	; 0x74
 80046fe:	d06f      	beq.n	80047e0 <_scanf_float+0x21c>
 8004700:	2b79      	cmp	r3, #121	; 0x79
 8004702:	e7f6      	b.n	80046f2 <_scanf_float+0x12e>
 8004704:	6821      	ldr	r1, [r4, #0]
 8004706:	05c8      	lsls	r0, r1, #23
 8004708:	d51a      	bpl.n	8004740 <_scanf_float+0x17c>
 800470a:	9b02      	ldr	r3, [sp, #8]
 800470c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004710:	6021      	str	r1, [r4, #0]
 8004712:	f109 0901 	add.w	r9, r9, #1
 8004716:	b11b      	cbz	r3, 8004720 <_scanf_float+0x15c>
 8004718:	3b01      	subs	r3, #1
 800471a:	3201      	adds	r2, #1
 800471c:	9302      	str	r3, [sp, #8]
 800471e:	60a2      	str	r2, [r4, #8]
 8004720:	68a3      	ldr	r3, [r4, #8]
 8004722:	3b01      	subs	r3, #1
 8004724:	60a3      	str	r3, [r4, #8]
 8004726:	6923      	ldr	r3, [r4, #16]
 8004728:	3301      	adds	r3, #1
 800472a:	6123      	str	r3, [r4, #16]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	3b01      	subs	r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	607b      	str	r3, [r7, #4]
 8004734:	f340 8084 	ble.w	8004840 <_scanf_float+0x27c>
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	3301      	adds	r3, #1
 800473c:	603b      	str	r3, [r7, #0]
 800473e:	e766      	b.n	800460e <_scanf_float+0x4a>
 8004740:	eb1a 0f05 	cmn.w	sl, r5
 8004744:	f47f af70 	bne.w	8004628 <_scanf_float+0x64>
 8004748:	6822      	ldr	r2, [r4, #0]
 800474a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800474e:	6022      	str	r2, [r4, #0]
 8004750:	f806 3b01 	strb.w	r3, [r6], #1
 8004754:	e7e4      	b.n	8004720 <_scanf_float+0x15c>
 8004756:	6822      	ldr	r2, [r4, #0]
 8004758:	0610      	lsls	r0, r2, #24
 800475a:	f57f af65 	bpl.w	8004628 <_scanf_float+0x64>
 800475e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004762:	e7f4      	b.n	800474e <_scanf_float+0x18a>
 8004764:	f1ba 0f00 	cmp.w	sl, #0
 8004768:	d10e      	bne.n	8004788 <_scanf_float+0x1c4>
 800476a:	f1b9 0f00 	cmp.w	r9, #0
 800476e:	d10e      	bne.n	800478e <_scanf_float+0x1ca>
 8004770:	6822      	ldr	r2, [r4, #0]
 8004772:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004776:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800477a:	d108      	bne.n	800478e <_scanf_float+0x1ca>
 800477c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004780:	f04f 0a01 	mov.w	sl, #1
 8004784:	6022      	str	r2, [r4, #0]
 8004786:	e7e3      	b.n	8004750 <_scanf_float+0x18c>
 8004788:	f1ba 0f02 	cmp.w	sl, #2
 800478c:	d055      	beq.n	800483a <_scanf_float+0x276>
 800478e:	2d01      	cmp	r5, #1
 8004790:	d002      	beq.n	8004798 <_scanf_float+0x1d4>
 8004792:	2d04      	cmp	r5, #4
 8004794:	f47f af48 	bne.w	8004628 <_scanf_float+0x64>
 8004798:	3501      	adds	r5, #1
 800479a:	b2ed      	uxtb	r5, r5
 800479c:	e7d8      	b.n	8004750 <_scanf_float+0x18c>
 800479e:	f1ba 0f01 	cmp.w	sl, #1
 80047a2:	f47f af41 	bne.w	8004628 <_scanf_float+0x64>
 80047a6:	f04f 0a02 	mov.w	sl, #2
 80047aa:	e7d1      	b.n	8004750 <_scanf_float+0x18c>
 80047ac:	b97d      	cbnz	r5, 80047ce <_scanf_float+0x20a>
 80047ae:	f1b9 0f00 	cmp.w	r9, #0
 80047b2:	f47f af3c 	bne.w	800462e <_scanf_float+0x6a>
 80047b6:	6822      	ldr	r2, [r4, #0]
 80047b8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80047bc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80047c0:	f47f af39 	bne.w	8004636 <_scanf_float+0x72>
 80047c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80047c8:	2501      	movs	r5, #1
 80047ca:	6022      	str	r2, [r4, #0]
 80047cc:	e7c0      	b.n	8004750 <_scanf_float+0x18c>
 80047ce:	2d03      	cmp	r5, #3
 80047d0:	d0e2      	beq.n	8004798 <_scanf_float+0x1d4>
 80047d2:	2d05      	cmp	r5, #5
 80047d4:	e7de      	b.n	8004794 <_scanf_float+0x1d0>
 80047d6:	2d02      	cmp	r5, #2
 80047d8:	f47f af26 	bne.w	8004628 <_scanf_float+0x64>
 80047dc:	2503      	movs	r5, #3
 80047de:	e7b7      	b.n	8004750 <_scanf_float+0x18c>
 80047e0:	2d06      	cmp	r5, #6
 80047e2:	f47f af21 	bne.w	8004628 <_scanf_float+0x64>
 80047e6:	2507      	movs	r5, #7
 80047e8:	e7b2      	b.n	8004750 <_scanf_float+0x18c>
 80047ea:	6822      	ldr	r2, [r4, #0]
 80047ec:	0591      	lsls	r1, r2, #22
 80047ee:	f57f af1b 	bpl.w	8004628 <_scanf_float+0x64>
 80047f2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80047f6:	6022      	str	r2, [r4, #0]
 80047f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80047fc:	e7a8      	b.n	8004750 <_scanf_float+0x18c>
 80047fe:	6822      	ldr	r2, [r4, #0]
 8004800:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004804:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004808:	d006      	beq.n	8004818 <_scanf_float+0x254>
 800480a:	0550      	lsls	r0, r2, #21
 800480c:	f57f af0c 	bpl.w	8004628 <_scanf_float+0x64>
 8004810:	f1b9 0f00 	cmp.w	r9, #0
 8004814:	f43f af0f 	beq.w	8004636 <_scanf_float+0x72>
 8004818:	0591      	lsls	r1, r2, #22
 800481a:	bf58      	it	pl
 800481c:	9901      	ldrpl	r1, [sp, #4]
 800481e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004822:	bf58      	it	pl
 8004824:	eba9 0101 	subpl.w	r1, r9, r1
 8004828:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800482c:	f04f 0900 	mov.w	r9, #0
 8004830:	bf58      	it	pl
 8004832:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004836:	6022      	str	r2, [r4, #0]
 8004838:	e78a      	b.n	8004750 <_scanf_float+0x18c>
 800483a:	f04f 0a03 	mov.w	sl, #3
 800483e:	e787      	b.n	8004750 <_scanf_float+0x18c>
 8004840:	4639      	mov	r1, r7
 8004842:	4640      	mov	r0, r8
 8004844:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004848:	4798      	blx	r3
 800484a:	2800      	cmp	r0, #0
 800484c:	f43f aedf 	beq.w	800460e <_scanf_float+0x4a>
 8004850:	e6ea      	b.n	8004628 <_scanf_float+0x64>
 8004852:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004856:	463a      	mov	r2, r7
 8004858:	4640      	mov	r0, r8
 800485a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800485e:	4798      	blx	r3
 8004860:	6923      	ldr	r3, [r4, #16]
 8004862:	3b01      	subs	r3, #1
 8004864:	6123      	str	r3, [r4, #16]
 8004866:	e6ec      	b.n	8004642 <_scanf_float+0x7e>
 8004868:	1e6b      	subs	r3, r5, #1
 800486a:	2b06      	cmp	r3, #6
 800486c:	d825      	bhi.n	80048ba <_scanf_float+0x2f6>
 800486e:	2d02      	cmp	r5, #2
 8004870:	d836      	bhi.n	80048e0 <_scanf_float+0x31c>
 8004872:	455e      	cmp	r6, fp
 8004874:	f67f aee8 	bls.w	8004648 <_scanf_float+0x84>
 8004878:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800487c:	463a      	mov	r2, r7
 800487e:	4640      	mov	r0, r8
 8004880:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004884:	4798      	blx	r3
 8004886:	6923      	ldr	r3, [r4, #16]
 8004888:	3b01      	subs	r3, #1
 800488a:	6123      	str	r3, [r4, #16]
 800488c:	e7f1      	b.n	8004872 <_scanf_float+0x2ae>
 800488e:	9802      	ldr	r0, [sp, #8]
 8004890:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004894:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004898:	463a      	mov	r2, r7
 800489a:	9002      	str	r0, [sp, #8]
 800489c:	4640      	mov	r0, r8
 800489e:	4798      	blx	r3
 80048a0:	6923      	ldr	r3, [r4, #16]
 80048a2:	3b01      	subs	r3, #1
 80048a4:	6123      	str	r3, [r4, #16]
 80048a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80048aa:	fa5f fa8a 	uxtb.w	sl, sl
 80048ae:	f1ba 0f02 	cmp.w	sl, #2
 80048b2:	d1ec      	bne.n	800488e <_scanf_float+0x2ca>
 80048b4:	3d03      	subs	r5, #3
 80048b6:	b2ed      	uxtb	r5, r5
 80048b8:	1b76      	subs	r6, r6, r5
 80048ba:	6823      	ldr	r3, [r4, #0]
 80048bc:	05da      	lsls	r2, r3, #23
 80048be:	d52f      	bpl.n	8004920 <_scanf_float+0x35c>
 80048c0:	055b      	lsls	r3, r3, #21
 80048c2:	d510      	bpl.n	80048e6 <_scanf_float+0x322>
 80048c4:	455e      	cmp	r6, fp
 80048c6:	f67f aebf 	bls.w	8004648 <_scanf_float+0x84>
 80048ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80048ce:	463a      	mov	r2, r7
 80048d0:	4640      	mov	r0, r8
 80048d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80048d6:	4798      	blx	r3
 80048d8:	6923      	ldr	r3, [r4, #16]
 80048da:	3b01      	subs	r3, #1
 80048dc:	6123      	str	r3, [r4, #16]
 80048de:	e7f1      	b.n	80048c4 <_scanf_float+0x300>
 80048e0:	46aa      	mov	sl, r5
 80048e2:	9602      	str	r6, [sp, #8]
 80048e4:	e7df      	b.n	80048a6 <_scanf_float+0x2e2>
 80048e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80048ea:	6923      	ldr	r3, [r4, #16]
 80048ec:	2965      	cmp	r1, #101	; 0x65
 80048ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80048f2:	f106 35ff 	add.w	r5, r6, #4294967295
 80048f6:	6123      	str	r3, [r4, #16]
 80048f8:	d00c      	beq.n	8004914 <_scanf_float+0x350>
 80048fa:	2945      	cmp	r1, #69	; 0x45
 80048fc:	d00a      	beq.n	8004914 <_scanf_float+0x350>
 80048fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004902:	463a      	mov	r2, r7
 8004904:	4640      	mov	r0, r8
 8004906:	4798      	blx	r3
 8004908:	6923      	ldr	r3, [r4, #16]
 800490a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800490e:	3b01      	subs	r3, #1
 8004910:	1eb5      	subs	r5, r6, #2
 8004912:	6123      	str	r3, [r4, #16]
 8004914:	463a      	mov	r2, r7
 8004916:	4640      	mov	r0, r8
 8004918:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800491c:	4798      	blx	r3
 800491e:	462e      	mov	r6, r5
 8004920:	6825      	ldr	r5, [r4, #0]
 8004922:	f015 0510 	ands.w	r5, r5, #16
 8004926:	d155      	bne.n	80049d4 <_scanf_float+0x410>
 8004928:	7035      	strb	r5, [r6, #0]
 800492a:	6823      	ldr	r3, [r4, #0]
 800492c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004934:	d11d      	bne.n	8004972 <_scanf_float+0x3ae>
 8004936:	9b01      	ldr	r3, [sp, #4]
 8004938:	454b      	cmp	r3, r9
 800493a:	eba3 0209 	sub.w	r2, r3, r9
 800493e:	d125      	bne.n	800498c <_scanf_float+0x3c8>
 8004940:	2200      	movs	r2, #0
 8004942:	4659      	mov	r1, fp
 8004944:	4640      	mov	r0, r8
 8004946:	f002 fc23 	bl	8007190 <_strtod_r>
 800494a:	9b03      	ldr	r3, [sp, #12]
 800494c:	f8d4 c000 	ldr.w	ip, [r4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f01c 0f02 	tst.w	ip, #2
 8004956:	4606      	mov	r6, r0
 8004958:	460f      	mov	r7, r1
 800495a:	f103 0204 	add.w	r2, r3, #4
 800495e:	d020      	beq.n	80049a2 <_scanf_float+0x3de>
 8004960:	9903      	ldr	r1, [sp, #12]
 8004962:	600a      	str	r2, [r1, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	e9c3 6700 	strd	r6, r7, [r3]
 800496a:	68e3      	ldr	r3, [r4, #12]
 800496c:	3301      	adds	r3, #1
 800496e:	60e3      	str	r3, [r4, #12]
 8004970:	e66b      	b.n	800464a <_scanf_float+0x86>
 8004972:	9b04      	ldr	r3, [sp, #16]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0e3      	beq.n	8004940 <_scanf_float+0x37c>
 8004978:	9905      	ldr	r1, [sp, #20]
 800497a:	230a      	movs	r3, #10
 800497c:	462a      	mov	r2, r5
 800497e:	4640      	mov	r0, r8
 8004980:	3101      	adds	r1, #1
 8004982:	f002 fc89 	bl	8007298 <_strtol_r>
 8004986:	9b04      	ldr	r3, [sp, #16]
 8004988:	9e05      	ldr	r6, [sp, #20]
 800498a:	1ac2      	subs	r2, r0, r3
 800498c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004990:	429e      	cmp	r6, r3
 8004992:	bf28      	it	cs
 8004994:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004998:	4630      	mov	r0, r6
 800499a:	490f      	ldr	r1, [pc, #60]	; (80049d8 <_scanf_float+0x414>)
 800499c:	f000 f8e2 	bl	8004b64 <siprintf>
 80049a0:	e7ce      	b.n	8004940 <_scanf_float+0x37c>
 80049a2:	f01c 0f04 	tst.w	ip, #4
 80049a6:	d1db      	bne.n	8004960 <_scanf_float+0x39c>
 80049a8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80049ac:	f8cc 2000 	str.w	r2, [ip]
 80049b0:	f8d3 8000 	ldr.w	r8, [r3]
 80049b4:	4602      	mov	r2, r0
 80049b6:	460b      	mov	r3, r1
 80049b8:	f7fc f828 	bl	8000a0c <__aeabi_dcmpun>
 80049bc:	b128      	cbz	r0, 80049ca <_scanf_float+0x406>
 80049be:	4807      	ldr	r0, [pc, #28]	; (80049dc <_scanf_float+0x418>)
 80049c0:	f000 f9c2 	bl	8004d48 <nanf>
 80049c4:	f8c8 0000 	str.w	r0, [r8]
 80049c8:	e7cf      	b.n	800496a <_scanf_float+0x3a6>
 80049ca:	4630      	mov	r0, r6
 80049cc:	4639      	mov	r1, r7
 80049ce:	f7fc f87b 	bl	8000ac8 <__aeabi_d2f>
 80049d2:	e7f7      	b.n	80049c4 <_scanf_float+0x400>
 80049d4:	2500      	movs	r5, #0
 80049d6:	e638      	b.n	800464a <_scanf_float+0x86>
 80049d8:	08008586 	.word	0x08008586
 80049dc:	0800891d 	.word	0x0800891d

080049e0 <std>:
 80049e0:	2300      	movs	r3, #0
 80049e2:	b510      	push	{r4, lr}
 80049e4:	4604      	mov	r4, r0
 80049e6:	e9c0 3300 	strd	r3, r3, [r0]
 80049ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049ee:	6083      	str	r3, [r0, #8]
 80049f0:	8181      	strh	r1, [r0, #12]
 80049f2:	6643      	str	r3, [r0, #100]	; 0x64
 80049f4:	81c2      	strh	r2, [r0, #14]
 80049f6:	6183      	str	r3, [r0, #24]
 80049f8:	4619      	mov	r1, r3
 80049fa:	2208      	movs	r2, #8
 80049fc:	305c      	adds	r0, #92	; 0x5c
 80049fe:	f000 f914 	bl	8004c2a <memset>
 8004a02:	4b0d      	ldr	r3, [pc, #52]	; (8004a38 <std+0x58>)
 8004a04:	6224      	str	r4, [r4, #32]
 8004a06:	6263      	str	r3, [r4, #36]	; 0x24
 8004a08:	4b0c      	ldr	r3, [pc, #48]	; (8004a3c <std+0x5c>)
 8004a0a:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a0c:	4b0c      	ldr	r3, [pc, #48]	; (8004a40 <std+0x60>)
 8004a0e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a10:	4b0c      	ldr	r3, [pc, #48]	; (8004a44 <std+0x64>)
 8004a12:	6323      	str	r3, [r4, #48]	; 0x30
 8004a14:	4b0c      	ldr	r3, [pc, #48]	; (8004a48 <std+0x68>)
 8004a16:	429c      	cmp	r4, r3
 8004a18:	d006      	beq.n	8004a28 <std+0x48>
 8004a1a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004a1e:	4294      	cmp	r4, r2
 8004a20:	d002      	beq.n	8004a28 <std+0x48>
 8004a22:	33d0      	adds	r3, #208	; 0xd0
 8004a24:	429c      	cmp	r4, r3
 8004a26:	d105      	bne.n	8004a34 <std+0x54>
 8004a28:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a30:	f000 b978 	b.w	8004d24 <__retarget_lock_init_recursive>
 8004a34:	bd10      	pop	{r4, pc}
 8004a36:	bf00      	nop
 8004a38:	08004ba5 	.word	0x08004ba5
 8004a3c:	08004bc7 	.word	0x08004bc7
 8004a40:	08004bff 	.word	0x08004bff
 8004a44:	08004c23 	.word	0x08004c23
 8004a48:	200002a8 	.word	0x200002a8

08004a4c <stdio_exit_handler>:
 8004a4c:	4a02      	ldr	r2, [pc, #8]	; (8004a58 <stdio_exit_handler+0xc>)
 8004a4e:	4903      	ldr	r1, [pc, #12]	; (8004a5c <stdio_exit_handler+0x10>)
 8004a50:	4803      	ldr	r0, [pc, #12]	; (8004a60 <stdio_exit_handler+0x14>)
 8004a52:	f000 b869 	b.w	8004b28 <_fwalk_sglue>
 8004a56:	bf00      	nop
 8004a58:	20000030 	.word	0x20000030
 8004a5c:	08007651 	.word	0x08007651
 8004a60:	2000003c 	.word	0x2000003c

08004a64 <cleanup_stdio>:
 8004a64:	6841      	ldr	r1, [r0, #4]
 8004a66:	4b0c      	ldr	r3, [pc, #48]	; (8004a98 <cleanup_stdio+0x34>)
 8004a68:	b510      	push	{r4, lr}
 8004a6a:	4299      	cmp	r1, r3
 8004a6c:	4604      	mov	r4, r0
 8004a6e:	d001      	beq.n	8004a74 <cleanup_stdio+0x10>
 8004a70:	f002 fdee 	bl	8007650 <_fflush_r>
 8004a74:	68a1      	ldr	r1, [r4, #8]
 8004a76:	4b09      	ldr	r3, [pc, #36]	; (8004a9c <cleanup_stdio+0x38>)
 8004a78:	4299      	cmp	r1, r3
 8004a7a:	d002      	beq.n	8004a82 <cleanup_stdio+0x1e>
 8004a7c:	4620      	mov	r0, r4
 8004a7e:	f002 fde7 	bl	8007650 <_fflush_r>
 8004a82:	68e1      	ldr	r1, [r4, #12]
 8004a84:	4b06      	ldr	r3, [pc, #24]	; (8004aa0 <cleanup_stdio+0x3c>)
 8004a86:	4299      	cmp	r1, r3
 8004a88:	d004      	beq.n	8004a94 <cleanup_stdio+0x30>
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a90:	f002 bdde 	b.w	8007650 <_fflush_r>
 8004a94:	bd10      	pop	{r4, pc}
 8004a96:	bf00      	nop
 8004a98:	200002a8 	.word	0x200002a8
 8004a9c:	20000310 	.word	0x20000310
 8004aa0:	20000378 	.word	0x20000378

08004aa4 <global_stdio_init.part.0>:
 8004aa4:	b510      	push	{r4, lr}
 8004aa6:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <global_stdio_init.part.0+0x30>)
 8004aa8:	4c0b      	ldr	r4, [pc, #44]	; (8004ad8 <global_stdio_init.part.0+0x34>)
 8004aaa:	4a0c      	ldr	r2, [pc, #48]	; (8004adc <global_stdio_init.part.0+0x38>)
 8004aac:	4620      	mov	r0, r4
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	2104      	movs	r1, #4
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f7ff ff94 	bl	80049e0 <std>
 8004ab8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004abc:	2201      	movs	r2, #1
 8004abe:	2109      	movs	r1, #9
 8004ac0:	f7ff ff8e 	bl	80049e0 <std>
 8004ac4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004ac8:	2202      	movs	r2, #2
 8004aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ace:	2112      	movs	r1, #18
 8004ad0:	f7ff bf86 	b.w	80049e0 <std>
 8004ad4:	200003e0 	.word	0x200003e0
 8004ad8:	200002a8 	.word	0x200002a8
 8004adc:	08004a4d 	.word	0x08004a4d

08004ae0 <__sfp_lock_acquire>:
 8004ae0:	4801      	ldr	r0, [pc, #4]	; (8004ae8 <__sfp_lock_acquire+0x8>)
 8004ae2:	f000 b920 	b.w	8004d26 <__retarget_lock_acquire_recursive>
 8004ae6:	bf00      	nop
 8004ae8:	200003e9 	.word	0x200003e9

08004aec <__sfp_lock_release>:
 8004aec:	4801      	ldr	r0, [pc, #4]	; (8004af4 <__sfp_lock_release+0x8>)
 8004aee:	f000 b91b 	b.w	8004d28 <__retarget_lock_release_recursive>
 8004af2:	bf00      	nop
 8004af4:	200003e9 	.word	0x200003e9

08004af8 <__sinit>:
 8004af8:	b510      	push	{r4, lr}
 8004afa:	4604      	mov	r4, r0
 8004afc:	f7ff fff0 	bl	8004ae0 <__sfp_lock_acquire>
 8004b00:	6a23      	ldr	r3, [r4, #32]
 8004b02:	b11b      	cbz	r3, 8004b0c <__sinit+0x14>
 8004b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b08:	f7ff bff0 	b.w	8004aec <__sfp_lock_release>
 8004b0c:	4b04      	ldr	r3, [pc, #16]	; (8004b20 <__sinit+0x28>)
 8004b0e:	6223      	str	r3, [r4, #32]
 8004b10:	4b04      	ldr	r3, [pc, #16]	; (8004b24 <__sinit+0x2c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1f5      	bne.n	8004b04 <__sinit+0xc>
 8004b18:	f7ff ffc4 	bl	8004aa4 <global_stdio_init.part.0>
 8004b1c:	e7f2      	b.n	8004b04 <__sinit+0xc>
 8004b1e:	bf00      	nop
 8004b20:	08004a65 	.word	0x08004a65
 8004b24:	200003e0 	.word	0x200003e0

08004b28 <_fwalk_sglue>:
 8004b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b2c:	4607      	mov	r7, r0
 8004b2e:	4688      	mov	r8, r1
 8004b30:	4614      	mov	r4, r2
 8004b32:	2600      	movs	r6, #0
 8004b34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b38:	f1b9 0901 	subs.w	r9, r9, #1
 8004b3c:	d505      	bpl.n	8004b4a <_fwalk_sglue+0x22>
 8004b3e:	6824      	ldr	r4, [r4, #0]
 8004b40:	2c00      	cmp	r4, #0
 8004b42:	d1f7      	bne.n	8004b34 <_fwalk_sglue+0xc>
 8004b44:	4630      	mov	r0, r6
 8004b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b4a:	89ab      	ldrh	r3, [r5, #12]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d907      	bls.n	8004b60 <_fwalk_sglue+0x38>
 8004b50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b54:	3301      	adds	r3, #1
 8004b56:	d003      	beq.n	8004b60 <_fwalk_sglue+0x38>
 8004b58:	4629      	mov	r1, r5
 8004b5a:	4638      	mov	r0, r7
 8004b5c:	47c0      	blx	r8
 8004b5e:	4306      	orrs	r6, r0
 8004b60:	3568      	adds	r5, #104	; 0x68
 8004b62:	e7e9      	b.n	8004b38 <_fwalk_sglue+0x10>

08004b64 <siprintf>:
 8004b64:	b40e      	push	{r1, r2, r3}
 8004b66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b6a:	b500      	push	{lr}
 8004b6c:	b09c      	sub	sp, #112	; 0x70
 8004b6e:	ab1d      	add	r3, sp, #116	; 0x74
 8004b70:	9002      	str	r0, [sp, #8]
 8004b72:	9006      	str	r0, [sp, #24]
 8004b74:	9107      	str	r1, [sp, #28]
 8004b76:	9104      	str	r1, [sp, #16]
 8004b78:	4808      	ldr	r0, [pc, #32]	; (8004b9c <siprintf+0x38>)
 8004b7a:	4909      	ldr	r1, [pc, #36]	; (8004ba0 <siprintf+0x3c>)
 8004b7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b80:	9105      	str	r1, [sp, #20]
 8004b82:	6800      	ldr	r0, [r0, #0]
 8004b84:	a902      	add	r1, sp, #8
 8004b86:	9301      	str	r3, [sp, #4]
 8004b88:	f002 fbe2 	bl	8007350 <_svfiprintf_r>
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	9b02      	ldr	r3, [sp, #8]
 8004b90:	701a      	strb	r2, [r3, #0]
 8004b92:	b01c      	add	sp, #112	; 0x70
 8004b94:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b98:	b003      	add	sp, #12
 8004b9a:	4770      	bx	lr
 8004b9c:	20000088 	.word	0x20000088
 8004ba0:	ffff0208 	.word	0xffff0208

08004ba4 <__sread>:
 8004ba4:	b510      	push	{r4, lr}
 8004ba6:	460c      	mov	r4, r1
 8004ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bac:	f000 f86c 	bl	8004c88 <_read_r>
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	bfab      	itete	ge
 8004bb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004bb6:	89a3      	ldrhlt	r3, [r4, #12]
 8004bb8:	181b      	addge	r3, r3, r0
 8004bba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004bbe:	bfac      	ite	ge
 8004bc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004bc2:	81a3      	strhlt	r3, [r4, #12]
 8004bc4:	bd10      	pop	{r4, pc}

08004bc6 <__swrite>:
 8004bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bca:	461f      	mov	r7, r3
 8004bcc:	898b      	ldrh	r3, [r1, #12]
 8004bce:	4605      	mov	r5, r0
 8004bd0:	05db      	lsls	r3, r3, #23
 8004bd2:	460c      	mov	r4, r1
 8004bd4:	4616      	mov	r6, r2
 8004bd6:	d505      	bpl.n	8004be4 <__swrite+0x1e>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004be0:	f000 f840 	bl	8004c64 <_lseek_r>
 8004be4:	89a3      	ldrh	r3, [r4, #12]
 8004be6:	4632      	mov	r2, r6
 8004be8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bec:	81a3      	strh	r3, [r4, #12]
 8004bee:	4628      	mov	r0, r5
 8004bf0:	463b      	mov	r3, r7
 8004bf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bfa:	f000 b857 	b.w	8004cac <_write_r>

08004bfe <__sseek>:
 8004bfe:	b510      	push	{r4, lr}
 8004c00:	460c      	mov	r4, r1
 8004c02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c06:	f000 f82d 	bl	8004c64 <_lseek_r>
 8004c0a:	1c43      	adds	r3, r0, #1
 8004c0c:	89a3      	ldrh	r3, [r4, #12]
 8004c0e:	bf15      	itete	ne
 8004c10:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c1a:	81a3      	strheq	r3, [r4, #12]
 8004c1c:	bf18      	it	ne
 8004c1e:	81a3      	strhne	r3, [r4, #12]
 8004c20:	bd10      	pop	{r4, pc}

08004c22 <__sclose>:
 8004c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c26:	f000 b80d 	b.w	8004c44 <_close_r>

08004c2a <memset>:
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	4402      	add	r2, r0
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d100      	bne.n	8004c34 <memset+0xa>
 8004c32:	4770      	bx	lr
 8004c34:	f803 1b01 	strb.w	r1, [r3], #1
 8004c38:	e7f9      	b.n	8004c2e <memset+0x4>
	...

08004c3c <_localeconv_r>:
 8004c3c:	4800      	ldr	r0, [pc, #0]	; (8004c40 <_localeconv_r+0x4>)
 8004c3e:	4770      	bx	lr
 8004c40:	2000017c 	.word	0x2000017c

08004c44 <_close_r>:
 8004c44:	b538      	push	{r3, r4, r5, lr}
 8004c46:	2300      	movs	r3, #0
 8004c48:	4d05      	ldr	r5, [pc, #20]	; (8004c60 <_close_r+0x1c>)
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	4608      	mov	r0, r1
 8004c4e:	602b      	str	r3, [r5, #0]
 8004c50:	f7fd fc11 	bl	8002476 <_close>
 8004c54:	1c43      	adds	r3, r0, #1
 8004c56:	d102      	bne.n	8004c5e <_close_r+0x1a>
 8004c58:	682b      	ldr	r3, [r5, #0]
 8004c5a:	b103      	cbz	r3, 8004c5e <_close_r+0x1a>
 8004c5c:	6023      	str	r3, [r4, #0]
 8004c5e:	bd38      	pop	{r3, r4, r5, pc}
 8004c60:	200003e4 	.word	0x200003e4

08004c64 <_lseek_r>:
 8004c64:	b538      	push	{r3, r4, r5, lr}
 8004c66:	4604      	mov	r4, r0
 8004c68:	4608      	mov	r0, r1
 8004c6a:	4611      	mov	r1, r2
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	4d05      	ldr	r5, [pc, #20]	; (8004c84 <_lseek_r+0x20>)
 8004c70:	602a      	str	r2, [r5, #0]
 8004c72:	461a      	mov	r2, r3
 8004c74:	f7fd fc23 	bl	80024be <_lseek>
 8004c78:	1c43      	adds	r3, r0, #1
 8004c7a:	d102      	bne.n	8004c82 <_lseek_r+0x1e>
 8004c7c:	682b      	ldr	r3, [r5, #0]
 8004c7e:	b103      	cbz	r3, 8004c82 <_lseek_r+0x1e>
 8004c80:	6023      	str	r3, [r4, #0]
 8004c82:	bd38      	pop	{r3, r4, r5, pc}
 8004c84:	200003e4 	.word	0x200003e4

08004c88 <_read_r>:
 8004c88:	b538      	push	{r3, r4, r5, lr}
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	4608      	mov	r0, r1
 8004c8e:	4611      	mov	r1, r2
 8004c90:	2200      	movs	r2, #0
 8004c92:	4d05      	ldr	r5, [pc, #20]	; (8004ca8 <_read_r+0x20>)
 8004c94:	602a      	str	r2, [r5, #0]
 8004c96:	461a      	mov	r2, r3
 8004c98:	f7fd fbb4 	bl	8002404 <_read>
 8004c9c:	1c43      	adds	r3, r0, #1
 8004c9e:	d102      	bne.n	8004ca6 <_read_r+0x1e>
 8004ca0:	682b      	ldr	r3, [r5, #0]
 8004ca2:	b103      	cbz	r3, 8004ca6 <_read_r+0x1e>
 8004ca4:	6023      	str	r3, [r4, #0]
 8004ca6:	bd38      	pop	{r3, r4, r5, pc}
 8004ca8:	200003e4 	.word	0x200003e4

08004cac <_write_r>:
 8004cac:	b538      	push	{r3, r4, r5, lr}
 8004cae:	4604      	mov	r4, r0
 8004cb0:	4608      	mov	r0, r1
 8004cb2:	4611      	mov	r1, r2
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	4d05      	ldr	r5, [pc, #20]	; (8004ccc <_write_r+0x20>)
 8004cb8:	602a      	str	r2, [r5, #0]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	f7fd fbbf 	bl	800243e <_write>
 8004cc0:	1c43      	adds	r3, r0, #1
 8004cc2:	d102      	bne.n	8004cca <_write_r+0x1e>
 8004cc4:	682b      	ldr	r3, [r5, #0]
 8004cc6:	b103      	cbz	r3, 8004cca <_write_r+0x1e>
 8004cc8:	6023      	str	r3, [r4, #0]
 8004cca:	bd38      	pop	{r3, r4, r5, pc}
 8004ccc:	200003e4 	.word	0x200003e4

08004cd0 <__errno>:
 8004cd0:	4b01      	ldr	r3, [pc, #4]	; (8004cd8 <__errno+0x8>)
 8004cd2:	6818      	ldr	r0, [r3, #0]
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	20000088 	.word	0x20000088

08004cdc <__libc_init_array>:
 8004cdc:	b570      	push	{r4, r5, r6, lr}
 8004cde:	2600      	movs	r6, #0
 8004ce0:	4d0c      	ldr	r5, [pc, #48]	; (8004d14 <__libc_init_array+0x38>)
 8004ce2:	4c0d      	ldr	r4, [pc, #52]	; (8004d18 <__libc_init_array+0x3c>)
 8004ce4:	1b64      	subs	r4, r4, r5
 8004ce6:	10a4      	asrs	r4, r4, #2
 8004ce8:	42a6      	cmp	r6, r4
 8004cea:	d109      	bne.n	8004d00 <__libc_init_array+0x24>
 8004cec:	f003 fbc2 	bl	8008474 <_init>
 8004cf0:	2600      	movs	r6, #0
 8004cf2:	4d0a      	ldr	r5, [pc, #40]	; (8004d1c <__libc_init_array+0x40>)
 8004cf4:	4c0a      	ldr	r4, [pc, #40]	; (8004d20 <__libc_init_array+0x44>)
 8004cf6:	1b64      	subs	r4, r4, r5
 8004cf8:	10a4      	asrs	r4, r4, #2
 8004cfa:	42a6      	cmp	r6, r4
 8004cfc:	d105      	bne.n	8004d0a <__libc_init_array+0x2e>
 8004cfe:	bd70      	pop	{r4, r5, r6, pc}
 8004d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d04:	4798      	blx	r3
 8004d06:	3601      	adds	r6, #1
 8004d08:	e7ee      	b.n	8004ce8 <__libc_init_array+0xc>
 8004d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d0e:	4798      	blx	r3
 8004d10:	3601      	adds	r6, #1
 8004d12:	e7f2      	b.n	8004cfa <__libc_init_array+0x1e>
 8004d14:	08008988 	.word	0x08008988
 8004d18:	08008988 	.word	0x08008988
 8004d1c:	08008988 	.word	0x08008988
 8004d20:	0800898c 	.word	0x0800898c

08004d24 <__retarget_lock_init_recursive>:
 8004d24:	4770      	bx	lr

08004d26 <__retarget_lock_acquire_recursive>:
 8004d26:	4770      	bx	lr

08004d28 <__retarget_lock_release_recursive>:
 8004d28:	4770      	bx	lr

08004d2a <memchr>:
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	b510      	push	{r4, lr}
 8004d2e:	b2c9      	uxtb	r1, r1
 8004d30:	4402      	add	r2, r0
 8004d32:	4293      	cmp	r3, r2
 8004d34:	4618      	mov	r0, r3
 8004d36:	d101      	bne.n	8004d3c <memchr+0x12>
 8004d38:	2000      	movs	r0, #0
 8004d3a:	e003      	b.n	8004d44 <memchr+0x1a>
 8004d3c:	7804      	ldrb	r4, [r0, #0]
 8004d3e:	3301      	adds	r3, #1
 8004d40:	428c      	cmp	r4, r1
 8004d42:	d1f6      	bne.n	8004d32 <memchr+0x8>
 8004d44:	bd10      	pop	{r4, pc}
	...

08004d48 <nanf>:
 8004d48:	4800      	ldr	r0, [pc, #0]	; (8004d4c <nanf+0x4>)
 8004d4a:	4770      	bx	lr
 8004d4c:	7fc00000 	.word	0x7fc00000

08004d50 <quorem>:
 8004d50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d54:	6903      	ldr	r3, [r0, #16]
 8004d56:	690c      	ldr	r4, [r1, #16]
 8004d58:	4607      	mov	r7, r0
 8004d5a:	42a3      	cmp	r3, r4
 8004d5c:	db7f      	blt.n	8004e5e <quorem+0x10e>
 8004d5e:	3c01      	subs	r4, #1
 8004d60:	f100 0514 	add.w	r5, r0, #20
 8004d64:	f101 0814 	add.w	r8, r1, #20
 8004d68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d6c:	9301      	str	r3, [sp, #4]
 8004d6e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004d72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d76:	3301      	adds	r3, #1
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d7e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004d82:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d86:	d331      	bcc.n	8004dec <quorem+0x9c>
 8004d88:	f04f 0e00 	mov.w	lr, #0
 8004d8c:	4640      	mov	r0, r8
 8004d8e:	46ac      	mov	ip, r5
 8004d90:	46f2      	mov	sl, lr
 8004d92:	f850 2b04 	ldr.w	r2, [r0], #4
 8004d96:	b293      	uxth	r3, r2
 8004d98:	fb06 e303 	mla	r3, r6, r3, lr
 8004d9c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004da0:	0c1a      	lsrs	r2, r3, #16
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	fb06 220e 	mla	r2, r6, lr, r2
 8004da8:	ebaa 0303 	sub.w	r3, sl, r3
 8004dac:	f8dc a000 	ldr.w	sl, [ip]
 8004db0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004db4:	fa1f fa8a 	uxth.w	sl, sl
 8004db8:	4453      	add	r3, sl
 8004dba:	f8dc a000 	ldr.w	sl, [ip]
 8004dbe:	b292      	uxth	r2, r2
 8004dc0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004dc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004dce:	4581      	cmp	r9, r0
 8004dd0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004dd4:	f84c 3b04 	str.w	r3, [ip], #4
 8004dd8:	d2db      	bcs.n	8004d92 <quorem+0x42>
 8004dda:	f855 300b 	ldr.w	r3, [r5, fp]
 8004dde:	b92b      	cbnz	r3, 8004dec <quorem+0x9c>
 8004de0:	9b01      	ldr	r3, [sp, #4]
 8004de2:	3b04      	subs	r3, #4
 8004de4:	429d      	cmp	r5, r3
 8004de6:	461a      	mov	r2, r3
 8004de8:	d32d      	bcc.n	8004e46 <quorem+0xf6>
 8004dea:	613c      	str	r4, [r7, #16]
 8004dec:	4638      	mov	r0, r7
 8004dee:	f001 f9df 	bl	80061b0 <__mcmp>
 8004df2:	2800      	cmp	r0, #0
 8004df4:	db23      	blt.n	8004e3e <quorem+0xee>
 8004df6:	4629      	mov	r1, r5
 8004df8:	2000      	movs	r0, #0
 8004dfa:	3601      	adds	r6, #1
 8004dfc:	f858 2b04 	ldr.w	r2, [r8], #4
 8004e00:	f8d1 c000 	ldr.w	ip, [r1]
 8004e04:	b293      	uxth	r3, r2
 8004e06:	1ac3      	subs	r3, r0, r3
 8004e08:	0c12      	lsrs	r2, r2, #16
 8004e0a:	fa1f f08c 	uxth.w	r0, ip
 8004e0e:	4403      	add	r3, r0
 8004e10:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004e14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e1e:	45c1      	cmp	r9, r8
 8004e20:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004e24:	f841 3b04 	str.w	r3, [r1], #4
 8004e28:	d2e8      	bcs.n	8004dfc <quorem+0xac>
 8004e2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e32:	b922      	cbnz	r2, 8004e3e <quorem+0xee>
 8004e34:	3b04      	subs	r3, #4
 8004e36:	429d      	cmp	r5, r3
 8004e38:	461a      	mov	r2, r3
 8004e3a:	d30a      	bcc.n	8004e52 <quorem+0x102>
 8004e3c:	613c      	str	r4, [r7, #16]
 8004e3e:	4630      	mov	r0, r6
 8004e40:	b003      	add	sp, #12
 8004e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e46:	6812      	ldr	r2, [r2, #0]
 8004e48:	3b04      	subs	r3, #4
 8004e4a:	2a00      	cmp	r2, #0
 8004e4c:	d1cd      	bne.n	8004dea <quorem+0x9a>
 8004e4e:	3c01      	subs	r4, #1
 8004e50:	e7c8      	b.n	8004de4 <quorem+0x94>
 8004e52:	6812      	ldr	r2, [r2, #0]
 8004e54:	3b04      	subs	r3, #4
 8004e56:	2a00      	cmp	r2, #0
 8004e58:	d1f0      	bne.n	8004e3c <quorem+0xec>
 8004e5a:	3c01      	subs	r4, #1
 8004e5c:	e7eb      	b.n	8004e36 <quorem+0xe6>
 8004e5e:	2000      	movs	r0, #0
 8004e60:	e7ee      	b.n	8004e40 <quorem+0xf0>
 8004e62:	0000      	movs	r0, r0
 8004e64:	0000      	movs	r0, r0
	...

08004e68 <_dtoa_r>:
 8004e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e6c:	4616      	mov	r6, r2
 8004e6e:	461f      	mov	r7, r3
 8004e70:	69c4      	ldr	r4, [r0, #28]
 8004e72:	b099      	sub	sp, #100	; 0x64
 8004e74:	4605      	mov	r5, r0
 8004e76:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004e7a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004e7e:	b974      	cbnz	r4, 8004e9e <_dtoa_r+0x36>
 8004e80:	2010      	movs	r0, #16
 8004e82:	f000 fe1d 	bl	8005ac0 <malloc>
 8004e86:	4602      	mov	r2, r0
 8004e88:	61e8      	str	r0, [r5, #28]
 8004e8a:	b920      	cbnz	r0, 8004e96 <_dtoa_r+0x2e>
 8004e8c:	21ef      	movs	r1, #239	; 0xef
 8004e8e:	4bac      	ldr	r3, [pc, #688]	; (8005140 <_dtoa_r+0x2d8>)
 8004e90:	48ac      	ldr	r0, [pc, #688]	; (8005144 <_dtoa_r+0x2dc>)
 8004e92:	f002 fc55 	bl	8007740 <__assert_func>
 8004e96:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004e9a:	6004      	str	r4, [r0, #0]
 8004e9c:	60c4      	str	r4, [r0, #12]
 8004e9e:	69eb      	ldr	r3, [r5, #28]
 8004ea0:	6819      	ldr	r1, [r3, #0]
 8004ea2:	b151      	cbz	r1, 8004eba <_dtoa_r+0x52>
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	4093      	lsls	r3, r2
 8004eaa:	604a      	str	r2, [r1, #4]
 8004eac:	608b      	str	r3, [r1, #8]
 8004eae:	4628      	mov	r0, r5
 8004eb0:	f000 fefa 	bl	8005ca8 <_Bfree>
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	69eb      	ldr	r3, [r5, #28]
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	1e3b      	subs	r3, r7, #0
 8004ebc:	bfaf      	iteee	ge
 8004ebe:	2300      	movge	r3, #0
 8004ec0:	2201      	movlt	r2, #1
 8004ec2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004ec6:	9305      	strlt	r3, [sp, #20]
 8004ec8:	bfa8      	it	ge
 8004eca:	f8c8 3000 	strge.w	r3, [r8]
 8004ece:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004ed2:	4b9d      	ldr	r3, [pc, #628]	; (8005148 <_dtoa_r+0x2e0>)
 8004ed4:	bfb8      	it	lt
 8004ed6:	f8c8 2000 	strlt.w	r2, [r8]
 8004eda:	ea33 0309 	bics.w	r3, r3, r9
 8004ede:	d119      	bne.n	8004f14 <_dtoa_r+0xac>
 8004ee0:	f242 730f 	movw	r3, #9999	; 0x270f
 8004ee4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004ee6:	6013      	str	r3, [r2, #0]
 8004ee8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004eec:	4333      	orrs	r3, r6
 8004eee:	f000 8589 	beq.w	8005a04 <_dtoa_r+0xb9c>
 8004ef2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004ef4:	b953      	cbnz	r3, 8004f0c <_dtoa_r+0xa4>
 8004ef6:	4b95      	ldr	r3, [pc, #596]	; (800514c <_dtoa_r+0x2e4>)
 8004ef8:	e023      	b.n	8004f42 <_dtoa_r+0xda>
 8004efa:	4b95      	ldr	r3, [pc, #596]	; (8005150 <_dtoa_r+0x2e8>)
 8004efc:	9303      	str	r3, [sp, #12]
 8004efe:	3308      	adds	r3, #8
 8004f00:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	9803      	ldr	r0, [sp, #12]
 8004f06:	b019      	add	sp, #100	; 0x64
 8004f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f0c:	4b8f      	ldr	r3, [pc, #572]	; (800514c <_dtoa_r+0x2e4>)
 8004f0e:	9303      	str	r3, [sp, #12]
 8004f10:	3303      	adds	r3, #3
 8004f12:	e7f5      	b.n	8004f00 <_dtoa_r+0x98>
 8004f14:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004f18:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004f1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f20:	2200      	movs	r2, #0
 8004f22:	2300      	movs	r3, #0
 8004f24:	f7fb fd40 	bl	80009a8 <__aeabi_dcmpeq>
 8004f28:	4680      	mov	r8, r0
 8004f2a:	b160      	cbz	r0, 8004f46 <_dtoa_r+0xde>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004f30:	6013      	str	r3, [r2, #0]
 8004f32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 8562 	beq.w	80059fe <_dtoa_r+0xb96>
 8004f3a:	4b86      	ldr	r3, [pc, #536]	; (8005154 <_dtoa_r+0x2ec>)
 8004f3c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004f3e:	6013      	str	r3, [r2, #0]
 8004f40:	3b01      	subs	r3, #1
 8004f42:	9303      	str	r3, [sp, #12]
 8004f44:	e7de      	b.n	8004f04 <_dtoa_r+0x9c>
 8004f46:	ab16      	add	r3, sp, #88	; 0x58
 8004f48:	9301      	str	r3, [sp, #4]
 8004f4a:	ab17      	add	r3, sp, #92	; 0x5c
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	4628      	mov	r0, r5
 8004f50:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004f54:	f001 fa3c 	bl	80063d0 <__d2b>
 8004f58:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004f5c:	4682      	mov	sl, r0
 8004f5e:	2c00      	cmp	r4, #0
 8004f60:	d07e      	beq.n	8005060 <_dtoa_r+0x1f8>
 8004f62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f68:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004f6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f70:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004f74:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004f78:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	2200      	movs	r2, #0
 8004f80:	4b75      	ldr	r3, [pc, #468]	; (8005158 <_dtoa_r+0x2f0>)
 8004f82:	f7fb f8f1 	bl	8000168 <__aeabi_dsub>
 8004f86:	a368      	add	r3, pc, #416	; (adr r3, 8005128 <_dtoa_r+0x2c0>)
 8004f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8c:	f7fb faa4 	bl	80004d8 <__aeabi_dmul>
 8004f90:	a367      	add	r3, pc, #412	; (adr r3, 8005130 <_dtoa_r+0x2c8>)
 8004f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f96:	f7fb f8e9 	bl	800016c <__adddf3>
 8004f9a:	4606      	mov	r6, r0
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	460f      	mov	r7, r1
 8004fa0:	f7fb fa30 	bl	8000404 <__aeabi_i2d>
 8004fa4:	a364      	add	r3, pc, #400	; (adr r3, 8005138 <_dtoa_r+0x2d0>)
 8004fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004faa:	f7fb fa95 	bl	80004d8 <__aeabi_dmul>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4630      	mov	r0, r6
 8004fb4:	4639      	mov	r1, r7
 8004fb6:	f7fb f8d9 	bl	800016c <__adddf3>
 8004fba:	4606      	mov	r6, r0
 8004fbc:	460f      	mov	r7, r1
 8004fbe:	f7fb fd3b 	bl	8000a38 <__aeabi_d2iz>
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	4683      	mov	fp, r0
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	4630      	mov	r0, r6
 8004fca:	4639      	mov	r1, r7
 8004fcc:	f7fb fcf6 	bl	80009bc <__aeabi_dcmplt>
 8004fd0:	b148      	cbz	r0, 8004fe6 <_dtoa_r+0x17e>
 8004fd2:	4658      	mov	r0, fp
 8004fd4:	f7fb fa16 	bl	8000404 <__aeabi_i2d>
 8004fd8:	4632      	mov	r2, r6
 8004fda:	463b      	mov	r3, r7
 8004fdc:	f7fb fce4 	bl	80009a8 <__aeabi_dcmpeq>
 8004fe0:	b908      	cbnz	r0, 8004fe6 <_dtoa_r+0x17e>
 8004fe2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004fe6:	f1bb 0f16 	cmp.w	fp, #22
 8004fea:	d857      	bhi.n	800509c <_dtoa_r+0x234>
 8004fec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ff0:	4b5a      	ldr	r3, [pc, #360]	; (800515c <_dtoa_r+0x2f4>)
 8004ff2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffa:	f7fb fcdf 	bl	80009bc <__aeabi_dcmplt>
 8004ffe:	2800      	cmp	r0, #0
 8005000:	d04e      	beq.n	80050a0 <_dtoa_r+0x238>
 8005002:	2300      	movs	r3, #0
 8005004:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005008:	930f      	str	r3, [sp, #60]	; 0x3c
 800500a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800500c:	1b1b      	subs	r3, r3, r4
 800500e:	1e5a      	subs	r2, r3, #1
 8005010:	bf46      	itte	mi
 8005012:	f1c3 0901 	rsbmi	r9, r3, #1
 8005016:	2300      	movmi	r3, #0
 8005018:	f04f 0900 	movpl.w	r9, #0
 800501c:	9209      	str	r2, [sp, #36]	; 0x24
 800501e:	bf48      	it	mi
 8005020:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005022:	f1bb 0f00 	cmp.w	fp, #0
 8005026:	db3d      	blt.n	80050a4 <_dtoa_r+0x23c>
 8005028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800502a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800502e:	445b      	add	r3, fp
 8005030:	9309      	str	r3, [sp, #36]	; 0x24
 8005032:	2300      	movs	r3, #0
 8005034:	930a      	str	r3, [sp, #40]	; 0x28
 8005036:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005038:	2b09      	cmp	r3, #9
 800503a:	d867      	bhi.n	800510c <_dtoa_r+0x2a4>
 800503c:	2b05      	cmp	r3, #5
 800503e:	bfc4      	itt	gt
 8005040:	3b04      	subgt	r3, #4
 8005042:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005044:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005046:	bfc8      	it	gt
 8005048:	2400      	movgt	r4, #0
 800504a:	f1a3 0302 	sub.w	r3, r3, #2
 800504e:	bfd8      	it	le
 8005050:	2401      	movle	r4, #1
 8005052:	2b03      	cmp	r3, #3
 8005054:	f200 8086 	bhi.w	8005164 <_dtoa_r+0x2fc>
 8005058:	e8df f003 	tbb	[pc, r3]
 800505c:	5637392c 	.word	0x5637392c
 8005060:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005064:	441c      	add	r4, r3
 8005066:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800506a:	2b20      	cmp	r3, #32
 800506c:	bfc1      	itttt	gt
 800506e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005072:	fa09 f903 	lslgt.w	r9, r9, r3
 8005076:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800507a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800507e:	bfd6      	itet	le
 8005080:	f1c3 0320 	rsble	r3, r3, #32
 8005084:	ea49 0003 	orrgt.w	r0, r9, r3
 8005088:	fa06 f003 	lslle.w	r0, r6, r3
 800508c:	f7fb f9aa 	bl	80003e4 <__aeabi_ui2d>
 8005090:	2201      	movs	r2, #1
 8005092:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005096:	3c01      	subs	r4, #1
 8005098:	9213      	str	r2, [sp, #76]	; 0x4c
 800509a:	e76f      	b.n	8004f7c <_dtoa_r+0x114>
 800509c:	2301      	movs	r3, #1
 800509e:	e7b3      	b.n	8005008 <_dtoa_r+0x1a0>
 80050a0:	900f      	str	r0, [sp, #60]	; 0x3c
 80050a2:	e7b2      	b.n	800500a <_dtoa_r+0x1a2>
 80050a4:	f1cb 0300 	rsb	r3, fp, #0
 80050a8:	930a      	str	r3, [sp, #40]	; 0x28
 80050aa:	2300      	movs	r3, #0
 80050ac:	eba9 090b 	sub.w	r9, r9, fp
 80050b0:	930e      	str	r3, [sp, #56]	; 0x38
 80050b2:	e7c0      	b.n	8005036 <_dtoa_r+0x1ce>
 80050b4:	2300      	movs	r3, #0
 80050b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80050b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	dc55      	bgt.n	800516a <_dtoa_r+0x302>
 80050be:	2301      	movs	r3, #1
 80050c0:	461a      	mov	r2, r3
 80050c2:	9306      	str	r3, [sp, #24]
 80050c4:	9308      	str	r3, [sp, #32]
 80050c6:	9223      	str	r2, [sp, #140]	; 0x8c
 80050c8:	e00b      	b.n	80050e2 <_dtoa_r+0x27a>
 80050ca:	2301      	movs	r3, #1
 80050cc:	e7f3      	b.n	80050b6 <_dtoa_r+0x24e>
 80050ce:	2300      	movs	r3, #0
 80050d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80050d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80050d4:	445b      	add	r3, fp
 80050d6:	9306      	str	r3, [sp, #24]
 80050d8:	3301      	adds	r3, #1
 80050da:	2b01      	cmp	r3, #1
 80050dc:	9308      	str	r3, [sp, #32]
 80050de:	bfb8      	it	lt
 80050e0:	2301      	movlt	r3, #1
 80050e2:	2100      	movs	r1, #0
 80050e4:	2204      	movs	r2, #4
 80050e6:	69e8      	ldr	r0, [r5, #28]
 80050e8:	f102 0614 	add.w	r6, r2, #20
 80050ec:	429e      	cmp	r6, r3
 80050ee:	d940      	bls.n	8005172 <_dtoa_r+0x30a>
 80050f0:	6041      	str	r1, [r0, #4]
 80050f2:	4628      	mov	r0, r5
 80050f4:	f000 fd98 	bl	8005c28 <_Balloc>
 80050f8:	9003      	str	r0, [sp, #12]
 80050fa:	2800      	cmp	r0, #0
 80050fc:	d13c      	bne.n	8005178 <_dtoa_r+0x310>
 80050fe:	4602      	mov	r2, r0
 8005100:	f240 11af 	movw	r1, #431	; 0x1af
 8005104:	4b16      	ldr	r3, [pc, #88]	; (8005160 <_dtoa_r+0x2f8>)
 8005106:	e6c3      	b.n	8004e90 <_dtoa_r+0x28>
 8005108:	2301      	movs	r3, #1
 800510a:	e7e1      	b.n	80050d0 <_dtoa_r+0x268>
 800510c:	2401      	movs	r4, #1
 800510e:	2300      	movs	r3, #0
 8005110:	940b      	str	r4, [sp, #44]	; 0x2c
 8005112:	9322      	str	r3, [sp, #136]	; 0x88
 8005114:	f04f 33ff 	mov.w	r3, #4294967295
 8005118:	2200      	movs	r2, #0
 800511a:	9306      	str	r3, [sp, #24]
 800511c:	9308      	str	r3, [sp, #32]
 800511e:	2312      	movs	r3, #18
 8005120:	e7d1      	b.n	80050c6 <_dtoa_r+0x25e>
 8005122:	bf00      	nop
 8005124:	f3af 8000 	nop.w
 8005128:	636f4361 	.word	0x636f4361
 800512c:	3fd287a7 	.word	0x3fd287a7
 8005130:	8b60c8b3 	.word	0x8b60c8b3
 8005134:	3fc68a28 	.word	0x3fc68a28
 8005138:	509f79fb 	.word	0x509f79fb
 800513c:	3fd34413 	.word	0x3fd34413
 8005140:	08008598 	.word	0x08008598
 8005144:	080085af 	.word	0x080085af
 8005148:	7ff00000 	.word	0x7ff00000
 800514c:	08008594 	.word	0x08008594
 8005150:	0800858b 	.word	0x0800858b
 8005154:	08008563 	.word	0x08008563
 8005158:	3ff80000 	.word	0x3ff80000
 800515c:	080086a0 	.word	0x080086a0
 8005160:	08008607 	.word	0x08008607
 8005164:	2301      	movs	r3, #1
 8005166:	930b      	str	r3, [sp, #44]	; 0x2c
 8005168:	e7d4      	b.n	8005114 <_dtoa_r+0x2ac>
 800516a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800516c:	9306      	str	r3, [sp, #24]
 800516e:	9308      	str	r3, [sp, #32]
 8005170:	e7b7      	b.n	80050e2 <_dtoa_r+0x27a>
 8005172:	3101      	adds	r1, #1
 8005174:	0052      	lsls	r2, r2, #1
 8005176:	e7b7      	b.n	80050e8 <_dtoa_r+0x280>
 8005178:	69eb      	ldr	r3, [r5, #28]
 800517a:	9a03      	ldr	r2, [sp, #12]
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	9b08      	ldr	r3, [sp, #32]
 8005180:	2b0e      	cmp	r3, #14
 8005182:	f200 80a8 	bhi.w	80052d6 <_dtoa_r+0x46e>
 8005186:	2c00      	cmp	r4, #0
 8005188:	f000 80a5 	beq.w	80052d6 <_dtoa_r+0x46e>
 800518c:	f1bb 0f00 	cmp.w	fp, #0
 8005190:	dd34      	ble.n	80051fc <_dtoa_r+0x394>
 8005192:	4b9a      	ldr	r3, [pc, #616]	; (80053fc <_dtoa_r+0x594>)
 8005194:	f00b 020f 	and.w	r2, fp, #15
 8005198:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800519c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80051a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80051a4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80051a8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80051ac:	d016      	beq.n	80051dc <_dtoa_r+0x374>
 80051ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051b2:	4b93      	ldr	r3, [pc, #588]	; (8005400 <_dtoa_r+0x598>)
 80051b4:	2703      	movs	r7, #3
 80051b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051ba:	f7fb fab7 	bl	800072c <__aeabi_ddiv>
 80051be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051c2:	f004 040f 	and.w	r4, r4, #15
 80051c6:	4e8e      	ldr	r6, [pc, #568]	; (8005400 <_dtoa_r+0x598>)
 80051c8:	b954      	cbnz	r4, 80051e0 <_dtoa_r+0x378>
 80051ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051d2:	f7fb faab 	bl	800072c <__aeabi_ddiv>
 80051d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051da:	e029      	b.n	8005230 <_dtoa_r+0x3c8>
 80051dc:	2702      	movs	r7, #2
 80051de:	e7f2      	b.n	80051c6 <_dtoa_r+0x35e>
 80051e0:	07e1      	lsls	r1, r4, #31
 80051e2:	d508      	bpl.n	80051f6 <_dtoa_r+0x38e>
 80051e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80051e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80051ec:	f7fb f974 	bl	80004d8 <__aeabi_dmul>
 80051f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80051f4:	3701      	adds	r7, #1
 80051f6:	1064      	asrs	r4, r4, #1
 80051f8:	3608      	adds	r6, #8
 80051fa:	e7e5      	b.n	80051c8 <_dtoa_r+0x360>
 80051fc:	f000 80a5 	beq.w	800534a <_dtoa_r+0x4e2>
 8005200:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005204:	f1cb 0400 	rsb	r4, fp, #0
 8005208:	4b7c      	ldr	r3, [pc, #496]	; (80053fc <_dtoa_r+0x594>)
 800520a:	f004 020f 	and.w	r2, r4, #15
 800520e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005216:	f7fb f95f 	bl	80004d8 <__aeabi_dmul>
 800521a:	2702      	movs	r7, #2
 800521c:	2300      	movs	r3, #0
 800521e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005222:	4e77      	ldr	r6, [pc, #476]	; (8005400 <_dtoa_r+0x598>)
 8005224:	1124      	asrs	r4, r4, #4
 8005226:	2c00      	cmp	r4, #0
 8005228:	f040 8084 	bne.w	8005334 <_dtoa_r+0x4cc>
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1d2      	bne.n	80051d6 <_dtoa_r+0x36e>
 8005230:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005234:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005238:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 8087 	beq.w	800534e <_dtoa_r+0x4e6>
 8005240:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005244:	2200      	movs	r2, #0
 8005246:	4b6f      	ldr	r3, [pc, #444]	; (8005404 <_dtoa_r+0x59c>)
 8005248:	f7fb fbb8 	bl	80009bc <__aeabi_dcmplt>
 800524c:	2800      	cmp	r0, #0
 800524e:	d07e      	beq.n	800534e <_dtoa_r+0x4e6>
 8005250:	9b08      	ldr	r3, [sp, #32]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d07b      	beq.n	800534e <_dtoa_r+0x4e6>
 8005256:	9b06      	ldr	r3, [sp, #24]
 8005258:	2b00      	cmp	r3, #0
 800525a:	dd38      	ble.n	80052ce <_dtoa_r+0x466>
 800525c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005260:	2200      	movs	r2, #0
 8005262:	4b69      	ldr	r3, [pc, #420]	; (8005408 <_dtoa_r+0x5a0>)
 8005264:	f7fb f938 	bl	80004d8 <__aeabi_dmul>
 8005268:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800526c:	9c06      	ldr	r4, [sp, #24]
 800526e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005272:	3701      	adds	r7, #1
 8005274:	4638      	mov	r0, r7
 8005276:	f7fb f8c5 	bl	8000404 <__aeabi_i2d>
 800527a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800527e:	f7fb f92b 	bl	80004d8 <__aeabi_dmul>
 8005282:	2200      	movs	r2, #0
 8005284:	4b61      	ldr	r3, [pc, #388]	; (800540c <_dtoa_r+0x5a4>)
 8005286:	f7fa ff71 	bl	800016c <__adddf3>
 800528a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800528e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005292:	9611      	str	r6, [sp, #68]	; 0x44
 8005294:	2c00      	cmp	r4, #0
 8005296:	d15d      	bne.n	8005354 <_dtoa_r+0x4ec>
 8005298:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800529c:	2200      	movs	r2, #0
 800529e:	4b5c      	ldr	r3, [pc, #368]	; (8005410 <_dtoa_r+0x5a8>)
 80052a0:	f7fa ff62 	bl	8000168 <__aeabi_dsub>
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80052ac:	4633      	mov	r3, r6
 80052ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80052b0:	f7fb fba2 	bl	80009f8 <__aeabi_dcmpgt>
 80052b4:	2800      	cmp	r0, #0
 80052b6:	f040 8295 	bne.w	80057e4 <_dtoa_r+0x97c>
 80052ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80052c0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80052c4:	f7fb fb7a 	bl	80009bc <__aeabi_dcmplt>
 80052c8:	2800      	cmp	r0, #0
 80052ca:	f040 8289 	bne.w	80057e0 <_dtoa_r+0x978>
 80052ce:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80052d2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80052d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f2c0 8151 	blt.w	8005580 <_dtoa_r+0x718>
 80052de:	f1bb 0f0e 	cmp.w	fp, #14
 80052e2:	f300 814d 	bgt.w	8005580 <_dtoa_r+0x718>
 80052e6:	4b45      	ldr	r3, [pc, #276]	; (80053fc <_dtoa_r+0x594>)
 80052e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80052ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052f0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80052f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f280 80da 	bge.w	80054b0 <_dtoa_r+0x648>
 80052fc:	9b08      	ldr	r3, [sp, #32]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f300 80d6 	bgt.w	80054b0 <_dtoa_r+0x648>
 8005304:	f040 826b 	bne.w	80057de <_dtoa_r+0x976>
 8005308:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800530c:	2200      	movs	r2, #0
 800530e:	4b40      	ldr	r3, [pc, #256]	; (8005410 <_dtoa_r+0x5a8>)
 8005310:	f7fb f8e2 	bl	80004d8 <__aeabi_dmul>
 8005314:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005318:	f7fb fb64 	bl	80009e4 <__aeabi_dcmpge>
 800531c:	9c08      	ldr	r4, [sp, #32]
 800531e:	4626      	mov	r6, r4
 8005320:	2800      	cmp	r0, #0
 8005322:	f040 8241 	bne.w	80057a8 <_dtoa_r+0x940>
 8005326:	2331      	movs	r3, #49	; 0x31
 8005328:	9f03      	ldr	r7, [sp, #12]
 800532a:	f10b 0b01 	add.w	fp, fp, #1
 800532e:	f807 3b01 	strb.w	r3, [r7], #1
 8005332:	e23d      	b.n	80057b0 <_dtoa_r+0x948>
 8005334:	07e2      	lsls	r2, r4, #31
 8005336:	d505      	bpl.n	8005344 <_dtoa_r+0x4dc>
 8005338:	e9d6 2300 	ldrd	r2, r3, [r6]
 800533c:	f7fb f8cc 	bl	80004d8 <__aeabi_dmul>
 8005340:	2301      	movs	r3, #1
 8005342:	3701      	adds	r7, #1
 8005344:	1064      	asrs	r4, r4, #1
 8005346:	3608      	adds	r6, #8
 8005348:	e76d      	b.n	8005226 <_dtoa_r+0x3be>
 800534a:	2702      	movs	r7, #2
 800534c:	e770      	b.n	8005230 <_dtoa_r+0x3c8>
 800534e:	46d8      	mov	r8, fp
 8005350:	9c08      	ldr	r4, [sp, #32]
 8005352:	e78f      	b.n	8005274 <_dtoa_r+0x40c>
 8005354:	9903      	ldr	r1, [sp, #12]
 8005356:	4b29      	ldr	r3, [pc, #164]	; (80053fc <_dtoa_r+0x594>)
 8005358:	4421      	add	r1, r4
 800535a:	9112      	str	r1, [sp, #72]	; 0x48
 800535c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800535e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005362:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005366:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800536a:	2900      	cmp	r1, #0
 800536c:	d054      	beq.n	8005418 <_dtoa_r+0x5b0>
 800536e:	2000      	movs	r0, #0
 8005370:	4928      	ldr	r1, [pc, #160]	; (8005414 <_dtoa_r+0x5ac>)
 8005372:	f7fb f9db 	bl	800072c <__aeabi_ddiv>
 8005376:	463b      	mov	r3, r7
 8005378:	4632      	mov	r2, r6
 800537a:	f7fa fef5 	bl	8000168 <__aeabi_dsub>
 800537e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005382:	9f03      	ldr	r7, [sp, #12]
 8005384:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005388:	f7fb fb56 	bl	8000a38 <__aeabi_d2iz>
 800538c:	4604      	mov	r4, r0
 800538e:	f7fb f839 	bl	8000404 <__aeabi_i2d>
 8005392:	4602      	mov	r2, r0
 8005394:	460b      	mov	r3, r1
 8005396:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800539a:	f7fa fee5 	bl	8000168 <__aeabi_dsub>
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	3430      	adds	r4, #48	; 0x30
 80053a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80053a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80053ac:	f807 4b01 	strb.w	r4, [r7], #1
 80053b0:	f7fb fb04 	bl	80009bc <__aeabi_dcmplt>
 80053b4:	2800      	cmp	r0, #0
 80053b6:	d173      	bne.n	80054a0 <_dtoa_r+0x638>
 80053b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053bc:	2000      	movs	r0, #0
 80053be:	4911      	ldr	r1, [pc, #68]	; (8005404 <_dtoa_r+0x59c>)
 80053c0:	f7fa fed2 	bl	8000168 <__aeabi_dsub>
 80053c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80053c8:	f7fb faf8 	bl	80009bc <__aeabi_dcmplt>
 80053cc:	2800      	cmp	r0, #0
 80053ce:	f040 80b6 	bne.w	800553e <_dtoa_r+0x6d6>
 80053d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80053d4:	429f      	cmp	r7, r3
 80053d6:	f43f af7a 	beq.w	80052ce <_dtoa_r+0x466>
 80053da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80053de:	2200      	movs	r2, #0
 80053e0:	4b09      	ldr	r3, [pc, #36]	; (8005408 <_dtoa_r+0x5a0>)
 80053e2:	f7fb f879 	bl	80004d8 <__aeabi_dmul>
 80053e6:	2200      	movs	r2, #0
 80053e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80053ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053f0:	4b05      	ldr	r3, [pc, #20]	; (8005408 <_dtoa_r+0x5a0>)
 80053f2:	f7fb f871 	bl	80004d8 <__aeabi_dmul>
 80053f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053fa:	e7c3      	b.n	8005384 <_dtoa_r+0x51c>
 80053fc:	080086a0 	.word	0x080086a0
 8005400:	08008678 	.word	0x08008678
 8005404:	3ff00000 	.word	0x3ff00000
 8005408:	40240000 	.word	0x40240000
 800540c:	401c0000 	.word	0x401c0000
 8005410:	40140000 	.word	0x40140000
 8005414:	3fe00000 	.word	0x3fe00000
 8005418:	4630      	mov	r0, r6
 800541a:	4639      	mov	r1, r7
 800541c:	f7fb f85c 	bl	80004d8 <__aeabi_dmul>
 8005420:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005422:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005426:	9c03      	ldr	r4, [sp, #12]
 8005428:	9314      	str	r3, [sp, #80]	; 0x50
 800542a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800542e:	f7fb fb03 	bl	8000a38 <__aeabi_d2iz>
 8005432:	9015      	str	r0, [sp, #84]	; 0x54
 8005434:	f7fa ffe6 	bl	8000404 <__aeabi_i2d>
 8005438:	4602      	mov	r2, r0
 800543a:	460b      	mov	r3, r1
 800543c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005440:	f7fa fe92 	bl	8000168 <__aeabi_dsub>
 8005444:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005446:	4606      	mov	r6, r0
 8005448:	3330      	adds	r3, #48	; 0x30
 800544a:	f804 3b01 	strb.w	r3, [r4], #1
 800544e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005450:	460f      	mov	r7, r1
 8005452:	429c      	cmp	r4, r3
 8005454:	f04f 0200 	mov.w	r2, #0
 8005458:	d124      	bne.n	80054a4 <_dtoa_r+0x63c>
 800545a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800545e:	4baf      	ldr	r3, [pc, #700]	; (800571c <_dtoa_r+0x8b4>)
 8005460:	f7fa fe84 	bl	800016c <__adddf3>
 8005464:	4602      	mov	r2, r0
 8005466:	460b      	mov	r3, r1
 8005468:	4630      	mov	r0, r6
 800546a:	4639      	mov	r1, r7
 800546c:	f7fb fac4 	bl	80009f8 <__aeabi_dcmpgt>
 8005470:	2800      	cmp	r0, #0
 8005472:	d163      	bne.n	800553c <_dtoa_r+0x6d4>
 8005474:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005478:	2000      	movs	r0, #0
 800547a:	49a8      	ldr	r1, [pc, #672]	; (800571c <_dtoa_r+0x8b4>)
 800547c:	f7fa fe74 	bl	8000168 <__aeabi_dsub>
 8005480:	4602      	mov	r2, r0
 8005482:	460b      	mov	r3, r1
 8005484:	4630      	mov	r0, r6
 8005486:	4639      	mov	r1, r7
 8005488:	f7fb fa98 	bl	80009bc <__aeabi_dcmplt>
 800548c:	2800      	cmp	r0, #0
 800548e:	f43f af1e 	beq.w	80052ce <_dtoa_r+0x466>
 8005492:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005494:	1e7b      	subs	r3, r7, #1
 8005496:	9314      	str	r3, [sp, #80]	; 0x50
 8005498:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800549c:	2b30      	cmp	r3, #48	; 0x30
 800549e:	d0f8      	beq.n	8005492 <_dtoa_r+0x62a>
 80054a0:	46c3      	mov	fp, r8
 80054a2:	e03b      	b.n	800551c <_dtoa_r+0x6b4>
 80054a4:	4b9e      	ldr	r3, [pc, #632]	; (8005720 <_dtoa_r+0x8b8>)
 80054a6:	f7fb f817 	bl	80004d8 <__aeabi_dmul>
 80054aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054ae:	e7bc      	b.n	800542a <_dtoa_r+0x5c2>
 80054b0:	9f03      	ldr	r7, [sp, #12]
 80054b2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80054b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054ba:	4640      	mov	r0, r8
 80054bc:	4649      	mov	r1, r9
 80054be:	f7fb f935 	bl	800072c <__aeabi_ddiv>
 80054c2:	f7fb fab9 	bl	8000a38 <__aeabi_d2iz>
 80054c6:	4604      	mov	r4, r0
 80054c8:	f7fa ff9c 	bl	8000404 <__aeabi_i2d>
 80054cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054d0:	f7fb f802 	bl	80004d8 <__aeabi_dmul>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	4640      	mov	r0, r8
 80054da:	4649      	mov	r1, r9
 80054dc:	f7fa fe44 	bl	8000168 <__aeabi_dsub>
 80054e0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80054e4:	f807 6b01 	strb.w	r6, [r7], #1
 80054e8:	9e03      	ldr	r6, [sp, #12]
 80054ea:	f8dd c020 	ldr.w	ip, [sp, #32]
 80054ee:	1bbe      	subs	r6, r7, r6
 80054f0:	45b4      	cmp	ip, r6
 80054f2:	4602      	mov	r2, r0
 80054f4:	460b      	mov	r3, r1
 80054f6:	d136      	bne.n	8005566 <_dtoa_r+0x6fe>
 80054f8:	f7fa fe38 	bl	800016c <__adddf3>
 80054fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005500:	4680      	mov	r8, r0
 8005502:	4689      	mov	r9, r1
 8005504:	f7fb fa78 	bl	80009f8 <__aeabi_dcmpgt>
 8005508:	bb58      	cbnz	r0, 8005562 <_dtoa_r+0x6fa>
 800550a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800550e:	4640      	mov	r0, r8
 8005510:	4649      	mov	r1, r9
 8005512:	f7fb fa49 	bl	80009a8 <__aeabi_dcmpeq>
 8005516:	b108      	cbz	r0, 800551c <_dtoa_r+0x6b4>
 8005518:	07e3      	lsls	r3, r4, #31
 800551a:	d422      	bmi.n	8005562 <_dtoa_r+0x6fa>
 800551c:	4651      	mov	r1, sl
 800551e:	4628      	mov	r0, r5
 8005520:	f000 fbc2 	bl	8005ca8 <_Bfree>
 8005524:	2300      	movs	r3, #0
 8005526:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005528:	703b      	strb	r3, [r7, #0]
 800552a:	f10b 0301 	add.w	r3, fp, #1
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005532:	2b00      	cmp	r3, #0
 8005534:	f43f ace6 	beq.w	8004f04 <_dtoa_r+0x9c>
 8005538:	601f      	str	r7, [r3, #0]
 800553a:	e4e3      	b.n	8004f04 <_dtoa_r+0x9c>
 800553c:	4627      	mov	r7, r4
 800553e:	463b      	mov	r3, r7
 8005540:	461f      	mov	r7, r3
 8005542:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005546:	2a39      	cmp	r2, #57	; 0x39
 8005548:	d107      	bne.n	800555a <_dtoa_r+0x6f2>
 800554a:	9a03      	ldr	r2, [sp, #12]
 800554c:	429a      	cmp	r2, r3
 800554e:	d1f7      	bne.n	8005540 <_dtoa_r+0x6d8>
 8005550:	2230      	movs	r2, #48	; 0x30
 8005552:	9903      	ldr	r1, [sp, #12]
 8005554:	f108 0801 	add.w	r8, r8, #1
 8005558:	700a      	strb	r2, [r1, #0]
 800555a:	781a      	ldrb	r2, [r3, #0]
 800555c:	3201      	adds	r2, #1
 800555e:	701a      	strb	r2, [r3, #0]
 8005560:	e79e      	b.n	80054a0 <_dtoa_r+0x638>
 8005562:	46d8      	mov	r8, fp
 8005564:	e7eb      	b.n	800553e <_dtoa_r+0x6d6>
 8005566:	2200      	movs	r2, #0
 8005568:	4b6d      	ldr	r3, [pc, #436]	; (8005720 <_dtoa_r+0x8b8>)
 800556a:	f7fa ffb5 	bl	80004d8 <__aeabi_dmul>
 800556e:	2200      	movs	r2, #0
 8005570:	2300      	movs	r3, #0
 8005572:	4680      	mov	r8, r0
 8005574:	4689      	mov	r9, r1
 8005576:	f7fb fa17 	bl	80009a8 <__aeabi_dcmpeq>
 800557a:	2800      	cmp	r0, #0
 800557c:	d09b      	beq.n	80054b6 <_dtoa_r+0x64e>
 800557e:	e7cd      	b.n	800551c <_dtoa_r+0x6b4>
 8005580:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005582:	2a00      	cmp	r2, #0
 8005584:	f000 80c4 	beq.w	8005710 <_dtoa_r+0x8a8>
 8005588:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800558a:	2a01      	cmp	r2, #1
 800558c:	f300 80a8 	bgt.w	80056e0 <_dtoa_r+0x878>
 8005590:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005592:	2a00      	cmp	r2, #0
 8005594:	f000 80a0 	beq.w	80056d8 <_dtoa_r+0x870>
 8005598:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800559c:	464f      	mov	r7, r9
 800559e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80055a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055a2:	2101      	movs	r1, #1
 80055a4:	441a      	add	r2, r3
 80055a6:	4628      	mov	r0, r5
 80055a8:	4499      	add	r9, r3
 80055aa:	9209      	str	r2, [sp, #36]	; 0x24
 80055ac:	f000 fc7c 	bl	8005ea8 <__i2b>
 80055b0:	4606      	mov	r6, r0
 80055b2:	b15f      	cbz	r7, 80055cc <_dtoa_r+0x764>
 80055b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	dd08      	ble.n	80055cc <_dtoa_r+0x764>
 80055ba:	42bb      	cmp	r3, r7
 80055bc:	bfa8      	it	ge
 80055be:	463b      	movge	r3, r7
 80055c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055c2:	eba9 0903 	sub.w	r9, r9, r3
 80055c6:	1aff      	subs	r7, r7, r3
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	9309      	str	r3, [sp, #36]	; 0x24
 80055cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055ce:	b1f3      	cbz	r3, 800560e <_dtoa_r+0x7a6>
 80055d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f000 80a0 	beq.w	8005718 <_dtoa_r+0x8b0>
 80055d8:	2c00      	cmp	r4, #0
 80055da:	dd10      	ble.n	80055fe <_dtoa_r+0x796>
 80055dc:	4631      	mov	r1, r6
 80055de:	4622      	mov	r2, r4
 80055e0:	4628      	mov	r0, r5
 80055e2:	f000 fd1f 	bl	8006024 <__pow5mult>
 80055e6:	4652      	mov	r2, sl
 80055e8:	4601      	mov	r1, r0
 80055ea:	4606      	mov	r6, r0
 80055ec:	4628      	mov	r0, r5
 80055ee:	f000 fc71 	bl	8005ed4 <__multiply>
 80055f2:	4680      	mov	r8, r0
 80055f4:	4651      	mov	r1, sl
 80055f6:	4628      	mov	r0, r5
 80055f8:	f000 fb56 	bl	8005ca8 <_Bfree>
 80055fc:	46c2      	mov	sl, r8
 80055fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005600:	1b1a      	subs	r2, r3, r4
 8005602:	d004      	beq.n	800560e <_dtoa_r+0x7a6>
 8005604:	4651      	mov	r1, sl
 8005606:	4628      	mov	r0, r5
 8005608:	f000 fd0c 	bl	8006024 <__pow5mult>
 800560c:	4682      	mov	sl, r0
 800560e:	2101      	movs	r1, #1
 8005610:	4628      	mov	r0, r5
 8005612:	f000 fc49 	bl	8005ea8 <__i2b>
 8005616:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005618:	4604      	mov	r4, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	f340 8082 	ble.w	8005724 <_dtoa_r+0x8bc>
 8005620:	461a      	mov	r2, r3
 8005622:	4601      	mov	r1, r0
 8005624:	4628      	mov	r0, r5
 8005626:	f000 fcfd 	bl	8006024 <__pow5mult>
 800562a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800562c:	4604      	mov	r4, r0
 800562e:	2b01      	cmp	r3, #1
 8005630:	dd7b      	ble.n	800572a <_dtoa_r+0x8c2>
 8005632:	f04f 0800 	mov.w	r8, #0
 8005636:	6923      	ldr	r3, [r4, #16]
 8005638:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800563c:	6918      	ldr	r0, [r3, #16]
 800563e:	f000 fbe5 	bl	8005e0c <__hi0bits>
 8005642:	f1c0 0020 	rsb	r0, r0, #32
 8005646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005648:	4418      	add	r0, r3
 800564a:	f010 001f 	ands.w	r0, r0, #31
 800564e:	f000 8092 	beq.w	8005776 <_dtoa_r+0x90e>
 8005652:	f1c0 0320 	rsb	r3, r0, #32
 8005656:	2b04      	cmp	r3, #4
 8005658:	f340 8085 	ble.w	8005766 <_dtoa_r+0x8fe>
 800565c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800565e:	f1c0 001c 	rsb	r0, r0, #28
 8005662:	4403      	add	r3, r0
 8005664:	4481      	add	r9, r0
 8005666:	4407      	add	r7, r0
 8005668:	9309      	str	r3, [sp, #36]	; 0x24
 800566a:	f1b9 0f00 	cmp.w	r9, #0
 800566e:	dd05      	ble.n	800567c <_dtoa_r+0x814>
 8005670:	4651      	mov	r1, sl
 8005672:	464a      	mov	r2, r9
 8005674:	4628      	mov	r0, r5
 8005676:	f000 fd2f 	bl	80060d8 <__lshift>
 800567a:	4682      	mov	sl, r0
 800567c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800567e:	2b00      	cmp	r3, #0
 8005680:	dd05      	ble.n	800568e <_dtoa_r+0x826>
 8005682:	4621      	mov	r1, r4
 8005684:	461a      	mov	r2, r3
 8005686:	4628      	mov	r0, r5
 8005688:	f000 fd26 	bl	80060d8 <__lshift>
 800568c:	4604      	mov	r4, r0
 800568e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005690:	2b00      	cmp	r3, #0
 8005692:	d072      	beq.n	800577a <_dtoa_r+0x912>
 8005694:	4621      	mov	r1, r4
 8005696:	4650      	mov	r0, sl
 8005698:	f000 fd8a 	bl	80061b0 <__mcmp>
 800569c:	2800      	cmp	r0, #0
 800569e:	da6c      	bge.n	800577a <_dtoa_r+0x912>
 80056a0:	2300      	movs	r3, #0
 80056a2:	4651      	mov	r1, sl
 80056a4:	220a      	movs	r2, #10
 80056a6:	4628      	mov	r0, r5
 80056a8:	f000 fb20 	bl	8005cec <__multadd>
 80056ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056ae:	4682      	mov	sl, r0
 80056b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 81ac 	beq.w	8005a12 <_dtoa_r+0xbaa>
 80056ba:	2300      	movs	r3, #0
 80056bc:	4631      	mov	r1, r6
 80056be:	220a      	movs	r2, #10
 80056c0:	4628      	mov	r0, r5
 80056c2:	f000 fb13 	bl	8005cec <__multadd>
 80056c6:	9b06      	ldr	r3, [sp, #24]
 80056c8:	4606      	mov	r6, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f300 8093 	bgt.w	80057f6 <_dtoa_r+0x98e>
 80056d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	dc59      	bgt.n	800578a <_dtoa_r+0x922>
 80056d6:	e08e      	b.n	80057f6 <_dtoa_r+0x98e>
 80056d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80056da:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80056de:	e75d      	b.n	800559c <_dtoa_r+0x734>
 80056e0:	9b08      	ldr	r3, [sp, #32]
 80056e2:	1e5c      	subs	r4, r3, #1
 80056e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056e6:	42a3      	cmp	r3, r4
 80056e8:	bfbf      	itttt	lt
 80056ea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80056ec:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80056ee:	1ae3      	sublt	r3, r4, r3
 80056f0:	18d2      	addlt	r2, r2, r3
 80056f2:	bfa8      	it	ge
 80056f4:	1b1c      	subge	r4, r3, r4
 80056f6:	9b08      	ldr	r3, [sp, #32]
 80056f8:	bfbe      	ittt	lt
 80056fa:	940a      	strlt	r4, [sp, #40]	; 0x28
 80056fc:	920e      	strlt	r2, [sp, #56]	; 0x38
 80056fe:	2400      	movlt	r4, #0
 8005700:	2b00      	cmp	r3, #0
 8005702:	bfb5      	itete	lt
 8005704:	eba9 0703 	sublt.w	r7, r9, r3
 8005708:	464f      	movge	r7, r9
 800570a:	2300      	movlt	r3, #0
 800570c:	9b08      	ldrge	r3, [sp, #32]
 800570e:	e747      	b.n	80055a0 <_dtoa_r+0x738>
 8005710:	464f      	mov	r7, r9
 8005712:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005714:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005716:	e74c      	b.n	80055b2 <_dtoa_r+0x74a>
 8005718:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800571a:	e773      	b.n	8005604 <_dtoa_r+0x79c>
 800571c:	3fe00000 	.word	0x3fe00000
 8005720:	40240000 	.word	0x40240000
 8005724:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005726:	2b01      	cmp	r3, #1
 8005728:	dc18      	bgt.n	800575c <_dtoa_r+0x8f4>
 800572a:	9b04      	ldr	r3, [sp, #16]
 800572c:	b9b3      	cbnz	r3, 800575c <_dtoa_r+0x8f4>
 800572e:	9b05      	ldr	r3, [sp, #20]
 8005730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005734:	b993      	cbnz	r3, 800575c <_dtoa_r+0x8f4>
 8005736:	9b05      	ldr	r3, [sp, #20]
 8005738:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800573c:	0d1b      	lsrs	r3, r3, #20
 800573e:	051b      	lsls	r3, r3, #20
 8005740:	b17b      	cbz	r3, 8005762 <_dtoa_r+0x8fa>
 8005742:	f04f 0801 	mov.w	r8, #1
 8005746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005748:	f109 0901 	add.w	r9, r9, #1
 800574c:	3301      	adds	r3, #1
 800574e:	9309      	str	r3, [sp, #36]	; 0x24
 8005750:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005752:	2b00      	cmp	r3, #0
 8005754:	f47f af6f 	bne.w	8005636 <_dtoa_r+0x7ce>
 8005758:	2001      	movs	r0, #1
 800575a:	e774      	b.n	8005646 <_dtoa_r+0x7de>
 800575c:	f04f 0800 	mov.w	r8, #0
 8005760:	e7f6      	b.n	8005750 <_dtoa_r+0x8e8>
 8005762:	4698      	mov	r8, r3
 8005764:	e7f4      	b.n	8005750 <_dtoa_r+0x8e8>
 8005766:	d080      	beq.n	800566a <_dtoa_r+0x802>
 8005768:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800576a:	331c      	adds	r3, #28
 800576c:	441a      	add	r2, r3
 800576e:	4499      	add	r9, r3
 8005770:	441f      	add	r7, r3
 8005772:	9209      	str	r2, [sp, #36]	; 0x24
 8005774:	e779      	b.n	800566a <_dtoa_r+0x802>
 8005776:	4603      	mov	r3, r0
 8005778:	e7f6      	b.n	8005768 <_dtoa_r+0x900>
 800577a:	9b08      	ldr	r3, [sp, #32]
 800577c:	2b00      	cmp	r3, #0
 800577e:	dc34      	bgt.n	80057ea <_dtoa_r+0x982>
 8005780:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005782:	2b02      	cmp	r3, #2
 8005784:	dd31      	ble.n	80057ea <_dtoa_r+0x982>
 8005786:	9b08      	ldr	r3, [sp, #32]
 8005788:	9306      	str	r3, [sp, #24]
 800578a:	9b06      	ldr	r3, [sp, #24]
 800578c:	b963      	cbnz	r3, 80057a8 <_dtoa_r+0x940>
 800578e:	4621      	mov	r1, r4
 8005790:	2205      	movs	r2, #5
 8005792:	4628      	mov	r0, r5
 8005794:	f000 faaa 	bl	8005cec <__multadd>
 8005798:	4601      	mov	r1, r0
 800579a:	4604      	mov	r4, r0
 800579c:	4650      	mov	r0, sl
 800579e:	f000 fd07 	bl	80061b0 <__mcmp>
 80057a2:	2800      	cmp	r0, #0
 80057a4:	f73f adbf 	bgt.w	8005326 <_dtoa_r+0x4be>
 80057a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80057aa:	9f03      	ldr	r7, [sp, #12]
 80057ac:	ea6f 0b03 	mvn.w	fp, r3
 80057b0:	f04f 0800 	mov.w	r8, #0
 80057b4:	4621      	mov	r1, r4
 80057b6:	4628      	mov	r0, r5
 80057b8:	f000 fa76 	bl	8005ca8 <_Bfree>
 80057bc:	2e00      	cmp	r6, #0
 80057be:	f43f aead 	beq.w	800551c <_dtoa_r+0x6b4>
 80057c2:	f1b8 0f00 	cmp.w	r8, #0
 80057c6:	d005      	beq.n	80057d4 <_dtoa_r+0x96c>
 80057c8:	45b0      	cmp	r8, r6
 80057ca:	d003      	beq.n	80057d4 <_dtoa_r+0x96c>
 80057cc:	4641      	mov	r1, r8
 80057ce:	4628      	mov	r0, r5
 80057d0:	f000 fa6a 	bl	8005ca8 <_Bfree>
 80057d4:	4631      	mov	r1, r6
 80057d6:	4628      	mov	r0, r5
 80057d8:	f000 fa66 	bl	8005ca8 <_Bfree>
 80057dc:	e69e      	b.n	800551c <_dtoa_r+0x6b4>
 80057de:	2400      	movs	r4, #0
 80057e0:	4626      	mov	r6, r4
 80057e2:	e7e1      	b.n	80057a8 <_dtoa_r+0x940>
 80057e4:	46c3      	mov	fp, r8
 80057e6:	4626      	mov	r6, r4
 80057e8:	e59d      	b.n	8005326 <_dtoa_r+0x4be>
 80057ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 80c8 	beq.w	8005982 <_dtoa_r+0xb1a>
 80057f2:	9b08      	ldr	r3, [sp, #32]
 80057f4:	9306      	str	r3, [sp, #24]
 80057f6:	2f00      	cmp	r7, #0
 80057f8:	dd05      	ble.n	8005806 <_dtoa_r+0x99e>
 80057fa:	4631      	mov	r1, r6
 80057fc:	463a      	mov	r2, r7
 80057fe:	4628      	mov	r0, r5
 8005800:	f000 fc6a 	bl	80060d8 <__lshift>
 8005804:	4606      	mov	r6, r0
 8005806:	f1b8 0f00 	cmp.w	r8, #0
 800580a:	d05b      	beq.n	80058c4 <_dtoa_r+0xa5c>
 800580c:	4628      	mov	r0, r5
 800580e:	6871      	ldr	r1, [r6, #4]
 8005810:	f000 fa0a 	bl	8005c28 <_Balloc>
 8005814:	4607      	mov	r7, r0
 8005816:	b928      	cbnz	r0, 8005824 <_dtoa_r+0x9bc>
 8005818:	4602      	mov	r2, r0
 800581a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800581e:	4b81      	ldr	r3, [pc, #516]	; (8005a24 <_dtoa_r+0xbbc>)
 8005820:	f7ff bb36 	b.w	8004e90 <_dtoa_r+0x28>
 8005824:	6932      	ldr	r2, [r6, #16]
 8005826:	f106 010c 	add.w	r1, r6, #12
 800582a:	3202      	adds	r2, #2
 800582c:	0092      	lsls	r2, r2, #2
 800582e:	300c      	adds	r0, #12
 8005830:	f001 ff72 	bl	8007718 <memcpy>
 8005834:	2201      	movs	r2, #1
 8005836:	4639      	mov	r1, r7
 8005838:	4628      	mov	r0, r5
 800583a:	f000 fc4d 	bl	80060d8 <__lshift>
 800583e:	46b0      	mov	r8, r6
 8005840:	4606      	mov	r6, r0
 8005842:	9b03      	ldr	r3, [sp, #12]
 8005844:	9a03      	ldr	r2, [sp, #12]
 8005846:	3301      	adds	r3, #1
 8005848:	9308      	str	r3, [sp, #32]
 800584a:	9b06      	ldr	r3, [sp, #24]
 800584c:	4413      	add	r3, r2
 800584e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005850:	9b04      	ldr	r3, [sp, #16]
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	930a      	str	r3, [sp, #40]	; 0x28
 8005858:	9b08      	ldr	r3, [sp, #32]
 800585a:	4621      	mov	r1, r4
 800585c:	3b01      	subs	r3, #1
 800585e:	4650      	mov	r0, sl
 8005860:	9304      	str	r3, [sp, #16]
 8005862:	f7ff fa75 	bl	8004d50 <quorem>
 8005866:	4641      	mov	r1, r8
 8005868:	9006      	str	r0, [sp, #24]
 800586a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800586e:	4650      	mov	r0, sl
 8005870:	f000 fc9e 	bl	80061b0 <__mcmp>
 8005874:	4632      	mov	r2, r6
 8005876:	9009      	str	r0, [sp, #36]	; 0x24
 8005878:	4621      	mov	r1, r4
 800587a:	4628      	mov	r0, r5
 800587c:	f000 fcb4 	bl	80061e8 <__mdiff>
 8005880:	68c2      	ldr	r2, [r0, #12]
 8005882:	4607      	mov	r7, r0
 8005884:	bb02      	cbnz	r2, 80058c8 <_dtoa_r+0xa60>
 8005886:	4601      	mov	r1, r0
 8005888:	4650      	mov	r0, sl
 800588a:	f000 fc91 	bl	80061b0 <__mcmp>
 800588e:	4602      	mov	r2, r0
 8005890:	4639      	mov	r1, r7
 8005892:	4628      	mov	r0, r5
 8005894:	920c      	str	r2, [sp, #48]	; 0x30
 8005896:	f000 fa07 	bl	8005ca8 <_Bfree>
 800589a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800589c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800589e:	9f08      	ldr	r7, [sp, #32]
 80058a0:	ea43 0102 	orr.w	r1, r3, r2
 80058a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058a6:	4319      	orrs	r1, r3
 80058a8:	d110      	bne.n	80058cc <_dtoa_r+0xa64>
 80058aa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80058ae:	d029      	beq.n	8005904 <_dtoa_r+0xa9c>
 80058b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	dd02      	ble.n	80058bc <_dtoa_r+0xa54>
 80058b6:	9b06      	ldr	r3, [sp, #24]
 80058b8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80058bc:	9b04      	ldr	r3, [sp, #16]
 80058be:	f883 9000 	strb.w	r9, [r3]
 80058c2:	e777      	b.n	80057b4 <_dtoa_r+0x94c>
 80058c4:	4630      	mov	r0, r6
 80058c6:	e7ba      	b.n	800583e <_dtoa_r+0x9d6>
 80058c8:	2201      	movs	r2, #1
 80058ca:	e7e1      	b.n	8005890 <_dtoa_r+0xa28>
 80058cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	db04      	blt.n	80058dc <_dtoa_r+0xa74>
 80058d2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80058d4:	430b      	orrs	r3, r1
 80058d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80058d8:	430b      	orrs	r3, r1
 80058da:	d120      	bne.n	800591e <_dtoa_r+0xab6>
 80058dc:	2a00      	cmp	r2, #0
 80058de:	dded      	ble.n	80058bc <_dtoa_r+0xa54>
 80058e0:	4651      	mov	r1, sl
 80058e2:	2201      	movs	r2, #1
 80058e4:	4628      	mov	r0, r5
 80058e6:	f000 fbf7 	bl	80060d8 <__lshift>
 80058ea:	4621      	mov	r1, r4
 80058ec:	4682      	mov	sl, r0
 80058ee:	f000 fc5f 	bl	80061b0 <__mcmp>
 80058f2:	2800      	cmp	r0, #0
 80058f4:	dc03      	bgt.n	80058fe <_dtoa_r+0xa96>
 80058f6:	d1e1      	bne.n	80058bc <_dtoa_r+0xa54>
 80058f8:	f019 0f01 	tst.w	r9, #1
 80058fc:	d0de      	beq.n	80058bc <_dtoa_r+0xa54>
 80058fe:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005902:	d1d8      	bne.n	80058b6 <_dtoa_r+0xa4e>
 8005904:	2339      	movs	r3, #57	; 0x39
 8005906:	9a04      	ldr	r2, [sp, #16]
 8005908:	7013      	strb	r3, [r2, #0]
 800590a:	463b      	mov	r3, r7
 800590c:	461f      	mov	r7, r3
 800590e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005912:	3b01      	subs	r3, #1
 8005914:	2a39      	cmp	r2, #57	; 0x39
 8005916:	d06b      	beq.n	80059f0 <_dtoa_r+0xb88>
 8005918:	3201      	adds	r2, #1
 800591a:	701a      	strb	r2, [r3, #0]
 800591c:	e74a      	b.n	80057b4 <_dtoa_r+0x94c>
 800591e:	2a00      	cmp	r2, #0
 8005920:	dd07      	ble.n	8005932 <_dtoa_r+0xaca>
 8005922:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005926:	d0ed      	beq.n	8005904 <_dtoa_r+0xa9c>
 8005928:	9a04      	ldr	r2, [sp, #16]
 800592a:	f109 0301 	add.w	r3, r9, #1
 800592e:	7013      	strb	r3, [r2, #0]
 8005930:	e740      	b.n	80057b4 <_dtoa_r+0x94c>
 8005932:	9b08      	ldr	r3, [sp, #32]
 8005934:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005936:	f803 9c01 	strb.w	r9, [r3, #-1]
 800593a:	4293      	cmp	r3, r2
 800593c:	d042      	beq.n	80059c4 <_dtoa_r+0xb5c>
 800593e:	4651      	mov	r1, sl
 8005940:	2300      	movs	r3, #0
 8005942:	220a      	movs	r2, #10
 8005944:	4628      	mov	r0, r5
 8005946:	f000 f9d1 	bl	8005cec <__multadd>
 800594a:	45b0      	cmp	r8, r6
 800594c:	4682      	mov	sl, r0
 800594e:	f04f 0300 	mov.w	r3, #0
 8005952:	f04f 020a 	mov.w	r2, #10
 8005956:	4641      	mov	r1, r8
 8005958:	4628      	mov	r0, r5
 800595a:	d107      	bne.n	800596c <_dtoa_r+0xb04>
 800595c:	f000 f9c6 	bl	8005cec <__multadd>
 8005960:	4680      	mov	r8, r0
 8005962:	4606      	mov	r6, r0
 8005964:	9b08      	ldr	r3, [sp, #32]
 8005966:	3301      	adds	r3, #1
 8005968:	9308      	str	r3, [sp, #32]
 800596a:	e775      	b.n	8005858 <_dtoa_r+0x9f0>
 800596c:	f000 f9be 	bl	8005cec <__multadd>
 8005970:	4631      	mov	r1, r6
 8005972:	4680      	mov	r8, r0
 8005974:	2300      	movs	r3, #0
 8005976:	220a      	movs	r2, #10
 8005978:	4628      	mov	r0, r5
 800597a:	f000 f9b7 	bl	8005cec <__multadd>
 800597e:	4606      	mov	r6, r0
 8005980:	e7f0      	b.n	8005964 <_dtoa_r+0xafc>
 8005982:	9b08      	ldr	r3, [sp, #32]
 8005984:	9306      	str	r3, [sp, #24]
 8005986:	9f03      	ldr	r7, [sp, #12]
 8005988:	4621      	mov	r1, r4
 800598a:	4650      	mov	r0, sl
 800598c:	f7ff f9e0 	bl	8004d50 <quorem>
 8005990:	9b03      	ldr	r3, [sp, #12]
 8005992:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005996:	f807 9b01 	strb.w	r9, [r7], #1
 800599a:	1afa      	subs	r2, r7, r3
 800599c:	9b06      	ldr	r3, [sp, #24]
 800599e:	4293      	cmp	r3, r2
 80059a0:	dd07      	ble.n	80059b2 <_dtoa_r+0xb4a>
 80059a2:	4651      	mov	r1, sl
 80059a4:	2300      	movs	r3, #0
 80059a6:	220a      	movs	r2, #10
 80059a8:	4628      	mov	r0, r5
 80059aa:	f000 f99f 	bl	8005cec <__multadd>
 80059ae:	4682      	mov	sl, r0
 80059b0:	e7ea      	b.n	8005988 <_dtoa_r+0xb20>
 80059b2:	9b06      	ldr	r3, [sp, #24]
 80059b4:	f04f 0800 	mov.w	r8, #0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	bfcc      	ite	gt
 80059bc:	461f      	movgt	r7, r3
 80059be:	2701      	movle	r7, #1
 80059c0:	9b03      	ldr	r3, [sp, #12]
 80059c2:	441f      	add	r7, r3
 80059c4:	4651      	mov	r1, sl
 80059c6:	2201      	movs	r2, #1
 80059c8:	4628      	mov	r0, r5
 80059ca:	f000 fb85 	bl	80060d8 <__lshift>
 80059ce:	4621      	mov	r1, r4
 80059d0:	4682      	mov	sl, r0
 80059d2:	f000 fbed 	bl	80061b0 <__mcmp>
 80059d6:	2800      	cmp	r0, #0
 80059d8:	dc97      	bgt.n	800590a <_dtoa_r+0xaa2>
 80059da:	d102      	bne.n	80059e2 <_dtoa_r+0xb7a>
 80059dc:	f019 0f01 	tst.w	r9, #1
 80059e0:	d193      	bne.n	800590a <_dtoa_r+0xaa2>
 80059e2:	463b      	mov	r3, r7
 80059e4:	461f      	mov	r7, r3
 80059e6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059ea:	2a30      	cmp	r2, #48	; 0x30
 80059ec:	d0fa      	beq.n	80059e4 <_dtoa_r+0xb7c>
 80059ee:	e6e1      	b.n	80057b4 <_dtoa_r+0x94c>
 80059f0:	9a03      	ldr	r2, [sp, #12]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d18a      	bne.n	800590c <_dtoa_r+0xaa4>
 80059f6:	2331      	movs	r3, #49	; 0x31
 80059f8:	f10b 0b01 	add.w	fp, fp, #1
 80059fc:	e797      	b.n	800592e <_dtoa_r+0xac6>
 80059fe:	4b0a      	ldr	r3, [pc, #40]	; (8005a28 <_dtoa_r+0xbc0>)
 8005a00:	f7ff ba9f 	b.w	8004f42 <_dtoa_r+0xda>
 8005a04:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f47f aa77 	bne.w	8004efa <_dtoa_r+0x92>
 8005a0c:	4b07      	ldr	r3, [pc, #28]	; (8005a2c <_dtoa_r+0xbc4>)
 8005a0e:	f7ff ba98 	b.w	8004f42 <_dtoa_r+0xda>
 8005a12:	9b06      	ldr	r3, [sp, #24]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	dcb6      	bgt.n	8005986 <_dtoa_r+0xb1e>
 8005a18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	f73f aeb5 	bgt.w	800578a <_dtoa_r+0x922>
 8005a20:	e7b1      	b.n	8005986 <_dtoa_r+0xb1e>
 8005a22:	bf00      	nop
 8005a24:	08008607 	.word	0x08008607
 8005a28:	08008562 	.word	0x08008562
 8005a2c:	0800858b 	.word	0x0800858b

08005a30 <_free_r>:
 8005a30:	b538      	push	{r3, r4, r5, lr}
 8005a32:	4605      	mov	r5, r0
 8005a34:	2900      	cmp	r1, #0
 8005a36:	d040      	beq.n	8005aba <_free_r+0x8a>
 8005a38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a3c:	1f0c      	subs	r4, r1, #4
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	bfb8      	it	lt
 8005a42:	18e4      	addlt	r4, r4, r3
 8005a44:	f000 f8e4 	bl	8005c10 <__malloc_lock>
 8005a48:	4a1c      	ldr	r2, [pc, #112]	; (8005abc <_free_r+0x8c>)
 8005a4a:	6813      	ldr	r3, [r2, #0]
 8005a4c:	b933      	cbnz	r3, 8005a5c <_free_r+0x2c>
 8005a4e:	6063      	str	r3, [r4, #4]
 8005a50:	6014      	str	r4, [r2, #0]
 8005a52:	4628      	mov	r0, r5
 8005a54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a58:	f000 b8e0 	b.w	8005c1c <__malloc_unlock>
 8005a5c:	42a3      	cmp	r3, r4
 8005a5e:	d908      	bls.n	8005a72 <_free_r+0x42>
 8005a60:	6820      	ldr	r0, [r4, #0]
 8005a62:	1821      	adds	r1, r4, r0
 8005a64:	428b      	cmp	r3, r1
 8005a66:	bf01      	itttt	eq
 8005a68:	6819      	ldreq	r1, [r3, #0]
 8005a6a:	685b      	ldreq	r3, [r3, #4]
 8005a6c:	1809      	addeq	r1, r1, r0
 8005a6e:	6021      	streq	r1, [r4, #0]
 8005a70:	e7ed      	b.n	8005a4e <_free_r+0x1e>
 8005a72:	461a      	mov	r2, r3
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	b10b      	cbz	r3, 8005a7c <_free_r+0x4c>
 8005a78:	42a3      	cmp	r3, r4
 8005a7a:	d9fa      	bls.n	8005a72 <_free_r+0x42>
 8005a7c:	6811      	ldr	r1, [r2, #0]
 8005a7e:	1850      	adds	r0, r2, r1
 8005a80:	42a0      	cmp	r0, r4
 8005a82:	d10b      	bne.n	8005a9c <_free_r+0x6c>
 8005a84:	6820      	ldr	r0, [r4, #0]
 8005a86:	4401      	add	r1, r0
 8005a88:	1850      	adds	r0, r2, r1
 8005a8a:	4283      	cmp	r3, r0
 8005a8c:	6011      	str	r1, [r2, #0]
 8005a8e:	d1e0      	bne.n	8005a52 <_free_r+0x22>
 8005a90:	6818      	ldr	r0, [r3, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	4408      	add	r0, r1
 8005a96:	6010      	str	r0, [r2, #0]
 8005a98:	6053      	str	r3, [r2, #4]
 8005a9a:	e7da      	b.n	8005a52 <_free_r+0x22>
 8005a9c:	d902      	bls.n	8005aa4 <_free_r+0x74>
 8005a9e:	230c      	movs	r3, #12
 8005aa0:	602b      	str	r3, [r5, #0]
 8005aa2:	e7d6      	b.n	8005a52 <_free_r+0x22>
 8005aa4:	6820      	ldr	r0, [r4, #0]
 8005aa6:	1821      	adds	r1, r4, r0
 8005aa8:	428b      	cmp	r3, r1
 8005aaa:	bf01      	itttt	eq
 8005aac:	6819      	ldreq	r1, [r3, #0]
 8005aae:	685b      	ldreq	r3, [r3, #4]
 8005ab0:	1809      	addeq	r1, r1, r0
 8005ab2:	6021      	streq	r1, [r4, #0]
 8005ab4:	6063      	str	r3, [r4, #4]
 8005ab6:	6054      	str	r4, [r2, #4]
 8005ab8:	e7cb      	b.n	8005a52 <_free_r+0x22>
 8005aba:	bd38      	pop	{r3, r4, r5, pc}
 8005abc:	200003ec 	.word	0x200003ec

08005ac0 <malloc>:
 8005ac0:	4b02      	ldr	r3, [pc, #8]	; (8005acc <malloc+0xc>)
 8005ac2:	4601      	mov	r1, r0
 8005ac4:	6818      	ldr	r0, [r3, #0]
 8005ac6:	f000 b823 	b.w	8005b10 <_malloc_r>
 8005aca:	bf00      	nop
 8005acc:	20000088 	.word	0x20000088

08005ad0 <sbrk_aligned>:
 8005ad0:	b570      	push	{r4, r5, r6, lr}
 8005ad2:	4e0e      	ldr	r6, [pc, #56]	; (8005b0c <sbrk_aligned+0x3c>)
 8005ad4:	460c      	mov	r4, r1
 8005ad6:	6831      	ldr	r1, [r6, #0]
 8005ad8:	4605      	mov	r5, r0
 8005ada:	b911      	cbnz	r1, 8005ae2 <sbrk_aligned+0x12>
 8005adc:	f001 fe0c 	bl	80076f8 <_sbrk_r>
 8005ae0:	6030      	str	r0, [r6, #0]
 8005ae2:	4621      	mov	r1, r4
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	f001 fe07 	bl	80076f8 <_sbrk_r>
 8005aea:	1c43      	adds	r3, r0, #1
 8005aec:	d00a      	beq.n	8005b04 <sbrk_aligned+0x34>
 8005aee:	1cc4      	adds	r4, r0, #3
 8005af0:	f024 0403 	bic.w	r4, r4, #3
 8005af4:	42a0      	cmp	r0, r4
 8005af6:	d007      	beq.n	8005b08 <sbrk_aligned+0x38>
 8005af8:	1a21      	subs	r1, r4, r0
 8005afa:	4628      	mov	r0, r5
 8005afc:	f001 fdfc 	bl	80076f8 <_sbrk_r>
 8005b00:	3001      	adds	r0, #1
 8005b02:	d101      	bne.n	8005b08 <sbrk_aligned+0x38>
 8005b04:	f04f 34ff 	mov.w	r4, #4294967295
 8005b08:	4620      	mov	r0, r4
 8005b0a:	bd70      	pop	{r4, r5, r6, pc}
 8005b0c:	200003f0 	.word	0x200003f0

08005b10 <_malloc_r>:
 8005b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b14:	1ccd      	adds	r5, r1, #3
 8005b16:	f025 0503 	bic.w	r5, r5, #3
 8005b1a:	3508      	adds	r5, #8
 8005b1c:	2d0c      	cmp	r5, #12
 8005b1e:	bf38      	it	cc
 8005b20:	250c      	movcc	r5, #12
 8005b22:	2d00      	cmp	r5, #0
 8005b24:	4607      	mov	r7, r0
 8005b26:	db01      	blt.n	8005b2c <_malloc_r+0x1c>
 8005b28:	42a9      	cmp	r1, r5
 8005b2a:	d905      	bls.n	8005b38 <_malloc_r+0x28>
 8005b2c:	230c      	movs	r3, #12
 8005b2e:	2600      	movs	r6, #0
 8005b30:	603b      	str	r3, [r7, #0]
 8005b32:	4630      	mov	r0, r6
 8005b34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005c0c <_malloc_r+0xfc>
 8005b3c:	f000 f868 	bl	8005c10 <__malloc_lock>
 8005b40:	f8d8 3000 	ldr.w	r3, [r8]
 8005b44:	461c      	mov	r4, r3
 8005b46:	bb5c      	cbnz	r4, 8005ba0 <_malloc_r+0x90>
 8005b48:	4629      	mov	r1, r5
 8005b4a:	4638      	mov	r0, r7
 8005b4c:	f7ff ffc0 	bl	8005ad0 <sbrk_aligned>
 8005b50:	1c43      	adds	r3, r0, #1
 8005b52:	4604      	mov	r4, r0
 8005b54:	d155      	bne.n	8005c02 <_malloc_r+0xf2>
 8005b56:	f8d8 4000 	ldr.w	r4, [r8]
 8005b5a:	4626      	mov	r6, r4
 8005b5c:	2e00      	cmp	r6, #0
 8005b5e:	d145      	bne.n	8005bec <_malloc_r+0xdc>
 8005b60:	2c00      	cmp	r4, #0
 8005b62:	d048      	beq.n	8005bf6 <_malloc_r+0xe6>
 8005b64:	6823      	ldr	r3, [r4, #0]
 8005b66:	4631      	mov	r1, r6
 8005b68:	4638      	mov	r0, r7
 8005b6a:	eb04 0903 	add.w	r9, r4, r3
 8005b6e:	f001 fdc3 	bl	80076f8 <_sbrk_r>
 8005b72:	4581      	cmp	r9, r0
 8005b74:	d13f      	bne.n	8005bf6 <_malloc_r+0xe6>
 8005b76:	6821      	ldr	r1, [r4, #0]
 8005b78:	4638      	mov	r0, r7
 8005b7a:	1a6d      	subs	r5, r5, r1
 8005b7c:	4629      	mov	r1, r5
 8005b7e:	f7ff ffa7 	bl	8005ad0 <sbrk_aligned>
 8005b82:	3001      	adds	r0, #1
 8005b84:	d037      	beq.n	8005bf6 <_malloc_r+0xe6>
 8005b86:	6823      	ldr	r3, [r4, #0]
 8005b88:	442b      	add	r3, r5
 8005b8a:	6023      	str	r3, [r4, #0]
 8005b8c:	f8d8 3000 	ldr.w	r3, [r8]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d038      	beq.n	8005c06 <_malloc_r+0xf6>
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	42a2      	cmp	r2, r4
 8005b98:	d12b      	bne.n	8005bf2 <_malloc_r+0xe2>
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	605a      	str	r2, [r3, #4]
 8005b9e:	e00f      	b.n	8005bc0 <_malloc_r+0xb0>
 8005ba0:	6822      	ldr	r2, [r4, #0]
 8005ba2:	1b52      	subs	r2, r2, r5
 8005ba4:	d41f      	bmi.n	8005be6 <_malloc_r+0xd6>
 8005ba6:	2a0b      	cmp	r2, #11
 8005ba8:	d917      	bls.n	8005bda <_malloc_r+0xca>
 8005baa:	1961      	adds	r1, r4, r5
 8005bac:	42a3      	cmp	r3, r4
 8005bae:	6025      	str	r5, [r4, #0]
 8005bb0:	bf18      	it	ne
 8005bb2:	6059      	strne	r1, [r3, #4]
 8005bb4:	6863      	ldr	r3, [r4, #4]
 8005bb6:	bf08      	it	eq
 8005bb8:	f8c8 1000 	streq.w	r1, [r8]
 8005bbc:	5162      	str	r2, [r4, r5]
 8005bbe:	604b      	str	r3, [r1, #4]
 8005bc0:	4638      	mov	r0, r7
 8005bc2:	f104 060b 	add.w	r6, r4, #11
 8005bc6:	f000 f829 	bl	8005c1c <__malloc_unlock>
 8005bca:	f026 0607 	bic.w	r6, r6, #7
 8005bce:	1d23      	adds	r3, r4, #4
 8005bd0:	1af2      	subs	r2, r6, r3
 8005bd2:	d0ae      	beq.n	8005b32 <_malloc_r+0x22>
 8005bd4:	1b9b      	subs	r3, r3, r6
 8005bd6:	50a3      	str	r3, [r4, r2]
 8005bd8:	e7ab      	b.n	8005b32 <_malloc_r+0x22>
 8005bda:	42a3      	cmp	r3, r4
 8005bdc:	6862      	ldr	r2, [r4, #4]
 8005bde:	d1dd      	bne.n	8005b9c <_malloc_r+0x8c>
 8005be0:	f8c8 2000 	str.w	r2, [r8]
 8005be4:	e7ec      	b.n	8005bc0 <_malloc_r+0xb0>
 8005be6:	4623      	mov	r3, r4
 8005be8:	6864      	ldr	r4, [r4, #4]
 8005bea:	e7ac      	b.n	8005b46 <_malloc_r+0x36>
 8005bec:	4634      	mov	r4, r6
 8005bee:	6876      	ldr	r6, [r6, #4]
 8005bf0:	e7b4      	b.n	8005b5c <_malloc_r+0x4c>
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	e7cc      	b.n	8005b90 <_malloc_r+0x80>
 8005bf6:	230c      	movs	r3, #12
 8005bf8:	4638      	mov	r0, r7
 8005bfa:	603b      	str	r3, [r7, #0]
 8005bfc:	f000 f80e 	bl	8005c1c <__malloc_unlock>
 8005c00:	e797      	b.n	8005b32 <_malloc_r+0x22>
 8005c02:	6025      	str	r5, [r4, #0]
 8005c04:	e7dc      	b.n	8005bc0 <_malloc_r+0xb0>
 8005c06:	605b      	str	r3, [r3, #4]
 8005c08:	deff      	udf	#255	; 0xff
 8005c0a:	bf00      	nop
 8005c0c:	200003ec 	.word	0x200003ec

08005c10 <__malloc_lock>:
 8005c10:	4801      	ldr	r0, [pc, #4]	; (8005c18 <__malloc_lock+0x8>)
 8005c12:	f7ff b888 	b.w	8004d26 <__retarget_lock_acquire_recursive>
 8005c16:	bf00      	nop
 8005c18:	200003e8 	.word	0x200003e8

08005c1c <__malloc_unlock>:
 8005c1c:	4801      	ldr	r0, [pc, #4]	; (8005c24 <__malloc_unlock+0x8>)
 8005c1e:	f7ff b883 	b.w	8004d28 <__retarget_lock_release_recursive>
 8005c22:	bf00      	nop
 8005c24:	200003e8 	.word	0x200003e8

08005c28 <_Balloc>:
 8005c28:	b570      	push	{r4, r5, r6, lr}
 8005c2a:	69c6      	ldr	r6, [r0, #28]
 8005c2c:	4604      	mov	r4, r0
 8005c2e:	460d      	mov	r5, r1
 8005c30:	b976      	cbnz	r6, 8005c50 <_Balloc+0x28>
 8005c32:	2010      	movs	r0, #16
 8005c34:	f7ff ff44 	bl	8005ac0 <malloc>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	61e0      	str	r0, [r4, #28]
 8005c3c:	b920      	cbnz	r0, 8005c48 <_Balloc+0x20>
 8005c3e:	216b      	movs	r1, #107	; 0x6b
 8005c40:	4b17      	ldr	r3, [pc, #92]	; (8005ca0 <_Balloc+0x78>)
 8005c42:	4818      	ldr	r0, [pc, #96]	; (8005ca4 <_Balloc+0x7c>)
 8005c44:	f001 fd7c 	bl	8007740 <__assert_func>
 8005c48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c4c:	6006      	str	r6, [r0, #0]
 8005c4e:	60c6      	str	r6, [r0, #12]
 8005c50:	69e6      	ldr	r6, [r4, #28]
 8005c52:	68f3      	ldr	r3, [r6, #12]
 8005c54:	b183      	cbz	r3, 8005c78 <_Balloc+0x50>
 8005c56:	69e3      	ldr	r3, [r4, #28]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c5e:	b9b8      	cbnz	r0, 8005c90 <_Balloc+0x68>
 8005c60:	2101      	movs	r1, #1
 8005c62:	fa01 f605 	lsl.w	r6, r1, r5
 8005c66:	1d72      	adds	r2, r6, #5
 8005c68:	4620      	mov	r0, r4
 8005c6a:	0092      	lsls	r2, r2, #2
 8005c6c:	f001 fd86 	bl	800777c <_calloc_r>
 8005c70:	b160      	cbz	r0, 8005c8c <_Balloc+0x64>
 8005c72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c76:	e00e      	b.n	8005c96 <_Balloc+0x6e>
 8005c78:	2221      	movs	r2, #33	; 0x21
 8005c7a:	2104      	movs	r1, #4
 8005c7c:	4620      	mov	r0, r4
 8005c7e:	f001 fd7d 	bl	800777c <_calloc_r>
 8005c82:	69e3      	ldr	r3, [r4, #28]
 8005c84:	60f0      	str	r0, [r6, #12]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1e4      	bne.n	8005c56 <_Balloc+0x2e>
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	bd70      	pop	{r4, r5, r6, pc}
 8005c90:	6802      	ldr	r2, [r0, #0]
 8005c92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c96:	2300      	movs	r3, #0
 8005c98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c9c:	e7f7      	b.n	8005c8e <_Balloc+0x66>
 8005c9e:	bf00      	nop
 8005ca0:	08008598 	.word	0x08008598
 8005ca4:	08008618 	.word	0x08008618

08005ca8 <_Bfree>:
 8005ca8:	b570      	push	{r4, r5, r6, lr}
 8005caa:	69c6      	ldr	r6, [r0, #28]
 8005cac:	4605      	mov	r5, r0
 8005cae:	460c      	mov	r4, r1
 8005cb0:	b976      	cbnz	r6, 8005cd0 <_Bfree+0x28>
 8005cb2:	2010      	movs	r0, #16
 8005cb4:	f7ff ff04 	bl	8005ac0 <malloc>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	61e8      	str	r0, [r5, #28]
 8005cbc:	b920      	cbnz	r0, 8005cc8 <_Bfree+0x20>
 8005cbe:	218f      	movs	r1, #143	; 0x8f
 8005cc0:	4b08      	ldr	r3, [pc, #32]	; (8005ce4 <_Bfree+0x3c>)
 8005cc2:	4809      	ldr	r0, [pc, #36]	; (8005ce8 <_Bfree+0x40>)
 8005cc4:	f001 fd3c 	bl	8007740 <__assert_func>
 8005cc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ccc:	6006      	str	r6, [r0, #0]
 8005cce:	60c6      	str	r6, [r0, #12]
 8005cd0:	b13c      	cbz	r4, 8005ce2 <_Bfree+0x3a>
 8005cd2:	69eb      	ldr	r3, [r5, #28]
 8005cd4:	6862      	ldr	r2, [r4, #4]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005cdc:	6021      	str	r1, [r4, #0]
 8005cde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005ce2:	bd70      	pop	{r4, r5, r6, pc}
 8005ce4:	08008598 	.word	0x08008598
 8005ce8:	08008618 	.word	0x08008618

08005cec <__multadd>:
 8005cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cf0:	4607      	mov	r7, r0
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	461e      	mov	r6, r3
 8005cf6:	2000      	movs	r0, #0
 8005cf8:	690d      	ldr	r5, [r1, #16]
 8005cfa:	f101 0c14 	add.w	ip, r1, #20
 8005cfe:	f8dc 3000 	ldr.w	r3, [ip]
 8005d02:	3001      	adds	r0, #1
 8005d04:	b299      	uxth	r1, r3
 8005d06:	fb02 6101 	mla	r1, r2, r1, r6
 8005d0a:	0c1e      	lsrs	r6, r3, #16
 8005d0c:	0c0b      	lsrs	r3, r1, #16
 8005d0e:	fb02 3306 	mla	r3, r2, r6, r3
 8005d12:	b289      	uxth	r1, r1
 8005d14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005d18:	4285      	cmp	r5, r0
 8005d1a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005d1e:	f84c 1b04 	str.w	r1, [ip], #4
 8005d22:	dcec      	bgt.n	8005cfe <__multadd+0x12>
 8005d24:	b30e      	cbz	r6, 8005d6a <__multadd+0x7e>
 8005d26:	68a3      	ldr	r3, [r4, #8]
 8005d28:	42ab      	cmp	r3, r5
 8005d2a:	dc19      	bgt.n	8005d60 <__multadd+0x74>
 8005d2c:	6861      	ldr	r1, [r4, #4]
 8005d2e:	4638      	mov	r0, r7
 8005d30:	3101      	adds	r1, #1
 8005d32:	f7ff ff79 	bl	8005c28 <_Balloc>
 8005d36:	4680      	mov	r8, r0
 8005d38:	b928      	cbnz	r0, 8005d46 <__multadd+0x5a>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	21ba      	movs	r1, #186	; 0xba
 8005d3e:	4b0c      	ldr	r3, [pc, #48]	; (8005d70 <__multadd+0x84>)
 8005d40:	480c      	ldr	r0, [pc, #48]	; (8005d74 <__multadd+0x88>)
 8005d42:	f001 fcfd 	bl	8007740 <__assert_func>
 8005d46:	6922      	ldr	r2, [r4, #16]
 8005d48:	f104 010c 	add.w	r1, r4, #12
 8005d4c:	3202      	adds	r2, #2
 8005d4e:	0092      	lsls	r2, r2, #2
 8005d50:	300c      	adds	r0, #12
 8005d52:	f001 fce1 	bl	8007718 <memcpy>
 8005d56:	4621      	mov	r1, r4
 8005d58:	4638      	mov	r0, r7
 8005d5a:	f7ff ffa5 	bl	8005ca8 <_Bfree>
 8005d5e:	4644      	mov	r4, r8
 8005d60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005d64:	3501      	adds	r5, #1
 8005d66:	615e      	str	r6, [r3, #20]
 8005d68:	6125      	str	r5, [r4, #16]
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d70:	08008607 	.word	0x08008607
 8005d74:	08008618 	.word	0x08008618

08005d78 <__s2b>:
 8005d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d7c:	4615      	mov	r5, r2
 8005d7e:	2209      	movs	r2, #9
 8005d80:	461f      	mov	r7, r3
 8005d82:	3308      	adds	r3, #8
 8005d84:	460c      	mov	r4, r1
 8005d86:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d8a:	4606      	mov	r6, r0
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	2100      	movs	r1, #0
 8005d90:	429a      	cmp	r2, r3
 8005d92:	db09      	blt.n	8005da8 <__s2b+0x30>
 8005d94:	4630      	mov	r0, r6
 8005d96:	f7ff ff47 	bl	8005c28 <_Balloc>
 8005d9a:	b940      	cbnz	r0, 8005dae <__s2b+0x36>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	21d3      	movs	r1, #211	; 0xd3
 8005da0:	4b18      	ldr	r3, [pc, #96]	; (8005e04 <__s2b+0x8c>)
 8005da2:	4819      	ldr	r0, [pc, #100]	; (8005e08 <__s2b+0x90>)
 8005da4:	f001 fccc 	bl	8007740 <__assert_func>
 8005da8:	0052      	lsls	r2, r2, #1
 8005daa:	3101      	adds	r1, #1
 8005dac:	e7f0      	b.n	8005d90 <__s2b+0x18>
 8005dae:	9b08      	ldr	r3, [sp, #32]
 8005db0:	2d09      	cmp	r5, #9
 8005db2:	6143      	str	r3, [r0, #20]
 8005db4:	f04f 0301 	mov.w	r3, #1
 8005db8:	6103      	str	r3, [r0, #16]
 8005dba:	dd16      	ble.n	8005dea <__s2b+0x72>
 8005dbc:	f104 0909 	add.w	r9, r4, #9
 8005dc0:	46c8      	mov	r8, r9
 8005dc2:	442c      	add	r4, r5
 8005dc4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005dc8:	4601      	mov	r1, r0
 8005dca:	220a      	movs	r2, #10
 8005dcc:	4630      	mov	r0, r6
 8005dce:	3b30      	subs	r3, #48	; 0x30
 8005dd0:	f7ff ff8c 	bl	8005cec <__multadd>
 8005dd4:	45a0      	cmp	r8, r4
 8005dd6:	d1f5      	bne.n	8005dc4 <__s2b+0x4c>
 8005dd8:	f1a5 0408 	sub.w	r4, r5, #8
 8005ddc:	444c      	add	r4, r9
 8005dde:	1b2d      	subs	r5, r5, r4
 8005de0:	1963      	adds	r3, r4, r5
 8005de2:	42bb      	cmp	r3, r7
 8005de4:	db04      	blt.n	8005df0 <__s2b+0x78>
 8005de6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dea:	2509      	movs	r5, #9
 8005dec:	340a      	adds	r4, #10
 8005dee:	e7f6      	b.n	8005dde <__s2b+0x66>
 8005df0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005df4:	4601      	mov	r1, r0
 8005df6:	220a      	movs	r2, #10
 8005df8:	4630      	mov	r0, r6
 8005dfa:	3b30      	subs	r3, #48	; 0x30
 8005dfc:	f7ff ff76 	bl	8005cec <__multadd>
 8005e00:	e7ee      	b.n	8005de0 <__s2b+0x68>
 8005e02:	bf00      	nop
 8005e04:	08008607 	.word	0x08008607
 8005e08:	08008618 	.word	0x08008618

08005e0c <__hi0bits>:
 8005e0c:	0c02      	lsrs	r2, r0, #16
 8005e0e:	0412      	lsls	r2, r2, #16
 8005e10:	4603      	mov	r3, r0
 8005e12:	b9ca      	cbnz	r2, 8005e48 <__hi0bits+0x3c>
 8005e14:	0403      	lsls	r3, r0, #16
 8005e16:	2010      	movs	r0, #16
 8005e18:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005e1c:	bf04      	itt	eq
 8005e1e:	021b      	lsleq	r3, r3, #8
 8005e20:	3008      	addeq	r0, #8
 8005e22:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005e26:	bf04      	itt	eq
 8005e28:	011b      	lsleq	r3, r3, #4
 8005e2a:	3004      	addeq	r0, #4
 8005e2c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005e30:	bf04      	itt	eq
 8005e32:	009b      	lsleq	r3, r3, #2
 8005e34:	3002      	addeq	r0, #2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	db05      	blt.n	8005e46 <__hi0bits+0x3a>
 8005e3a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005e3e:	f100 0001 	add.w	r0, r0, #1
 8005e42:	bf08      	it	eq
 8005e44:	2020      	moveq	r0, #32
 8005e46:	4770      	bx	lr
 8005e48:	2000      	movs	r0, #0
 8005e4a:	e7e5      	b.n	8005e18 <__hi0bits+0xc>

08005e4c <__lo0bits>:
 8005e4c:	6803      	ldr	r3, [r0, #0]
 8005e4e:	4602      	mov	r2, r0
 8005e50:	f013 0007 	ands.w	r0, r3, #7
 8005e54:	d00b      	beq.n	8005e6e <__lo0bits+0x22>
 8005e56:	07d9      	lsls	r1, r3, #31
 8005e58:	d421      	bmi.n	8005e9e <__lo0bits+0x52>
 8005e5a:	0798      	lsls	r0, r3, #30
 8005e5c:	bf49      	itett	mi
 8005e5e:	085b      	lsrmi	r3, r3, #1
 8005e60:	089b      	lsrpl	r3, r3, #2
 8005e62:	2001      	movmi	r0, #1
 8005e64:	6013      	strmi	r3, [r2, #0]
 8005e66:	bf5c      	itt	pl
 8005e68:	2002      	movpl	r0, #2
 8005e6a:	6013      	strpl	r3, [r2, #0]
 8005e6c:	4770      	bx	lr
 8005e6e:	b299      	uxth	r1, r3
 8005e70:	b909      	cbnz	r1, 8005e76 <__lo0bits+0x2a>
 8005e72:	2010      	movs	r0, #16
 8005e74:	0c1b      	lsrs	r3, r3, #16
 8005e76:	b2d9      	uxtb	r1, r3
 8005e78:	b909      	cbnz	r1, 8005e7e <__lo0bits+0x32>
 8005e7a:	3008      	adds	r0, #8
 8005e7c:	0a1b      	lsrs	r3, r3, #8
 8005e7e:	0719      	lsls	r1, r3, #28
 8005e80:	bf04      	itt	eq
 8005e82:	091b      	lsreq	r3, r3, #4
 8005e84:	3004      	addeq	r0, #4
 8005e86:	0799      	lsls	r1, r3, #30
 8005e88:	bf04      	itt	eq
 8005e8a:	089b      	lsreq	r3, r3, #2
 8005e8c:	3002      	addeq	r0, #2
 8005e8e:	07d9      	lsls	r1, r3, #31
 8005e90:	d403      	bmi.n	8005e9a <__lo0bits+0x4e>
 8005e92:	085b      	lsrs	r3, r3, #1
 8005e94:	f100 0001 	add.w	r0, r0, #1
 8005e98:	d003      	beq.n	8005ea2 <__lo0bits+0x56>
 8005e9a:	6013      	str	r3, [r2, #0]
 8005e9c:	4770      	bx	lr
 8005e9e:	2000      	movs	r0, #0
 8005ea0:	4770      	bx	lr
 8005ea2:	2020      	movs	r0, #32
 8005ea4:	4770      	bx	lr
	...

08005ea8 <__i2b>:
 8005ea8:	b510      	push	{r4, lr}
 8005eaa:	460c      	mov	r4, r1
 8005eac:	2101      	movs	r1, #1
 8005eae:	f7ff febb 	bl	8005c28 <_Balloc>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	b928      	cbnz	r0, 8005ec2 <__i2b+0x1a>
 8005eb6:	f240 1145 	movw	r1, #325	; 0x145
 8005eba:	4b04      	ldr	r3, [pc, #16]	; (8005ecc <__i2b+0x24>)
 8005ebc:	4804      	ldr	r0, [pc, #16]	; (8005ed0 <__i2b+0x28>)
 8005ebe:	f001 fc3f 	bl	8007740 <__assert_func>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	6144      	str	r4, [r0, #20]
 8005ec6:	6103      	str	r3, [r0, #16]
 8005ec8:	bd10      	pop	{r4, pc}
 8005eca:	bf00      	nop
 8005ecc:	08008607 	.word	0x08008607
 8005ed0:	08008618 	.word	0x08008618

08005ed4 <__multiply>:
 8005ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed8:	4691      	mov	r9, r2
 8005eda:	690a      	ldr	r2, [r1, #16]
 8005edc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005ee0:	460c      	mov	r4, r1
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	bfbe      	ittt	lt
 8005ee6:	460b      	movlt	r3, r1
 8005ee8:	464c      	movlt	r4, r9
 8005eea:	4699      	movlt	r9, r3
 8005eec:	6927      	ldr	r7, [r4, #16]
 8005eee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005ef2:	68a3      	ldr	r3, [r4, #8]
 8005ef4:	6861      	ldr	r1, [r4, #4]
 8005ef6:	eb07 060a 	add.w	r6, r7, sl
 8005efa:	42b3      	cmp	r3, r6
 8005efc:	b085      	sub	sp, #20
 8005efe:	bfb8      	it	lt
 8005f00:	3101      	addlt	r1, #1
 8005f02:	f7ff fe91 	bl	8005c28 <_Balloc>
 8005f06:	b930      	cbnz	r0, 8005f16 <__multiply+0x42>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005f0e:	4b43      	ldr	r3, [pc, #268]	; (800601c <__multiply+0x148>)
 8005f10:	4843      	ldr	r0, [pc, #268]	; (8006020 <__multiply+0x14c>)
 8005f12:	f001 fc15 	bl	8007740 <__assert_func>
 8005f16:	f100 0514 	add.w	r5, r0, #20
 8005f1a:	462b      	mov	r3, r5
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005f22:	4543      	cmp	r3, r8
 8005f24:	d321      	bcc.n	8005f6a <__multiply+0x96>
 8005f26:	f104 0314 	add.w	r3, r4, #20
 8005f2a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005f2e:	f109 0314 	add.w	r3, r9, #20
 8005f32:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005f36:	9202      	str	r2, [sp, #8]
 8005f38:	1b3a      	subs	r2, r7, r4
 8005f3a:	3a15      	subs	r2, #21
 8005f3c:	f022 0203 	bic.w	r2, r2, #3
 8005f40:	3204      	adds	r2, #4
 8005f42:	f104 0115 	add.w	r1, r4, #21
 8005f46:	428f      	cmp	r7, r1
 8005f48:	bf38      	it	cc
 8005f4a:	2204      	movcc	r2, #4
 8005f4c:	9201      	str	r2, [sp, #4]
 8005f4e:	9a02      	ldr	r2, [sp, #8]
 8005f50:	9303      	str	r3, [sp, #12]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d80c      	bhi.n	8005f70 <__multiply+0x9c>
 8005f56:	2e00      	cmp	r6, #0
 8005f58:	dd03      	ble.n	8005f62 <__multiply+0x8e>
 8005f5a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d05a      	beq.n	8006018 <__multiply+0x144>
 8005f62:	6106      	str	r6, [r0, #16]
 8005f64:	b005      	add	sp, #20
 8005f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f6a:	f843 2b04 	str.w	r2, [r3], #4
 8005f6e:	e7d8      	b.n	8005f22 <__multiply+0x4e>
 8005f70:	f8b3 a000 	ldrh.w	sl, [r3]
 8005f74:	f1ba 0f00 	cmp.w	sl, #0
 8005f78:	d023      	beq.n	8005fc2 <__multiply+0xee>
 8005f7a:	46a9      	mov	r9, r5
 8005f7c:	f04f 0c00 	mov.w	ip, #0
 8005f80:	f104 0e14 	add.w	lr, r4, #20
 8005f84:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005f88:	f8d9 1000 	ldr.w	r1, [r9]
 8005f8c:	fa1f fb82 	uxth.w	fp, r2
 8005f90:	b289      	uxth	r1, r1
 8005f92:	fb0a 110b 	mla	r1, sl, fp, r1
 8005f96:	4461      	add	r1, ip
 8005f98:	f8d9 c000 	ldr.w	ip, [r9]
 8005f9c:	0c12      	lsrs	r2, r2, #16
 8005f9e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005fa2:	fb0a c202 	mla	r2, sl, r2, ip
 8005fa6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005faa:	b289      	uxth	r1, r1
 8005fac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005fb0:	4577      	cmp	r7, lr
 8005fb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005fb6:	f849 1b04 	str.w	r1, [r9], #4
 8005fba:	d8e3      	bhi.n	8005f84 <__multiply+0xb0>
 8005fbc:	9a01      	ldr	r2, [sp, #4]
 8005fbe:	f845 c002 	str.w	ip, [r5, r2]
 8005fc2:	9a03      	ldr	r2, [sp, #12]
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005fca:	f1b9 0f00 	cmp.w	r9, #0
 8005fce:	d021      	beq.n	8006014 <__multiply+0x140>
 8005fd0:	46ae      	mov	lr, r5
 8005fd2:	f04f 0a00 	mov.w	sl, #0
 8005fd6:	6829      	ldr	r1, [r5, #0]
 8005fd8:	f104 0c14 	add.w	ip, r4, #20
 8005fdc:	f8bc b000 	ldrh.w	fp, [ip]
 8005fe0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005fe4:	b289      	uxth	r1, r1
 8005fe6:	fb09 220b 	mla	r2, r9, fp, r2
 8005fea:	4452      	add	r2, sl
 8005fec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005ff0:	f84e 1b04 	str.w	r1, [lr], #4
 8005ff4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005ff8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005ffc:	f8be 1000 	ldrh.w	r1, [lr]
 8006000:	4567      	cmp	r7, ip
 8006002:	fb09 110a 	mla	r1, r9, sl, r1
 8006006:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800600a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800600e:	d8e5      	bhi.n	8005fdc <__multiply+0x108>
 8006010:	9a01      	ldr	r2, [sp, #4]
 8006012:	50a9      	str	r1, [r5, r2]
 8006014:	3504      	adds	r5, #4
 8006016:	e79a      	b.n	8005f4e <__multiply+0x7a>
 8006018:	3e01      	subs	r6, #1
 800601a:	e79c      	b.n	8005f56 <__multiply+0x82>
 800601c:	08008607 	.word	0x08008607
 8006020:	08008618 	.word	0x08008618

08006024 <__pow5mult>:
 8006024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006028:	4615      	mov	r5, r2
 800602a:	f012 0203 	ands.w	r2, r2, #3
 800602e:	4606      	mov	r6, r0
 8006030:	460f      	mov	r7, r1
 8006032:	d007      	beq.n	8006044 <__pow5mult+0x20>
 8006034:	4c25      	ldr	r4, [pc, #148]	; (80060cc <__pow5mult+0xa8>)
 8006036:	3a01      	subs	r2, #1
 8006038:	2300      	movs	r3, #0
 800603a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800603e:	f7ff fe55 	bl	8005cec <__multadd>
 8006042:	4607      	mov	r7, r0
 8006044:	10ad      	asrs	r5, r5, #2
 8006046:	d03d      	beq.n	80060c4 <__pow5mult+0xa0>
 8006048:	69f4      	ldr	r4, [r6, #28]
 800604a:	b97c      	cbnz	r4, 800606c <__pow5mult+0x48>
 800604c:	2010      	movs	r0, #16
 800604e:	f7ff fd37 	bl	8005ac0 <malloc>
 8006052:	4602      	mov	r2, r0
 8006054:	61f0      	str	r0, [r6, #28]
 8006056:	b928      	cbnz	r0, 8006064 <__pow5mult+0x40>
 8006058:	f240 11b3 	movw	r1, #435	; 0x1b3
 800605c:	4b1c      	ldr	r3, [pc, #112]	; (80060d0 <__pow5mult+0xac>)
 800605e:	481d      	ldr	r0, [pc, #116]	; (80060d4 <__pow5mult+0xb0>)
 8006060:	f001 fb6e 	bl	8007740 <__assert_func>
 8006064:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006068:	6004      	str	r4, [r0, #0]
 800606a:	60c4      	str	r4, [r0, #12]
 800606c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006070:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006074:	b94c      	cbnz	r4, 800608a <__pow5mult+0x66>
 8006076:	f240 2171 	movw	r1, #625	; 0x271
 800607a:	4630      	mov	r0, r6
 800607c:	f7ff ff14 	bl	8005ea8 <__i2b>
 8006080:	2300      	movs	r3, #0
 8006082:	4604      	mov	r4, r0
 8006084:	f8c8 0008 	str.w	r0, [r8, #8]
 8006088:	6003      	str	r3, [r0, #0]
 800608a:	f04f 0900 	mov.w	r9, #0
 800608e:	07eb      	lsls	r3, r5, #31
 8006090:	d50a      	bpl.n	80060a8 <__pow5mult+0x84>
 8006092:	4639      	mov	r1, r7
 8006094:	4622      	mov	r2, r4
 8006096:	4630      	mov	r0, r6
 8006098:	f7ff ff1c 	bl	8005ed4 <__multiply>
 800609c:	4680      	mov	r8, r0
 800609e:	4639      	mov	r1, r7
 80060a0:	4630      	mov	r0, r6
 80060a2:	f7ff fe01 	bl	8005ca8 <_Bfree>
 80060a6:	4647      	mov	r7, r8
 80060a8:	106d      	asrs	r5, r5, #1
 80060aa:	d00b      	beq.n	80060c4 <__pow5mult+0xa0>
 80060ac:	6820      	ldr	r0, [r4, #0]
 80060ae:	b938      	cbnz	r0, 80060c0 <__pow5mult+0x9c>
 80060b0:	4622      	mov	r2, r4
 80060b2:	4621      	mov	r1, r4
 80060b4:	4630      	mov	r0, r6
 80060b6:	f7ff ff0d 	bl	8005ed4 <__multiply>
 80060ba:	6020      	str	r0, [r4, #0]
 80060bc:	f8c0 9000 	str.w	r9, [r0]
 80060c0:	4604      	mov	r4, r0
 80060c2:	e7e4      	b.n	800608e <__pow5mult+0x6a>
 80060c4:	4638      	mov	r0, r7
 80060c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060ca:	bf00      	nop
 80060cc:	08008768 	.word	0x08008768
 80060d0:	08008598 	.word	0x08008598
 80060d4:	08008618 	.word	0x08008618

080060d8 <__lshift>:
 80060d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060dc:	460c      	mov	r4, r1
 80060de:	4607      	mov	r7, r0
 80060e0:	4691      	mov	r9, r2
 80060e2:	6923      	ldr	r3, [r4, #16]
 80060e4:	6849      	ldr	r1, [r1, #4]
 80060e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80060ea:	68a3      	ldr	r3, [r4, #8]
 80060ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80060f0:	f108 0601 	add.w	r6, r8, #1
 80060f4:	42b3      	cmp	r3, r6
 80060f6:	db0b      	blt.n	8006110 <__lshift+0x38>
 80060f8:	4638      	mov	r0, r7
 80060fa:	f7ff fd95 	bl	8005c28 <_Balloc>
 80060fe:	4605      	mov	r5, r0
 8006100:	b948      	cbnz	r0, 8006116 <__lshift+0x3e>
 8006102:	4602      	mov	r2, r0
 8006104:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006108:	4b27      	ldr	r3, [pc, #156]	; (80061a8 <__lshift+0xd0>)
 800610a:	4828      	ldr	r0, [pc, #160]	; (80061ac <__lshift+0xd4>)
 800610c:	f001 fb18 	bl	8007740 <__assert_func>
 8006110:	3101      	adds	r1, #1
 8006112:	005b      	lsls	r3, r3, #1
 8006114:	e7ee      	b.n	80060f4 <__lshift+0x1c>
 8006116:	2300      	movs	r3, #0
 8006118:	f100 0114 	add.w	r1, r0, #20
 800611c:	f100 0210 	add.w	r2, r0, #16
 8006120:	4618      	mov	r0, r3
 8006122:	4553      	cmp	r3, sl
 8006124:	db33      	blt.n	800618e <__lshift+0xb6>
 8006126:	6920      	ldr	r0, [r4, #16]
 8006128:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800612c:	f104 0314 	add.w	r3, r4, #20
 8006130:	f019 091f 	ands.w	r9, r9, #31
 8006134:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006138:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800613c:	d02b      	beq.n	8006196 <__lshift+0xbe>
 800613e:	468a      	mov	sl, r1
 8006140:	2200      	movs	r2, #0
 8006142:	f1c9 0e20 	rsb	lr, r9, #32
 8006146:	6818      	ldr	r0, [r3, #0]
 8006148:	fa00 f009 	lsl.w	r0, r0, r9
 800614c:	4310      	orrs	r0, r2
 800614e:	f84a 0b04 	str.w	r0, [sl], #4
 8006152:	f853 2b04 	ldr.w	r2, [r3], #4
 8006156:	459c      	cmp	ip, r3
 8006158:	fa22 f20e 	lsr.w	r2, r2, lr
 800615c:	d8f3      	bhi.n	8006146 <__lshift+0x6e>
 800615e:	ebac 0304 	sub.w	r3, ip, r4
 8006162:	3b15      	subs	r3, #21
 8006164:	f023 0303 	bic.w	r3, r3, #3
 8006168:	3304      	adds	r3, #4
 800616a:	f104 0015 	add.w	r0, r4, #21
 800616e:	4584      	cmp	ip, r0
 8006170:	bf38      	it	cc
 8006172:	2304      	movcc	r3, #4
 8006174:	50ca      	str	r2, [r1, r3]
 8006176:	b10a      	cbz	r2, 800617c <__lshift+0xa4>
 8006178:	f108 0602 	add.w	r6, r8, #2
 800617c:	3e01      	subs	r6, #1
 800617e:	4638      	mov	r0, r7
 8006180:	4621      	mov	r1, r4
 8006182:	612e      	str	r6, [r5, #16]
 8006184:	f7ff fd90 	bl	8005ca8 <_Bfree>
 8006188:	4628      	mov	r0, r5
 800618a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800618e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006192:	3301      	adds	r3, #1
 8006194:	e7c5      	b.n	8006122 <__lshift+0x4a>
 8006196:	3904      	subs	r1, #4
 8006198:	f853 2b04 	ldr.w	r2, [r3], #4
 800619c:	459c      	cmp	ip, r3
 800619e:	f841 2f04 	str.w	r2, [r1, #4]!
 80061a2:	d8f9      	bhi.n	8006198 <__lshift+0xc0>
 80061a4:	e7ea      	b.n	800617c <__lshift+0xa4>
 80061a6:	bf00      	nop
 80061a8:	08008607 	.word	0x08008607
 80061ac:	08008618 	.word	0x08008618

080061b0 <__mcmp>:
 80061b0:	4603      	mov	r3, r0
 80061b2:	690a      	ldr	r2, [r1, #16]
 80061b4:	6900      	ldr	r0, [r0, #16]
 80061b6:	b530      	push	{r4, r5, lr}
 80061b8:	1a80      	subs	r0, r0, r2
 80061ba:	d10d      	bne.n	80061d8 <__mcmp+0x28>
 80061bc:	3314      	adds	r3, #20
 80061be:	3114      	adds	r1, #20
 80061c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80061c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80061c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80061cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80061d0:	4295      	cmp	r5, r2
 80061d2:	d002      	beq.n	80061da <__mcmp+0x2a>
 80061d4:	d304      	bcc.n	80061e0 <__mcmp+0x30>
 80061d6:	2001      	movs	r0, #1
 80061d8:	bd30      	pop	{r4, r5, pc}
 80061da:	42a3      	cmp	r3, r4
 80061dc:	d3f4      	bcc.n	80061c8 <__mcmp+0x18>
 80061de:	e7fb      	b.n	80061d8 <__mcmp+0x28>
 80061e0:	f04f 30ff 	mov.w	r0, #4294967295
 80061e4:	e7f8      	b.n	80061d8 <__mcmp+0x28>
	...

080061e8 <__mdiff>:
 80061e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ec:	460d      	mov	r5, r1
 80061ee:	4607      	mov	r7, r0
 80061f0:	4611      	mov	r1, r2
 80061f2:	4628      	mov	r0, r5
 80061f4:	4614      	mov	r4, r2
 80061f6:	f7ff ffdb 	bl	80061b0 <__mcmp>
 80061fa:	1e06      	subs	r6, r0, #0
 80061fc:	d111      	bne.n	8006222 <__mdiff+0x3a>
 80061fe:	4631      	mov	r1, r6
 8006200:	4638      	mov	r0, r7
 8006202:	f7ff fd11 	bl	8005c28 <_Balloc>
 8006206:	4602      	mov	r2, r0
 8006208:	b928      	cbnz	r0, 8006216 <__mdiff+0x2e>
 800620a:	f240 2137 	movw	r1, #567	; 0x237
 800620e:	4b3a      	ldr	r3, [pc, #232]	; (80062f8 <__mdiff+0x110>)
 8006210:	483a      	ldr	r0, [pc, #232]	; (80062fc <__mdiff+0x114>)
 8006212:	f001 fa95 	bl	8007740 <__assert_func>
 8006216:	2301      	movs	r3, #1
 8006218:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800621c:	4610      	mov	r0, r2
 800621e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006222:	bfa4      	itt	ge
 8006224:	4623      	movge	r3, r4
 8006226:	462c      	movge	r4, r5
 8006228:	4638      	mov	r0, r7
 800622a:	6861      	ldr	r1, [r4, #4]
 800622c:	bfa6      	itte	ge
 800622e:	461d      	movge	r5, r3
 8006230:	2600      	movge	r6, #0
 8006232:	2601      	movlt	r6, #1
 8006234:	f7ff fcf8 	bl	8005c28 <_Balloc>
 8006238:	4602      	mov	r2, r0
 800623a:	b918      	cbnz	r0, 8006244 <__mdiff+0x5c>
 800623c:	f240 2145 	movw	r1, #581	; 0x245
 8006240:	4b2d      	ldr	r3, [pc, #180]	; (80062f8 <__mdiff+0x110>)
 8006242:	e7e5      	b.n	8006210 <__mdiff+0x28>
 8006244:	f102 0814 	add.w	r8, r2, #20
 8006248:	46c2      	mov	sl, r8
 800624a:	f04f 0c00 	mov.w	ip, #0
 800624e:	6927      	ldr	r7, [r4, #16]
 8006250:	60c6      	str	r6, [r0, #12]
 8006252:	692e      	ldr	r6, [r5, #16]
 8006254:	f104 0014 	add.w	r0, r4, #20
 8006258:	f105 0914 	add.w	r9, r5, #20
 800625c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006260:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006264:	3410      	adds	r4, #16
 8006266:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800626a:	f859 3b04 	ldr.w	r3, [r9], #4
 800626e:	fa1f f18b 	uxth.w	r1, fp
 8006272:	4461      	add	r1, ip
 8006274:	fa1f fc83 	uxth.w	ip, r3
 8006278:	0c1b      	lsrs	r3, r3, #16
 800627a:	eba1 010c 	sub.w	r1, r1, ip
 800627e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006282:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006286:	b289      	uxth	r1, r1
 8006288:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800628c:	454e      	cmp	r6, r9
 800628e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006292:	f84a 1b04 	str.w	r1, [sl], #4
 8006296:	d8e6      	bhi.n	8006266 <__mdiff+0x7e>
 8006298:	1b73      	subs	r3, r6, r5
 800629a:	3b15      	subs	r3, #21
 800629c:	f023 0303 	bic.w	r3, r3, #3
 80062a0:	3515      	adds	r5, #21
 80062a2:	3304      	adds	r3, #4
 80062a4:	42ae      	cmp	r6, r5
 80062a6:	bf38      	it	cc
 80062a8:	2304      	movcc	r3, #4
 80062aa:	4418      	add	r0, r3
 80062ac:	4443      	add	r3, r8
 80062ae:	461e      	mov	r6, r3
 80062b0:	4605      	mov	r5, r0
 80062b2:	4575      	cmp	r5, lr
 80062b4:	d30e      	bcc.n	80062d4 <__mdiff+0xec>
 80062b6:	f10e 0103 	add.w	r1, lr, #3
 80062ba:	1a09      	subs	r1, r1, r0
 80062bc:	f021 0103 	bic.w	r1, r1, #3
 80062c0:	3803      	subs	r0, #3
 80062c2:	4586      	cmp	lr, r0
 80062c4:	bf38      	it	cc
 80062c6:	2100      	movcc	r1, #0
 80062c8:	440b      	add	r3, r1
 80062ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80062ce:	b189      	cbz	r1, 80062f4 <__mdiff+0x10c>
 80062d0:	6117      	str	r7, [r2, #16]
 80062d2:	e7a3      	b.n	800621c <__mdiff+0x34>
 80062d4:	f855 8b04 	ldr.w	r8, [r5], #4
 80062d8:	fa1f f188 	uxth.w	r1, r8
 80062dc:	4461      	add	r1, ip
 80062de:	140c      	asrs	r4, r1, #16
 80062e0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80062e4:	b289      	uxth	r1, r1
 80062e6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80062ea:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80062ee:	f846 1b04 	str.w	r1, [r6], #4
 80062f2:	e7de      	b.n	80062b2 <__mdiff+0xca>
 80062f4:	3f01      	subs	r7, #1
 80062f6:	e7e8      	b.n	80062ca <__mdiff+0xe2>
 80062f8:	08008607 	.word	0x08008607
 80062fc:	08008618 	.word	0x08008618

08006300 <__ulp>:
 8006300:	4b0e      	ldr	r3, [pc, #56]	; (800633c <__ulp+0x3c>)
 8006302:	400b      	ands	r3, r1
 8006304:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006308:	2b00      	cmp	r3, #0
 800630a:	dc08      	bgt.n	800631e <__ulp+0x1e>
 800630c:	425b      	negs	r3, r3
 800630e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006312:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006316:	da04      	bge.n	8006322 <__ulp+0x22>
 8006318:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800631c:	4113      	asrs	r3, r2
 800631e:	2200      	movs	r2, #0
 8006320:	e008      	b.n	8006334 <__ulp+0x34>
 8006322:	f1a2 0314 	sub.w	r3, r2, #20
 8006326:	2b1e      	cmp	r3, #30
 8006328:	bfd6      	itet	le
 800632a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800632e:	2201      	movgt	r2, #1
 8006330:	40da      	lsrle	r2, r3
 8006332:	2300      	movs	r3, #0
 8006334:	4619      	mov	r1, r3
 8006336:	4610      	mov	r0, r2
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	7ff00000 	.word	0x7ff00000

08006340 <__b2d>:
 8006340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006342:	6905      	ldr	r5, [r0, #16]
 8006344:	f100 0714 	add.w	r7, r0, #20
 8006348:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800634c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006350:	1f2e      	subs	r6, r5, #4
 8006352:	4620      	mov	r0, r4
 8006354:	f7ff fd5a 	bl	8005e0c <__hi0bits>
 8006358:	f1c0 0220 	rsb	r2, r0, #32
 800635c:	280a      	cmp	r0, #10
 800635e:	4603      	mov	r3, r0
 8006360:	f8df c068 	ldr.w	ip, [pc, #104]	; 80063cc <__b2d+0x8c>
 8006364:	600a      	str	r2, [r1, #0]
 8006366:	dc12      	bgt.n	800638e <__b2d+0x4e>
 8006368:	f1c0 0e0b 	rsb	lr, r0, #11
 800636c:	fa24 f20e 	lsr.w	r2, r4, lr
 8006370:	42b7      	cmp	r7, r6
 8006372:	ea42 010c 	orr.w	r1, r2, ip
 8006376:	bf2c      	ite	cs
 8006378:	2200      	movcs	r2, #0
 800637a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800637e:	3315      	adds	r3, #21
 8006380:	fa04 f303 	lsl.w	r3, r4, r3
 8006384:	fa22 f20e 	lsr.w	r2, r2, lr
 8006388:	431a      	orrs	r2, r3
 800638a:	4610      	mov	r0, r2
 800638c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800638e:	42b7      	cmp	r7, r6
 8006390:	bf2e      	itee	cs
 8006392:	2200      	movcs	r2, #0
 8006394:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006398:	f1a5 0608 	subcc.w	r6, r5, #8
 800639c:	3b0b      	subs	r3, #11
 800639e:	d012      	beq.n	80063c6 <__b2d+0x86>
 80063a0:	f1c3 0520 	rsb	r5, r3, #32
 80063a4:	fa22 f105 	lsr.w	r1, r2, r5
 80063a8:	409c      	lsls	r4, r3
 80063aa:	430c      	orrs	r4, r1
 80063ac:	42be      	cmp	r6, r7
 80063ae:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 80063b2:	bf94      	ite	ls
 80063b4:	2400      	movls	r4, #0
 80063b6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80063ba:	409a      	lsls	r2, r3
 80063bc:	40ec      	lsrs	r4, r5
 80063be:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80063c2:	4322      	orrs	r2, r4
 80063c4:	e7e1      	b.n	800638a <__b2d+0x4a>
 80063c6:	ea44 010c 	orr.w	r1, r4, ip
 80063ca:	e7de      	b.n	800638a <__b2d+0x4a>
 80063cc:	3ff00000 	.word	0x3ff00000

080063d0 <__d2b>:
 80063d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063d2:	2101      	movs	r1, #1
 80063d4:	4617      	mov	r7, r2
 80063d6:	461c      	mov	r4, r3
 80063d8:	9e08      	ldr	r6, [sp, #32]
 80063da:	f7ff fc25 	bl	8005c28 <_Balloc>
 80063de:	4605      	mov	r5, r0
 80063e0:	b930      	cbnz	r0, 80063f0 <__d2b+0x20>
 80063e2:	4602      	mov	r2, r0
 80063e4:	f240 310f 	movw	r1, #783	; 0x30f
 80063e8:	4b22      	ldr	r3, [pc, #136]	; (8006474 <__d2b+0xa4>)
 80063ea:	4823      	ldr	r0, [pc, #140]	; (8006478 <__d2b+0xa8>)
 80063ec:	f001 f9a8 	bl	8007740 <__assert_func>
 80063f0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80063f4:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80063f8:	bb24      	cbnz	r4, 8006444 <__d2b+0x74>
 80063fa:	2f00      	cmp	r7, #0
 80063fc:	9301      	str	r3, [sp, #4]
 80063fe:	d026      	beq.n	800644e <__d2b+0x7e>
 8006400:	4668      	mov	r0, sp
 8006402:	9700      	str	r7, [sp, #0]
 8006404:	f7ff fd22 	bl	8005e4c <__lo0bits>
 8006408:	e9dd 1200 	ldrd	r1, r2, [sp]
 800640c:	b1e8      	cbz	r0, 800644a <__d2b+0x7a>
 800640e:	f1c0 0320 	rsb	r3, r0, #32
 8006412:	fa02 f303 	lsl.w	r3, r2, r3
 8006416:	430b      	orrs	r3, r1
 8006418:	40c2      	lsrs	r2, r0
 800641a:	616b      	str	r3, [r5, #20]
 800641c:	9201      	str	r2, [sp, #4]
 800641e:	9b01      	ldr	r3, [sp, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	bf14      	ite	ne
 8006424:	2102      	movne	r1, #2
 8006426:	2101      	moveq	r1, #1
 8006428:	61ab      	str	r3, [r5, #24]
 800642a:	6129      	str	r1, [r5, #16]
 800642c:	b1bc      	cbz	r4, 800645e <__d2b+0x8e>
 800642e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006432:	4404      	add	r4, r0
 8006434:	6034      	str	r4, [r6, #0]
 8006436:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800643a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800643c:	6018      	str	r0, [r3, #0]
 800643e:	4628      	mov	r0, r5
 8006440:	b003      	add	sp, #12
 8006442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006444:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006448:	e7d7      	b.n	80063fa <__d2b+0x2a>
 800644a:	6169      	str	r1, [r5, #20]
 800644c:	e7e7      	b.n	800641e <__d2b+0x4e>
 800644e:	a801      	add	r0, sp, #4
 8006450:	f7ff fcfc 	bl	8005e4c <__lo0bits>
 8006454:	9b01      	ldr	r3, [sp, #4]
 8006456:	2101      	movs	r1, #1
 8006458:	616b      	str	r3, [r5, #20]
 800645a:	3020      	adds	r0, #32
 800645c:	e7e5      	b.n	800642a <__d2b+0x5a>
 800645e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006462:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8006466:	6030      	str	r0, [r6, #0]
 8006468:	6918      	ldr	r0, [r3, #16]
 800646a:	f7ff fccf 	bl	8005e0c <__hi0bits>
 800646e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006472:	e7e2      	b.n	800643a <__d2b+0x6a>
 8006474:	08008607 	.word	0x08008607
 8006478:	08008618 	.word	0x08008618

0800647c <__ratio>:
 800647c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006480:	4688      	mov	r8, r1
 8006482:	4669      	mov	r1, sp
 8006484:	4681      	mov	r9, r0
 8006486:	f7ff ff5b 	bl	8006340 <__b2d>
 800648a:	460f      	mov	r7, r1
 800648c:	4604      	mov	r4, r0
 800648e:	460d      	mov	r5, r1
 8006490:	4640      	mov	r0, r8
 8006492:	a901      	add	r1, sp, #4
 8006494:	f7ff ff54 	bl	8006340 <__b2d>
 8006498:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800649c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80064a0:	468b      	mov	fp, r1
 80064a2:	eba3 0c02 	sub.w	ip, r3, r2
 80064a6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80064aa:	1a9b      	subs	r3, r3, r2
 80064ac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	bfd5      	itete	le
 80064b4:	460a      	movle	r2, r1
 80064b6:	462a      	movgt	r2, r5
 80064b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80064bc:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80064c0:	bfd8      	it	le
 80064c2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80064c6:	465b      	mov	r3, fp
 80064c8:	4602      	mov	r2, r0
 80064ca:	4639      	mov	r1, r7
 80064cc:	4620      	mov	r0, r4
 80064ce:	f7fa f92d 	bl	800072c <__aeabi_ddiv>
 80064d2:	b003      	add	sp, #12
 80064d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080064d8 <__copybits>:
 80064d8:	3901      	subs	r1, #1
 80064da:	b570      	push	{r4, r5, r6, lr}
 80064dc:	1149      	asrs	r1, r1, #5
 80064de:	6914      	ldr	r4, [r2, #16]
 80064e0:	3101      	adds	r1, #1
 80064e2:	f102 0314 	add.w	r3, r2, #20
 80064e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80064ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80064ee:	1f05      	subs	r5, r0, #4
 80064f0:	42a3      	cmp	r3, r4
 80064f2:	d30c      	bcc.n	800650e <__copybits+0x36>
 80064f4:	1aa3      	subs	r3, r4, r2
 80064f6:	3b11      	subs	r3, #17
 80064f8:	f023 0303 	bic.w	r3, r3, #3
 80064fc:	3211      	adds	r2, #17
 80064fe:	42a2      	cmp	r2, r4
 8006500:	bf88      	it	hi
 8006502:	2300      	movhi	r3, #0
 8006504:	4418      	add	r0, r3
 8006506:	2300      	movs	r3, #0
 8006508:	4288      	cmp	r0, r1
 800650a:	d305      	bcc.n	8006518 <__copybits+0x40>
 800650c:	bd70      	pop	{r4, r5, r6, pc}
 800650e:	f853 6b04 	ldr.w	r6, [r3], #4
 8006512:	f845 6f04 	str.w	r6, [r5, #4]!
 8006516:	e7eb      	b.n	80064f0 <__copybits+0x18>
 8006518:	f840 3b04 	str.w	r3, [r0], #4
 800651c:	e7f4      	b.n	8006508 <__copybits+0x30>

0800651e <__any_on>:
 800651e:	f100 0214 	add.w	r2, r0, #20
 8006522:	6900      	ldr	r0, [r0, #16]
 8006524:	114b      	asrs	r3, r1, #5
 8006526:	4298      	cmp	r0, r3
 8006528:	b510      	push	{r4, lr}
 800652a:	db11      	blt.n	8006550 <__any_on+0x32>
 800652c:	dd0a      	ble.n	8006544 <__any_on+0x26>
 800652e:	f011 011f 	ands.w	r1, r1, #31
 8006532:	d007      	beq.n	8006544 <__any_on+0x26>
 8006534:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006538:	fa24 f001 	lsr.w	r0, r4, r1
 800653c:	fa00 f101 	lsl.w	r1, r0, r1
 8006540:	428c      	cmp	r4, r1
 8006542:	d10b      	bne.n	800655c <__any_on+0x3e>
 8006544:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006548:	4293      	cmp	r3, r2
 800654a:	d803      	bhi.n	8006554 <__any_on+0x36>
 800654c:	2000      	movs	r0, #0
 800654e:	bd10      	pop	{r4, pc}
 8006550:	4603      	mov	r3, r0
 8006552:	e7f7      	b.n	8006544 <__any_on+0x26>
 8006554:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006558:	2900      	cmp	r1, #0
 800655a:	d0f5      	beq.n	8006548 <__any_on+0x2a>
 800655c:	2001      	movs	r0, #1
 800655e:	e7f6      	b.n	800654e <__any_on+0x30>

08006560 <sulp>:
 8006560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006564:	460f      	mov	r7, r1
 8006566:	4690      	mov	r8, r2
 8006568:	f7ff feca 	bl	8006300 <__ulp>
 800656c:	4604      	mov	r4, r0
 800656e:	460d      	mov	r5, r1
 8006570:	f1b8 0f00 	cmp.w	r8, #0
 8006574:	d011      	beq.n	800659a <sulp+0x3a>
 8006576:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800657a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800657e:	2b00      	cmp	r3, #0
 8006580:	dd0b      	ble.n	800659a <sulp+0x3a>
 8006582:	2400      	movs	r4, #0
 8006584:	051b      	lsls	r3, r3, #20
 8006586:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800658a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800658e:	4622      	mov	r2, r4
 8006590:	462b      	mov	r3, r5
 8006592:	f7f9 ffa1 	bl	80004d8 <__aeabi_dmul>
 8006596:	4604      	mov	r4, r0
 8006598:	460d      	mov	r5, r1
 800659a:	4620      	mov	r0, r4
 800659c:	4629      	mov	r1, r5
 800659e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065a2:	0000      	movs	r0, r0
 80065a4:	0000      	movs	r0, r0
	...

080065a8 <_strtod_l>:
 80065a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ac:	b09f      	sub	sp, #124	; 0x7c
 80065ae:	9217      	str	r2, [sp, #92]	; 0x5c
 80065b0:	2200      	movs	r2, #0
 80065b2:	4604      	mov	r4, r0
 80065b4:	921a      	str	r2, [sp, #104]	; 0x68
 80065b6:	460d      	mov	r5, r1
 80065b8:	f04f 0800 	mov.w	r8, #0
 80065bc:	f04f 0900 	mov.w	r9, #0
 80065c0:	460a      	mov	r2, r1
 80065c2:	9219      	str	r2, [sp, #100]	; 0x64
 80065c4:	7811      	ldrb	r1, [r2, #0]
 80065c6:	292b      	cmp	r1, #43	; 0x2b
 80065c8:	d04a      	beq.n	8006660 <_strtod_l+0xb8>
 80065ca:	d838      	bhi.n	800663e <_strtod_l+0x96>
 80065cc:	290d      	cmp	r1, #13
 80065ce:	d832      	bhi.n	8006636 <_strtod_l+0x8e>
 80065d0:	2908      	cmp	r1, #8
 80065d2:	d832      	bhi.n	800663a <_strtod_l+0x92>
 80065d4:	2900      	cmp	r1, #0
 80065d6:	d03b      	beq.n	8006650 <_strtod_l+0xa8>
 80065d8:	2200      	movs	r2, #0
 80065da:	920e      	str	r2, [sp, #56]	; 0x38
 80065dc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80065de:	7832      	ldrb	r2, [r6, #0]
 80065e0:	2a30      	cmp	r2, #48	; 0x30
 80065e2:	f040 80b2 	bne.w	800674a <_strtod_l+0x1a2>
 80065e6:	7872      	ldrb	r2, [r6, #1]
 80065e8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80065ec:	2a58      	cmp	r2, #88	; 0x58
 80065ee:	d16e      	bne.n	80066ce <_strtod_l+0x126>
 80065f0:	9302      	str	r3, [sp, #8]
 80065f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065f4:	4620      	mov	r0, r4
 80065f6:	9301      	str	r3, [sp, #4]
 80065f8:	ab1a      	add	r3, sp, #104	; 0x68
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	4a8c      	ldr	r2, [pc, #560]	; (8006830 <_strtod_l+0x288>)
 80065fe:	ab1b      	add	r3, sp, #108	; 0x6c
 8006600:	a919      	add	r1, sp, #100	; 0x64
 8006602:	f001 f937 	bl	8007874 <__gethex>
 8006606:	f010 070f 	ands.w	r7, r0, #15
 800660a:	4605      	mov	r5, r0
 800660c:	d005      	beq.n	800661a <_strtod_l+0x72>
 800660e:	2f06      	cmp	r7, #6
 8006610:	d128      	bne.n	8006664 <_strtod_l+0xbc>
 8006612:	2300      	movs	r3, #0
 8006614:	3601      	adds	r6, #1
 8006616:	9619      	str	r6, [sp, #100]	; 0x64
 8006618:	930e      	str	r3, [sp, #56]	; 0x38
 800661a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800661c:	2b00      	cmp	r3, #0
 800661e:	f040 85a0 	bne.w	8007162 <_strtod_l+0xbba>
 8006622:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006624:	b1cb      	cbz	r3, 800665a <_strtod_l+0xb2>
 8006626:	4642      	mov	r2, r8
 8006628:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800662c:	4610      	mov	r0, r2
 800662e:	4619      	mov	r1, r3
 8006630:	b01f      	add	sp, #124	; 0x7c
 8006632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006636:	2920      	cmp	r1, #32
 8006638:	d1ce      	bne.n	80065d8 <_strtod_l+0x30>
 800663a:	3201      	adds	r2, #1
 800663c:	e7c1      	b.n	80065c2 <_strtod_l+0x1a>
 800663e:	292d      	cmp	r1, #45	; 0x2d
 8006640:	d1ca      	bne.n	80065d8 <_strtod_l+0x30>
 8006642:	2101      	movs	r1, #1
 8006644:	910e      	str	r1, [sp, #56]	; 0x38
 8006646:	1c51      	adds	r1, r2, #1
 8006648:	9119      	str	r1, [sp, #100]	; 0x64
 800664a:	7852      	ldrb	r2, [r2, #1]
 800664c:	2a00      	cmp	r2, #0
 800664e:	d1c5      	bne.n	80065dc <_strtod_l+0x34>
 8006650:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006652:	9519      	str	r5, [sp, #100]	; 0x64
 8006654:	2b00      	cmp	r3, #0
 8006656:	f040 8582 	bne.w	800715e <_strtod_l+0xbb6>
 800665a:	4642      	mov	r2, r8
 800665c:	464b      	mov	r3, r9
 800665e:	e7e5      	b.n	800662c <_strtod_l+0x84>
 8006660:	2100      	movs	r1, #0
 8006662:	e7ef      	b.n	8006644 <_strtod_l+0x9c>
 8006664:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006666:	b13a      	cbz	r2, 8006678 <_strtod_l+0xd0>
 8006668:	2135      	movs	r1, #53	; 0x35
 800666a:	a81c      	add	r0, sp, #112	; 0x70
 800666c:	f7ff ff34 	bl	80064d8 <__copybits>
 8006670:	4620      	mov	r0, r4
 8006672:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006674:	f7ff fb18 	bl	8005ca8 <_Bfree>
 8006678:	3f01      	subs	r7, #1
 800667a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800667c:	2f04      	cmp	r7, #4
 800667e:	d806      	bhi.n	800668e <_strtod_l+0xe6>
 8006680:	e8df f007 	tbb	[pc, r7]
 8006684:	201d0314 	.word	0x201d0314
 8006688:	14          	.byte	0x14
 8006689:	00          	.byte	0x00
 800668a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800668e:	05e9      	lsls	r1, r5, #23
 8006690:	bf48      	it	mi
 8006692:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8006696:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800669a:	0d1b      	lsrs	r3, r3, #20
 800669c:	051b      	lsls	r3, r3, #20
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1bb      	bne.n	800661a <_strtod_l+0x72>
 80066a2:	f7fe fb15 	bl	8004cd0 <__errno>
 80066a6:	2322      	movs	r3, #34	; 0x22
 80066a8:	6003      	str	r3, [r0, #0]
 80066aa:	e7b6      	b.n	800661a <_strtod_l+0x72>
 80066ac:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80066b0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80066b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80066b8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80066bc:	e7e7      	b.n	800668e <_strtod_l+0xe6>
 80066be:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8006834 <_strtod_l+0x28c>
 80066c2:	e7e4      	b.n	800668e <_strtod_l+0xe6>
 80066c4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80066c8:	f04f 38ff 	mov.w	r8, #4294967295
 80066cc:	e7df      	b.n	800668e <_strtod_l+0xe6>
 80066ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80066d0:	1c5a      	adds	r2, r3, #1
 80066d2:	9219      	str	r2, [sp, #100]	; 0x64
 80066d4:	785b      	ldrb	r3, [r3, #1]
 80066d6:	2b30      	cmp	r3, #48	; 0x30
 80066d8:	d0f9      	beq.n	80066ce <_strtod_l+0x126>
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d09d      	beq.n	800661a <_strtod_l+0x72>
 80066de:	2301      	movs	r3, #1
 80066e0:	f04f 0a00 	mov.w	sl, #0
 80066e4:	220a      	movs	r2, #10
 80066e6:	46d3      	mov	fp, sl
 80066e8:	9305      	str	r3, [sp, #20]
 80066ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80066ec:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80066f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80066f2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80066f4:	7806      	ldrb	r6, [r0, #0]
 80066f6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80066fa:	b2d9      	uxtb	r1, r3
 80066fc:	2909      	cmp	r1, #9
 80066fe:	d926      	bls.n	800674e <_strtod_l+0x1a6>
 8006700:	2201      	movs	r2, #1
 8006702:	494d      	ldr	r1, [pc, #308]	; (8006838 <_strtod_l+0x290>)
 8006704:	f000 ffe6 	bl	80076d4 <strncmp>
 8006708:	2800      	cmp	r0, #0
 800670a:	d030      	beq.n	800676e <_strtod_l+0x1c6>
 800670c:	2000      	movs	r0, #0
 800670e:	4632      	mov	r2, r6
 8006710:	4603      	mov	r3, r0
 8006712:	465e      	mov	r6, fp
 8006714:	9008      	str	r0, [sp, #32]
 8006716:	2a65      	cmp	r2, #101	; 0x65
 8006718:	d001      	beq.n	800671e <_strtod_l+0x176>
 800671a:	2a45      	cmp	r2, #69	; 0x45
 800671c:	d113      	bne.n	8006746 <_strtod_l+0x19e>
 800671e:	b91e      	cbnz	r6, 8006728 <_strtod_l+0x180>
 8006720:	9a05      	ldr	r2, [sp, #20]
 8006722:	4302      	orrs	r2, r0
 8006724:	d094      	beq.n	8006650 <_strtod_l+0xa8>
 8006726:	2600      	movs	r6, #0
 8006728:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800672a:	1c6a      	adds	r2, r5, #1
 800672c:	9219      	str	r2, [sp, #100]	; 0x64
 800672e:	786a      	ldrb	r2, [r5, #1]
 8006730:	2a2b      	cmp	r2, #43	; 0x2b
 8006732:	d074      	beq.n	800681e <_strtod_l+0x276>
 8006734:	2a2d      	cmp	r2, #45	; 0x2d
 8006736:	d078      	beq.n	800682a <_strtod_l+0x282>
 8006738:	f04f 0c00 	mov.w	ip, #0
 800673c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006740:	2909      	cmp	r1, #9
 8006742:	d97f      	bls.n	8006844 <_strtod_l+0x29c>
 8006744:	9519      	str	r5, [sp, #100]	; 0x64
 8006746:	2700      	movs	r7, #0
 8006748:	e09e      	b.n	8006888 <_strtod_l+0x2e0>
 800674a:	2300      	movs	r3, #0
 800674c:	e7c8      	b.n	80066e0 <_strtod_l+0x138>
 800674e:	f1bb 0f08 	cmp.w	fp, #8
 8006752:	bfd8      	it	le
 8006754:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8006756:	f100 0001 	add.w	r0, r0, #1
 800675a:	bfd6      	itet	le
 800675c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006760:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006764:	930a      	strle	r3, [sp, #40]	; 0x28
 8006766:	f10b 0b01 	add.w	fp, fp, #1
 800676a:	9019      	str	r0, [sp, #100]	; 0x64
 800676c:	e7c1      	b.n	80066f2 <_strtod_l+0x14a>
 800676e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006770:	1c5a      	adds	r2, r3, #1
 8006772:	9219      	str	r2, [sp, #100]	; 0x64
 8006774:	785a      	ldrb	r2, [r3, #1]
 8006776:	f1bb 0f00 	cmp.w	fp, #0
 800677a:	d037      	beq.n	80067ec <_strtod_l+0x244>
 800677c:	465e      	mov	r6, fp
 800677e:	9008      	str	r0, [sp, #32]
 8006780:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006784:	2b09      	cmp	r3, #9
 8006786:	d912      	bls.n	80067ae <_strtod_l+0x206>
 8006788:	2301      	movs	r3, #1
 800678a:	e7c4      	b.n	8006716 <_strtod_l+0x16e>
 800678c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800678e:	3001      	adds	r0, #1
 8006790:	1c5a      	adds	r2, r3, #1
 8006792:	9219      	str	r2, [sp, #100]	; 0x64
 8006794:	785a      	ldrb	r2, [r3, #1]
 8006796:	2a30      	cmp	r2, #48	; 0x30
 8006798:	d0f8      	beq.n	800678c <_strtod_l+0x1e4>
 800679a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800679e:	2b08      	cmp	r3, #8
 80067a0:	f200 84e4 	bhi.w	800716c <_strtod_l+0xbc4>
 80067a4:	9008      	str	r0, [sp, #32]
 80067a6:	2000      	movs	r0, #0
 80067a8:	4606      	mov	r6, r0
 80067aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80067ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80067ae:	3a30      	subs	r2, #48	; 0x30
 80067b0:	f100 0301 	add.w	r3, r0, #1
 80067b4:	d014      	beq.n	80067e0 <_strtod_l+0x238>
 80067b6:	9908      	ldr	r1, [sp, #32]
 80067b8:	eb00 0c06 	add.w	ip, r0, r6
 80067bc:	4419      	add	r1, r3
 80067be:	9108      	str	r1, [sp, #32]
 80067c0:	4633      	mov	r3, r6
 80067c2:	210a      	movs	r1, #10
 80067c4:	4563      	cmp	r3, ip
 80067c6:	d113      	bne.n	80067f0 <_strtod_l+0x248>
 80067c8:	1833      	adds	r3, r6, r0
 80067ca:	2b08      	cmp	r3, #8
 80067cc:	f106 0601 	add.w	r6, r6, #1
 80067d0:	4406      	add	r6, r0
 80067d2:	dc1a      	bgt.n	800680a <_strtod_l+0x262>
 80067d4:	230a      	movs	r3, #10
 80067d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80067d8:	fb03 2301 	mla	r3, r3, r1, r2
 80067dc:	930a      	str	r3, [sp, #40]	; 0x28
 80067de:	2300      	movs	r3, #0
 80067e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80067e2:	4618      	mov	r0, r3
 80067e4:	1c51      	adds	r1, r2, #1
 80067e6:	9119      	str	r1, [sp, #100]	; 0x64
 80067e8:	7852      	ldrb	r2, [r2, #1]
 80067ea:	e7c9      	b.n	8006780 <_strtod_l+0x1d8>
 80067ec:	4658      	mov	r0, fp
 80067ee:	e7d2      	b.n	8006796 <_strtod_l+0x1ee>
 80067f0:	2b08      	cmp	r3, #8
 80067f2:	f103 0301 	add.w	r3, r3, #1
 80067f6:	dc03      	bgt.n	8006800 <_strtod_l+0x258>
 80067f8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80067fa:	434f      	muls	r7, r1
 80067fc:	970a      	str	r7, [sp, #40]	; 0x28
 80067fe:	e7e1      	b.n	80067c4 <_strtod_l+0x21c>
 8006800:	2b10      	cmp	r3, #16
 8006802:	bfd8      	it	le
 8006804:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006808:	e7dc      	b.n	80067c4 <_strtod_l+0x21c>
 800680a:	2e10      	cmp	r6, #16
 800680c:	bfdc      	itt	le
 800680e:	230a      	movle	r3, #10
 8006810:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006814:	e7e3      	b.n	80067de <_strtod_l+0x236>
 8006816:	2300      	movs	r3, #0
 8006818:	9308      	str	r3, [sp, #32]
 800681a:	2301      	movs	r3, #1
 800681c:	e780      	b.n	8006720 <_strtod_l+0x178>
 800681e:	f04f 0c00 	mov.w	ip, #0
 8006822:	1caa      	adds	r2, r5, #2
 8006824:	9219      	str	r2, [sp, #100]	; 0x64
 8006826:	78aa      	ldrb	r2, [r5, #2]
 8006828:	e788      	b.n	800673c <_strtod_l+0x194>
 800682a:	f04f 0c01 	mov.w	ip, #1
 800682e:	e7f8      	b.n	8006822 <_strtod_l+0x27a>
 8006830:	08008778 	.word	0x08008778
 8006834:	7ff00000 	.word	0x7ff00000
 8006838:	08008774 	.word	0x08008774
 800683c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800683e:	1c51      	adds	r1, r2, #1
 8006840:	9119      	str	r1, [sp, #100]	; 0x64
 8006842:	7852      	ldrb	r2, [r2, #1]
 8006844:	2a30      	cmp	r2, #48	; 0x30
 8006846:	d0f9      	beq.n	800683c <_strtod_l+0x294>
 8006848:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800684c:	2908      	cmp	r1, #8
 800684e:	f63f af7a 	bhi.w	8006746 <_strtod_l+0x19e>
 8006852:	3a30      	subs	r2, #48	; 0x30
 8006854:	9209      	str	r2, [sp, #36]	; 0x24
 8006856:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006858:	920c      	str	r2, [sp, #48]	; 0x30
 800685a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800685c:	1c57      	adds	r7, r2, #1
 800685e:	9719      	str	r7, [sp, #100]	; 0x64
 8006860:	7852      	ldrb	r2, [r2, #1]
 8006862:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006866:	f1be 0f09 	cmp.w	lr, #9
 800686a:	d938      	bls.n	80068de <_strtod_l+0x336>
 800686c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800686e:	1a7f      	subs	r7, r7, r1
 8006870:	2f08      	cmp	r7, #8
 8006872:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006876:	dc03      	bgt.n	8006880 <_strtod_l+0x2d8>
 8006878:	9909      	ldr	r1, [sp, #36]	; 0x24
 800687a:	428f      	cmp	r7, r1
 800687c:	bfa8      	it	ge
 800687e:	460f      	movge	r7, r1
 8006880:	f1bc 0f00 	cmp.w	ip, #0
 8006884:	d000      	beq.n	8006888 <_strtod_l+0x2e0>
 8006886:	427f      	negs	r7, r7
 8006888:	2e00      	cmp	r6, #0
 800688a:	d14f      	bne.n	800692c <_strtod_l+0x384>
 800688c:	9905      	ldr	r1, [sp, #20]
 800688e:	4301      	orrs	r1, r0
 8006890:	f47f aec3 	bne.w	800661a <_strtod_l+0x72>
 8006894:	2b00      	cmp	r3, #0
 8006896:	f47f aedb 	bne.w	8006650 <_strtod_l+0xa8>
 800689a:	2a69      	cmp	r2, #105	; 0x69
 800689c:	d029      	beq.n	80068f2 <_strtod_l+0x34a>
 800689e:	dc26      	bgt.n	80068ee <_strtod_l+0x346>
 80068a0:	2a49      	cmp	r2, #73	; 0x49
 80068a2:	d026      	beq.n	80068f2 <_strtod_l+0x34a>
 80068a4:	2a4e      	cmp	r2, #78	; 0x4e
 80068a6:	f47f aed3 	bne.w	8006650 <_strtod_l+0xa8>
 80068aa:	499a      	ldr	r1, [pc, #616]	; (8006b14 <_strtod_l+0x56c>)
 80068ac:	a819      	add	r0, sp, #100	; 0x64
 80068ae:	f001 fa23 	bl	8007cf8 <__match>
 80068b2:	2800      	cmp	r0, #0
 80068b4:	f43f aecc 	beq.w	8006650 <_strtod_l+0xa8>
 80068b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	2b28      	cmp	r3, #40	; 0x28
 80068be:	d12f      	bne.n	8006920 <_strtod_l+0x378>
 80068c0:	4995      	ldr	r1, [pc, #596]	; (8006b18 <_strtod_l+0x570>)
 80068c2:	aa1c      	add	r2, sp, #112	; 0x70
 80068c4:	a819      	add	r0, sp, #100	; 0x64
 80068c6:	f001 fa2b 	bl	8007d20 <__hexnan>
 80068ca:	2805      	cmp	r0, #5
 80068cc:	d128      	bne.n	8006920 <_strtod_l+0x378>
 80068ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80068d0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80068d4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80068d8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80068dc:	e69d      	b.n	800661a <_strtod_l+0x72>
 80068de:	210a      	movs	r1, #10
 80068e0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80068e2:	fb01 2107 	mla	r1, r1, r7, r2
 80068e6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80068ea:	9209      	str	r2, [sp, #36]	; 0x24
 80068ec:	e7b5      	b.n	800685a <_strtod_l+0x2b2>
 80068ee:	2a6e      	cmp	r2, #110	; 0x6e
 80068f0:	e7d9      	b.n	80068a6 <_strtod_l+0x2fe>
 80068f2:	498a      	ldr	r1, [pc, #552]	; (8006b1c <_strtod_l+0x574>)
 80068f4:	a819      	add	r0, sp, #100	; 0x64
 80068f6:	f001 f9ff 	bl	8007cf8 <__match>
 80068fa:	2800      	cmp	r0, #0
 80068fc:	f43f aea8 	beq.w	8006650 <_strtod_l+0xa8>
 8006900:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006902:	4987      	ldr	r1, [pc, #540]	; (8006b20 <_strtod_l+0x578>)
 8006904:	3b01      	subs	r3, #1
 8006906:	a819      	add	r0, sp, #100	; 0x64
 8006908:	9319      	str	r3, [sp, #100]	; 0x64
 800690a:	f001 f9f5 	bl	8007cf8 <__match>
 800690e:	b910      	cbnz	r0, 8006916 <_strtod_l+0x36e>
 8006910:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006912:	3301      	adds	r3, #1
 8006914:	9319      	str	r3, [sp, #100]	; 0x64
 8006916:	f04f 0800 	mov.w	r8, #0
 800691a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8006b24 <_strtod_l+0x57c>
 800691e:	e67c      	b.n	800661a <_strtod_l+0x72>
 8006920:	4881      	ldr	r0, [pc, #516]	; (8006b28 <_strtod_l+0x580>)
 8006922:	f000 ff07 	bl	8007734 <nan>
 8006926:	4680      	mov	r8, r0
 8006928:	4689      	mov	r9, r1
 800692a:	e676      	b.n	800661a <_strtod_l+0x72>
 800692c:	9b08      	ldr	r3, [sp, #32]
 800692e:	f1bb 0f00 	cmp.w	fp, #0
 8006932:	bf08      	it	eq
 8006934:	46b3      	moveq	fp, r6
 8006936:	1afb      	subs	r3, r7, r3
 8006938:	2e10      	cmp	r6, #16
 800693a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800693c:	4635      	mov	r5, r6
 800693e:	9309      	str	r3, [sp, #36]	; 0x24
 8006940:	bfa8      	it	ge
 8006942:	2510      	movge	r5, #16
 8006944:	f7f9 fd4e 	bl	80003e4 <__aeabi_ui2d>
 8006948:	2e09      	cmp	r6, #9
 800694a:	4680      	mov	r8, r0
 800694c:	4689      	mov	r9, r1
 800694e:	dd13      	ble.n	8006978 <_strtod_l+0x3d0>
 8006950:	4b76      	ldr	r3, [pc, #472]	; (8006b2c <_strtod_l+0x584>)
 8006952:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006956:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800695a:	f7f9 fdbd 	bl	80004d8 <__aeabi_dmul>
 800695e:	4680      	mov	r8, r0
 8006960:	4650      	mov	r0, sl
 8006962:	4689      	mov	r9, r1
 8006964:	f7f9 fd3e 	bl	80003e4 <__aeabi_ui2d>
 8006968:	4602      	mov	r2, r0
 800696a:	460b      	mov	r3, r1
 800696c:	4640      	mov	r0, r8
 800696e:	4649      	mov	r1, r9
 8006970:	f7f9 fbfc 	bl	800016c <__adddf3>
 8006974:	4680      	mov	r8, r0
 8006976:	4689      	mov	r9, r1
 8006978:	2e0f      	cmp	r6, #15
 800697a:	dc36      	bgt.n	80069ea <_strtod_l+0x442>
 800697c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800697e:	2b00      	cmp	r3, #0
 8006980:	f43f ae4b 	beq.w	800661a <_strtod_l+0x72>
 8006984:	dd22      	ble.n	80069cc <_strtod_l+0x424>
 8006986:	2b16      	cmp	r3, #22
 8006988:	dc09      	bgt.n	800699e <_strtod_l+0x3f6>
 800698a:	4968      	ldr	r1, [pc, #416]	; (8006b2c <_strtod_l+0x584>)
 800698c:	4642      	mov	r2, r8
 800698e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006992:	464b      	mov	r3, r9
 8006994:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006998:	f7f9 fd9e 	bl	80004d8 <__aeabi_dmul>
 800699c:	e7c3      	b.n	8006926 <_strtod_l+0x37e>
 800699e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069a0:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80069a4:	4293      	cmp	r3, r2
 80069a6:	db20      	blt.n	80069ea <_strtod_l+0x442>
 80069a8:	4c60      	ldr	r4, [pc, #384]	; (8006b2c <_strtod_l+0x584>)
 80069aa:	f1c6 060f 	rsb	r6, r6, #15
 80069ae:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80069b2:	4642      	mov	r2, r8
 80069b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069b8:	464b      	mov	r3, r9
 80069ba:	f7f9 fd8d 	bl	80004d8 <__aeabi_dmul>
 80069be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069c0:	1b9e      	subs	r6, r3, r6
 80069c2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80069c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80069ca:	e7e5      	b.n	8006998 <_strtod_l+0x3f0>
 80069cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ce:	3316      	adds	r3, #22
 80069d0:	db0b      	blt.n	80069ea <_strtod_l+0x442>
 80069d2:	9b08      	ldr	r3, [sp, #32]
 80069d4:	4640      	mov	r0, r8
 80069d6:	1bdf      	subs	r7, r3, r7
 80069d8:	4b54      	ldr	r3, [pc, #336]	; (8006b2c <_strtod_l+0x584>)
 80069da:	4649      	mov	r1, r9
 80069dc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80069e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069e4:	f7f9 fea2 	bl	800072c <__aeabi_ddiv>
 80069e8:	e79d      	b.n	8006926 <_strtod_l+0x37e>
 80069ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ec:	1b75      	subs	r5, r6, r5
 80069ee:	441d      	add	r5, r3
 80069f0:	2d00      	cmp	r5, #0
 80069f2:	dd70      	ble.n	8006ad6 <_strtod_l+0x52e>
 80069f4:	f015 030f 	ands.w	r3, r5, #15
 80069f8:	d00a      	beq.n	8006a10 <_strtod_l+0x468>
 80069fa:	494c      	ldr	r1, [pc, #304]	; (8006b2c <_strtod_l+0x584>)
 80069fc:	4642      	mov	r2, r8
 80069fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006a02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a06:	464b      	mov	r3, r9
 8006a08:	f7f9 fd66 	bl	80004d8 <__aeabi_dmul>
 8006a0c:	4680      	mov	r8, r0
 8006a0e:	4689      	mov	r9, r1
 8006a10:	f035 050f 	bics.w	r5, r5, #15
 8006a14:	d04d      	beq.n	8006ab2 <_strtod_l+0x50a>
 8006a16:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8006a1a:	dd22      	ble.n	8006a62 <_strtod_l+0x4ba>
 8006a1c:	2600      	movs	r6, #0
 8006a1e:	46b3      	mov	fp, r6
 8006a20:	960b      	str	r6, [sp, #44]	; 0x2c
 8006a22:	9608      	str	r6, [sp, #32]
 8006a24:	2322      	movs	r3, #34	; 0x22
 8006a26:	f04f 0800 	mov.w	r8, #0
 8006a2a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8006b24 <_strtod_l+0x57c>
 8006a2e:	6023      	str	r3, [r4, #0]
 8006a30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f43f adf1 	beq.w	800661a <_strtod_l+0x72>
 8006a38:	4620      	mov	r0, r4
 8006a3a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006a3c:	f7ff f934 	bl	8005ca8 <_Bfree>
 8006a40:	4620      	mov	r0, r4
 8006a42:	9908      	ldr	r1, [sp, #32]
 8006a44:	f7ff f930 	bl	8005ca8 <_Bfree>
 8006a48:	4659      	mov	r1, fp
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	f7ff f92c 	bl	8005ca8 <_Bfree>
 8006a50:	4620      	mov	r0, r4
 8006a52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a54:	f7ff f928 	bl	8005ca8 <_Bfree>
 8006a58:	4631      	mov	r1, r6
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	f7ff f924 	bl	8005ca8 <_Bfree>
 8006a60:	e5db      	b.n	800661a <_strtod_l+0x72>
 8006a62:	4b33      	ldr	r3, [pc, #204]	; (8006b30 <_strtod_l+0x588>)
 8006a64:	4640      	mov	r0, r8
 8006a66:	9305      	str	r3, [sp, #20]
 8006a68:	2300      	movs	r3, #0
 8006a6a:	4649      	mov	r1, r9
 8006a6c:	469a      	mov	sl, r3
 8006a6e:	112d      	asrs	r5, r5, #4
 8006a70:	2d01      	cmp	r5, #1
 8006a72:	dc21      	bgt.n	8006ab8 <_strtod_l+0x510>
 8006a74:	b10b      	cbz	r3, 8006a7a <_strtod_l+0x4d2>
 8006a76:	4680      	mov	r8, r0
 8006a78:	4689      	mov	r9, r1
 8006a7a:	492d      	ldr	r1, [pc, #180]	; (8006b30 <_strtod_l+0x588>)
 8006a7c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006a80:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006a84:	4642      	mov	r2, r8
 8006a86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a8a:	464b      	mov	r3, r9
 8006a8c:	f7f9 fd24 	bl	80004d8 <__aeabi_dmul>
 8006a90:	4b24      	ldr	r3, [pc, #144]	; (8006b24 <_strtod_l+0x57c>)
 8006a92:	460a      	mov	r2, r1
 8006a94:	400b      	ands	r3, r1
 8006a96:	4927      	ldr	r1, [pc, #156]	; (8006b34 <_strtod_l+0x58c>)
 8006a98:	4680      	mov	r8, r0
 8006a9a:	428b      	cmp	r3, r1
 8006a9c:	d8be      	bhi.n	8006a1c <_strtod_l+0x474>
 8006a9e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006aa2:	428b      	cmp	r3, r1
 8006aa4:	bf86      	itte	hi
 8006aa6:	f04f 38ff 	movhi.w	r8, #4294967295
 8006aaa:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8006b38 <_strtod_l+0x590>
 8006aae:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	9305      	str	r3, [sp, #20]
 8006ab6:	e07b      	b.n	8006bb0 <_strtod_l+0x608>
 8006ab8:	07ea      	lsls	r2, r5, #31
 8006aba:	d505      	bpl.n	8006ac8 <_strtod_l+0x520>
 8006abc:	9b05      	ldr	r3, [sp, #20]
 8006abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac2:	f7f9 fd09 	bl	80004d8 <__aeabi_dmul>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	9a05      	ldr	r2, [sp, #20]
 8006aca:	f10a 0a01 	add.w	sl, sl, #1
 8006ace:	3208      	adds	r2, #8
 8006ad0:	106d      	asrs	r5, r5, #1
 8006ad2:	9205      	str	r2, [sp, #20]
 8006ad4:	e7cc      	b.n	8006a70 <_strtod_l+0x4c8>
 8006ad6:	d0ec      	beq.n	8006ab2 <_strtod_l+0x50a>
 8006ad8:	426d      	negs	r5, r5
 8006ada:	f015 020f 	ands.w	r2, r5, #15
 8006ade:	d00a      	beq.n	8006af6 <_strtod_l+0x54e>
 8006ae0:	4b12      	ldr	r3, [pc, #72]	; (8006b2c <_strtod_l+0x584>)
 8006ae2:	4640      	mov	r0, r8
 8006ae4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ae8:	4649      	mov	r1, r9
 8006aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aee:	f7f9 fe1d 	bl	800072c <__aeabi_ddiv>
 8006af2:	4680      	mov	r8, r0
 8006af4:	4689      	mov	r9, r1
 8006af6:	112d      	asrs	r5, r5, #4
 8006af8:	d0db      	beq.n	8006ab2 <_strtod_l+0x50a>
 8006afa:	2d1f      	cmp	r5, #31
 8006afc:	dd1e      	ble.n	8006b3c <_strtod_l+0x594>
 8006afe:	2600      	movs	r6, #0
 8006b00:	46b3      	mov	fp, r6
 8006b02:	960b      	str	r6, [sp, #44]	; 0x2c
 8006b04:	9608      	str	r6, [sp, #32]
 8006b06:	2322      	movs	r3, #34	; 0x22
 8006b08:	f04f 0800 	mov.w	r8, #0
 8006b0c:	f04f 0900 	mov.w	r9, #0
 8006b10:	6023      	str	r3, [r4, #0]
 8006b12:	e78d      	b.n	8006a30 <_strtod_l+0x488>
 8006b14:	0800855f 	.word	0x0800855f
 8006b18:	0800878c 	.word	0x0800878c
 8006b1c:	08008557 	.word	0x08008557
 8006b20:	0800858e 	.word	0x0800858e
 8006b24:	7ff00000 	.word	0x7ff00000
 8006b28:	0800891d 	.word	0x0800891d
 8006b2c:	080086a0 	.word	0x080086a0
 8006b30:	08008678 	.word	0x08008678
 8006b34:	7ca00000 	.word	0x7ca00000
 8006b38:	7fefffff 	.word	0x7fefffff
 8006b3c:	f015 0310 	ands.w	r3, r5, #16
 8006b40:	bf18      	it	ne
 8006b42:	236a      	movne	r3, #106	; 0x6a
 8006b44:	4640      	mov	r0, r8
 8006b46:	9305      	str	r3, [sp, #20]
 8006b48:	4649      	mov	r1, r9
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8006e18 <_strtod_l+0x870>
 8006b50:	07ea      	lsls	r2, r5, #31
 8006b52:	d504      	bpl.n	8006b5e <_strtod_l+0x5b6>
 8006b54:	e9da 2300 	ldrd	r2, r3, [sl]
 8006b58:	f7f9 fcbe 	bl	80004d8 <__aeabi_dmul>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	106d      	asrs	r5, r5, #1
 8006b60:	f10a 0a08 	add.w	sl, sl, #8
 8006b64:	d1f4      	bne.n	8006b50 <_strtod_l+0x5a8>
 8006b66:	b10b      	cbz	r3, 8006b6c <_strtod_l+0x5c4>
 8006b68:	4680      	mov	r8, r0
 8006b6a:	4689      	mov	r9, r1
 8006b6c:	9b05      	ldr	r3, [sp, #20]
 8006b6e:	b1bb      	cbz	r3, 8006ba0 <_strtod_l+0x5f8>
 8006b70:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006b74:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	4649      	mov	r1, r9
 8006b7c:	dd10      	ble.n	8006ba0 <_strtod_l+0x5f8>
 8006b7e:	2b1f      	cmp	r3, #31
 8006b80:	f340 8128 	ble.w	8006dd4 <_strtod_l+0x82c>
 8006b84:	2b34      	cmp	r3, #52	; 0x34
 8006b86:	bfd8      	it	le
 8006b88:	f04f 33ff 	movle.w	r3, #4294967295
 8006b8c:	f04f 0800 	mov.w	r8, #0
 8006b90:	bfcf      	iteee	gt
 8006b92:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006b96:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006b9a:	4093      	lslle	r3, r2
 8006b9c:	ea03 0901 	andle.w	r9, r3, r1
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	4640      	mov	r0, r8
 8006ba6:	4649      	mov	r1, r9
 8006ba8:	f7f9 fefe 	bl	80009a8 <__aeabi_dcmpeq>
 8006bac:	2800      	cmp	r0, #0
 8006bae:	d1a6      	bne.n	8006afe <_strtod_l+0x556>
 8006bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bb2:	465a      	mov	r2, fp
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	4633      	mov	r3, r6
 8006bba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006bbc:	f7ff f8dc 	bl	8005d78 <__s2b>
 8006bc0:	900b      	str	r0, [sp, #44]	; 0x2c
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	f43f af2a 	beq.w	8006a1c <_strtod_l+0x474>
 8006bc8:	2600      	movs	r6, #0
 8006bca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bcc:	9b08      	ldr	r3, [sp, #32]
 8006bce:	2a00      	cmp	r2, #0
 8006bd0:	eba3 0307 	sub.w	r3, r3, r7
 8006bd4:	bfa8      	it	ge
 8006bd6:	2300      	movge	r3, #0
 8006bd8:	46b3      	mov	fp, r6
 8006bda:	9312      	str	r3, [sp, #72]	; 0x48
 8006bdc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006be0:	9316      	str	r3, [sp, #88]	; 0x58
 8006be2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006be4:	4620      	mov	r0, r4
 8006be6:	6859      	ldr	r1, [r3, #4]
 8006be8:	f7ff f81e 	bl	8005c28 <_Balloc>
 8006bec:	9008      	str	r0, [sp, #32]
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	f43f af18 	beq.w	8006a24 <_strtod_l+0x47c>
 8006bf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bf6:	300c      	adds	r0, #12
 8006bf8:	691a      	ldr	r2, [r3, #16]
 8006bfa:	f103 010c 	add.w	r1, r3, #12
 8006bfe:	3202      	adds	r2, #2
 8006c00:	0092      	lsls	r2, r2, #2
 8006c02:	f000 fd89 	bl	8007718 <memcpy>
 8006c06:	ab1c      	add	r3, sp, #112	; 0x70
 8006c08:	9301      	str	r3, [sp, #4]
 8006c0a:	ab1b      	add	r3, sp, #108	; 0x6c
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	4642      	mov	r2, r8
 8006c10:	464b      	mov	r3, r9
 8006c12:	4620      	mov	r0, r4
 8006c14:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8006c18:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8006c1c:	f7ff fbd8 	bl	80063d0 <__d2b>
 8006c20:	901a      	str	r0, [sp, #104]	; 0x68
 8006c22:	2800      	cmp	r0, #0
 8006c24:	f43f aefe 	beq.w	8006a24 <_strtod_l+0x47c>
 8006c28:	2101      	movs	r1, #1
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f7ff f93c 	bl	8005ea8 <__i2b>
 8006c30:	4683      	mov	fp, r0
 8006c32:	2800      	cmp	r0, #0
 8006c34:	f43f aef6 	beq.w	8006a24 <_strtod_l+0x47c>
 8006c38:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8006c3a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006c3c:	2f00      	cmp	r7, #0
 8006c3e:	bfab      	itete	ge
 8006c40:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8006c42:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006c44:	eb07 0a03 	addge.w	sl, r7, r3
 8006c48:	1bdd      	sublt	r5, r3, r7
 8006c4a:	9b05      	ldr	r3, [sp, #20]
 8006c4c:	bfa8      	it	ge
 8006c4e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8006c50:	eba7 0703 	sub.w	r7, r7, r3
 8006c54:	4417      	add	r7, r2
 8006c56:	4b71      	ldr	r3, [pc, #452]	; (8006e1c <_strtod_l+0x874>)
 8006c58:	f107 37ff 	add.w	r7, r7, #4294967295
 8006c5c:	bfb8      	it	lt
 8006c5e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8006c62:	429f      	cmp	r7, r3
 8006c64:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006c68:	f280 80c7 	bge.w	8006dfa <_strtod_l+0x852>
 8006c6c:	1bdb      	subs	r3, r3, r7
 8006c6e:	2b1f      	cmp	r3, #31
 8006c70:	f04f 0101 	mov.w	r1, #1
 8006c74:	eba2 0203 	sub.w	r2, r2, r3
 8006c78:	f300 80b3 	bgt.w	8006de2 <_strtod_l+0x83a>
 8006c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c80:	9313      	str	r3, [sp, #76]	; 0x4c
 8006c82:	2300      	movs	r3, #0
 8006c84:	9310      	str	r3, [sp, #64]	; 0x40
 8006c86:	eb0a 0702 	add.w	r7, sl, r2
 8006c8a:	9b05      	ldr	r3, [sp, #20]
 8006c8c:	45ba      	cmp	sl, r7
 8006c8e:	4415      	add	r5, r2
 8006c90:	441d      	add	r5, r3
 8006c92:	4653      	mov	r3, sl
 8006c94:	bfa8      	it	ge
 8006c96:	463b      	movge	r3, r7
 8006c98:	42ab      	cmp	r3, r5
 8006c9a:	bfa8      	it	ge
 8006c9c:	462b      	movge	r3, r5
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	bfc2      	ittt	gt
 8006ca2:	1aff      	subgt	r7, r7, r3
 8006ca4:	1aed      	subgt	r5, r5, r3
 8006ca6:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006caa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	dd17      	ble.n	8006ce0 <_strtod_l+0x738>
 8006cb0:	4659      	mov	r1, fp
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	f7ff f9b5 	bl	8006024 <__pow5mult>
 8006cba:	4683      	mov	fp, r0
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	f43f aeb1 	beq.w	8006a24 <_strtod_l+0x47c>
 8006cc2:	4601      	mov	r1, r0
 8006cc4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f7ff f904 	bl	8005ed4 <__multiply>
 8006ccc:	900a      	str	r0, [sp, #40]	; 0x28
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	f43f aea8 	beq.w	8006a24 <_strtod_l+0x47c>
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006cd8:	f7fe ffe6 	bl	8005ca8 <_Bfree>
 8006cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cde:	931a      	str	r3, [sp, #104]	; 0x68
 8006ce0:	2f00      	cmp	r7, #0
 8006ce2:	f300 808f 	bgt.w	8006e04 <_strtod_l+0x85c>
 8006ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	dd08      	ble.n	8006cfe <_strtod_l+0x756>
 8006cec:	4620      	mov	r0, r4
 8006cee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006cf0:	9908      	ldr	r1, [sp, #32]
 8006cf2:	f7ff f997 	bl	8006024 <__pow5mult>
 8006cf6:	9008      	str	r0, [sp, #32]
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	f43f ae93 	beq.w	8006a24 <_strtod_l+0x47c>
 8006cfe:	2d00      	cmp	r5, #0
 8006d00:	dd08      	ble.n	8006d14 <_strtod_l+0x76c>
 8006d02:	462a      	mov	r2, r5
 8006d04:	4620      	mov	r0, r4
 8006d06:	9908      	ldr	r1, [sp, #32]
 8006d08:	f7ff f9e6 	bl	80060d8 <__lshift>
 8006d0c:	9008      	str	r0, [sp, #32]
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	f43f ae88 	beq.w	8006a24 <_strtod_l+0x47c>
 8006d14:	f1ba 0f00 	cmp.w	sl, #0
 8006d18:	dd08      	ble.n	8006d2c <_strtod_l+0x784>
 8006d1a:	4659      	mov	r1, fp
 8006d1c:	4652      	mov	r2, sl
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f7ff f9da 	bl	80060d8 <__lshift>
 8006d24:	4683      	mov	fp, r0
 8006d26:	2800      	cmp	r0, #0
 8006d28:	f43f ae7c 	beq.w	8006a24 <_strtod_l+0x47c>
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	9a08      	ldr	r2, [sp, #32]
 8006d30:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006d32:	f7ff fa59 	bl	80061e8 <__mdiff>
 8006d36:	4606      	mov	r6, r0
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	f43f ae73 	beq.w	8006a24 <_strtod_l+0x47c>
 8006d3e:	2500      	movs	r5, #0
 8006d40:	68c3      	ldr	r3, [r0, #12]
 8006d42:	4659      	mov	r1, fp
 8006d44:	60c5      	str	r5, [r0, #12]
 8006d46:	930a      	str	r3, [sp, #40]	; 0x28
 8006d48:	f7ff fa32 	bl	80061b0 <__mcmp>
 8006d4c:	42a8      	cmp	r0, r5
 8006d4e:	da6b      	bge.n	8006e28 <_strtod_l+0x880>
 8006d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d52:	ea53 0308 	orrs.w	r3, r3, r8
 8006d56:	f040 808f 	bne.w	8006e78 <_strtod_l+0x8d0>
 8006d5a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f040 808a 	bne.w	8006e78 <_strtod_l+0x8d0>
 8006d64:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d68:	0d1b      	lsrs	r3, r3, #20
 8006d6a:	051b      	lsls	r3, r3, #20
 8006d6c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006d70:	f240 8082 	bls.w	8006e78 <_strtod_l+0x8d0>
 8006d74:	6973      	ldr	r3, [r6, #20]
 8006d76:	b913      	cbnz	r3, 8006d7e <_strtod_l+0x7d6>
 8006d78:	6933      	ldr	r3, [r6, #16]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	dd7c      	ble.n	8006e78 <_strtod_l+0x8d0>
 8006d7e:	4631      	mov	r1, r6
 8006d80:	2201      	movs	r2, #1
 8006d82:	4620      	mov	r0, r4
 8006d84:	f7ff f9a8 	bl	80060d8 <__lshift>
 8006d88:	4659      	mov	r1, fp
 8006d8a:	4606      	mov	r6, r0
 8006d8c:	f7ff fa10 	bl	80061b0 <__mcmp>
 8006d90:	2800      	cmp	r0, #0
 8006d92:	dd71      	ble.n	8006e78 <_strtod_l+0x8d0>
 8006d94:	9905      	ldr	r1, [sp, #20]
 8006d96:	464b      	mov	r3, r9
 8006d98:	4a21      	ldr	r2, [pc, #132]	; (8006e20 <_strtod_l+0x878>)
 8006d9a:	2900      	cmp	r1, #0
 8006d9c:	f000 808d 	beq.w	8006eba <_strtod_l+0x912>
 8006da0:	ea02 0109 	and.w	r1, r2, r9
 8006da4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006da8:	f300 8087 	bgt.w	8006eba <_strtod_l+0x912>
 8006dac:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006db0:	f77f aea9 	ble.w	8006b06 <_strtod_l+0x55e>
 8006db4:	4640      	mov	r0, r8
 8006db6:	4649      	mov	r1, r9
 8006db8:	4b1a      	ldr	r3, [pc, #104]	; (8006e24 <_strtod_l+0x87c>)
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f7f9 fb8c 	bl	80004d8 <__aeabi_dmul>
 8006dc0:	4b17      	ldr	r3, [pc, #92]	; (8006e20 <_strtod_l+0x878>)
 8006dc2:	4680      	mov	r8, r0
 8006dc4:	400b      	ands	r3, r1
 8006dc6:	4689      	mov	r9, r1
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f47f ae35 	bne.w	8006a38 <_strtod_l+0x490>
 8006dce:	2322      	movs	r3, #34	; 0x22
 8006dd0:	6023      	str	r3, [r4, #0]
 8006dd2:	e631      	b.n	8006a38 <_strtod_l+0x490>
 8006dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8006dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ddc:	ea03 0808 	and.w	r8, r3, r8
 8006de0:	e6de      	b.n	8006ba0 <_strtod_l+0x5f8>
 8006de2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8006de6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8006dea:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8006dee:	37e2      	adds	r7, #226	; 0xe2
 8006df0:	fa01 f307 	lsl.w	r3, r1, r7
 8006df4:	9310      	str	r3, [sp, #64]	; 0x40
 8006df6:	9113      	str	r1, [sp, #76]	; 0x4c
 8006df8:	e745      	b.n	8006c86 <_strtod_l+0x6de>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	9310      	str	r3, [sp, #64]	; 0x40
 8006dfe:	2301      	movs	r3, #1
 8006e00:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e02:	e740      	b.n	8006c86 <_strtod_l+0x6de>
 8006e04:	463a      	mov	r2, r7
 8006e06:	4620      	mov	r0, r4
 8006e08:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006e0a:	f7ff f965 	bl	80060d8 <__lshift>
 8006e0e:	901a      	str	r0, [sp, #104]	; 0x68
 8006e10:	2800      	cmp	r0, #0
 8006e12:	f47f af68 	bne.w	8006ce6 <_strtod_l+0x73e>
 8006e16:	e605      	b.n	8006a24 <_strtod_l+0x47c>
 8006e18:	080087a0 	.word	0x080087a0
 8006e1c:	fffffc02 	.word	0xfffffc02
 8006e20:	7ff00000 	.word	0x7ff00000
 8006e24:	39500000 	.word	0x39500000
 8006e28:	46ca      	mov	sl, r9
 8006e2a:	d165      	bne.n	8006ef8 <_strtod_l+0x950>
 8006e2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e2e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e32:	b352      	cbz	r2, 8006e8a <_strtod_l+0x8e2>
 8006e34:	4a9e      	ldr	r2, [pc, #632]	; (80070b0 <_strtod_l+0xb08>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d12a      	bne.n	8006e90 <_strtod_l+0x8e8>
 8006e3a:	9b05      	ldr	r3, [sp, #20]
 8006e3c:	4641      	mov	r1, r8
 8006e3e:	b1fb      	cbz	r3, 8006e80 <_strtod_l+0x8d8>
 8006e40:	4b9c      	ldr	r3, [pc, #624]	; (80070b4 <_strtod_l+0xb0c>)
 8006e42:	f04f 32ff 	mov.w	r2, #4294967295
 8006e46:	ea09 0303 	and.w	r3, r9, r3
 8006e4a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006e4e:	d81a      	bhi.n	8006e86 <_strtod_l+0x8de>
 8006e50:	0d1b      	lsrs	r3, r3, #20
 8006e52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006e56:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5a:	4299      	cmp	r1, r3
 8006e5c:	d118      	bne.n	8006e90 <_strtod_l+0x8e8>
 8006e5e:	4b96      	ldr	r3, [pc, #600]	; (80070b8 <_strtod_l+0xb10>)
 8006e60:	459a      	cmp	sl, r3
 8006e62:	d102      	bne.n	8006e6a <_strtod_l+0x8c2>
 8006e64:	3101      	adds	r1, #1
 8006e66:	f43f addd 	beq.w	8006a24 <_strtod_l+0x47c>
 8006e6a:	f04f 0800 	mov.w	r8, #0
 8006e6e:	4b91      	ldr	r3, [pc, #580]	; (80070b4 <_strtod_l+0xb0c>)
 8006e70:	ea0a 0303 	and.w	r3, sl, r3
 8006e74:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8006e78:	9b05      	ldr	r3, [sp, #20]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d19a      	bne.n	8006db4 <_strtod_l+0x80c>
 8006e7e:	e5db      	b.n	8006a38 <_strtod_l+0x490>
 8006e80:	f04f 33ff 	mov.w	r3, #4294967295
 8006e84:	e7e9      	b.n	8006e5a <_strtod_l+0x8b2>
 8006e86:	4613      	mov	r3, r2
 8006e88:	e7e7      	b.n	8006e5a <_strtod_l+0x8b2>
 8006e8a:	ea53 0308 	orrs.w	r3, r3, r8
 8006e8e:	d081      	beq.n	8006d94 <_strtod_l+0x7ec>
 8006e90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e92:	b1e3      	cbz	r3, 8006ece <_strtod_l+0x926>
 8006e94:	ea13 0f0a 	tst.w	r3, sl
 8006e98:	d0ee      	beq.n	8006e78 <_strtod_l+0x8d0>
 8006e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e9c:	4640      	mov	r0, r8
 8006e9e:	4649      	mov	r1, r9
 8006ea0:	9a05      	ldr	r2, [sp, #20]
 8006ea2:	b1c3      	cbz	r3, 8006ed6 <_strtod_l+0x92e>
 8006ea4:	f7ff fb5c 	bl	8006560 <sulp>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006eae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006eb0:	f7f9 f95c 	bl	800016c <__adddf3>
 8006eb4:	4680      	mov	r8, r0
 8006eb6:	4689      	mov	r9, r1
 8006eb8:	e7de      	b.n	8006e78 <_strtod_l+0x8d0>
 8006eba:	4013      	ands	r3, r2
 8006ebc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006ec0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006ec4:	f04f 38ff 	mov.w	r8, #4294967295
 8006ec8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006ecc:	e7d4      	b.n	8006e78 <_strtod_l+0x8d0>
 8006ece:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ed0:	ea13 0f08 	tst.w	r3, r8
 8006ed4:	e7e0      	b.n	8006e98 <_strtod_l+0x8f0>
 8006ed6:	f7ff fb43 	bl	8006560 <sulp>
 8006eda:	4602      	mov	r2, r0
 8006edc:	460b      	mov	r3, r1
 8006ede:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006ee0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006ee2:	f7f9 f941 	bl	8000168 <__aeabi_dsub>
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	2300      	movs	r3, #0
 8006eea:	4680      	mov	r8, r0
 8006eec:	4689      	mov	r9, r1
 8006eee:	f7f9 fd5b 	bl	80009a8 <__aeabi_dcmpeq>
 8006ef2:	2800      	cmp	r0, #0
 8006ef4:	d0c0      	beq.n	8006e78 <_strtod_l+0x8d0>
 8006ef6:	e606      	b.n	8006b06 <_strtod_l+0x55e>
 8006ef8:	4659      	mov	r1, fp
 8006efa:	4630      	mov	r0, r6
 8006efc:	f7ff fabe 	bl	800647c <__ratio>
 8006f00:	4602      	mov	r2, r0
 8006f02:	460b      	mov	r3, r1
 8006f04:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f0e:	f7f9 fd5f 	bl	80009d0 <__aeabi_dcmple>
 8006f12:	2800      	cmp	r0, #0
 8006f14:	d06f      	beq.n	8006ff6 <_strtod_l+0xa4e>
 8006f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d17c      	bne.n	8007016 <_strtod_l+0xa6e>
 8006f1c:	f1b8 0f00 	cmp.w	r8, #0
 8006f20:	d159      	bne.n	8006fd6 <_strtod_l+0xa2e>
 8006f22:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d17b      	bne.n	8007022 <_strtod_l+0xa7a>
 8006f2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f2e:	2200      	movs	r2, #0
 8006f30:	4b62      	ldr	r3, [pc, #392]	; (80070bc <_strtod_l+0xb14>)
 8006f32:	f7f9 fd43 	bl	80009bc <__aeabi_dcmplt>
 8006f36:	2800      	cmp	r0, #0
 8006f38:	d15a      	bne.n	8006ff0 <_strtod_l+0xa48>
 8006f3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f3e:	2200      	movs	r2, #0
 8006f40:	4b5f      	ldr	r3, [pc, #380]	; (80070c0 <_strtod_l+0xb18>)
 8006f42:	f7f9 fac9 	bl	80004d8 <__aeabi_dmul>
 8006f46:	4605      	mov	r5, r0
 8006f48:	460f      	mov	r7, r1
 8006f4a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006f4e:	9506      	str	r5, [sp, #24]
 8006f50:	9307      	str	r3, [sp, #28]
 8006f52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f56:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006f5a:	4b56      	ldr	r3, [pc, #344]	; (80070b4 <_strtod_l+0xb0c>)
 8006f5c:	4a55      	ldr	r2, [pc, #340]	; (80070b4 <_strtod_l+0xb0c>)
 8006f5e:	ea0a 0303 	and.w	r3, sl, r3
 8006f62:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f64:	4b57      	ldr	r3, [pc, #348]	; (80070c4 <_strtod_l+0xb1c>)
 8006f66:	ea0a 0202 	and.w	r2, sl, r2
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	f040 80b0 	bne.w	80070d0 <_strtod_l+0xb28>
 8006f70:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8006f74:	4640      	mov	r0, r8
 8006f76:	4649      	mov	r1, r9
 8006f78:	f7ff f9c2 	bl	8006300 <__ulp>
 8006f7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f80:	f7f9 faaa 	bl	80004d8 <__aeabi_dmul>
 8006f84:	4642      	mov	r2, r8
 8006f86:	464b      	mov	r3, r9
 8006f88:	f7f9 f8f0 	bl	800016c <__adddf3>
 8006f8c:	f8df a124 	ldr.w	sl, [pc, #292]	; 80070b4 <_strtod_l+0xb0c>
 8006f90:	4a4d      	ldr	r2, [pc, #308]	; (80070c8 <_strtod_l+0xb20>)
 8006f92:	ea01 0a0a 	and.w	sl, r1, sl
 8006f96:	4592      	cmp	sl, r2
 8006f98:	4680      	mov	r8, r0
 8006f9a:	d948      	bls.n	800702e <_strtod_l+0xa86>
 8006f9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f9e:	4b46      	ldr	r3, [pc, #280]	; (80070b8 <_strtod_l+0xb10>)
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d103      	bne.n	8006fac <_strtod_l+0xa04>
 8006fa4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	f43f ad3c 	beq.w	8006a24 <_strtod_l+0x47c>
 8006fac:	f04f 38ff 	mov.w	r8, #4294967295
 8006fb0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80070b8 <_strtod_l+0xb10>
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006fb8:	f7fe fe76 	bl	8005ca8 <_Bfree>
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	9908      	ldr	r1, [sp, #32]
 8006fc0:	f7fe fe72 	bl	8005ca8 <_Bfree>
 8006fc4:	4659      	mov	r1, fp
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	f7fe fe6e 	bl	8005ca8 <_Bfree>
 8006fcc:	4631      	mov	r1, r6
 8006fce:	4620      	mov	r0, r4
 8006fd0:	f7fe fe6a 	bl	8005ca8 <_Bfree>
 8006fd4:	e605      	b.n	8006be2 <_strtod_l+0x63a>
 8006fd6:	f1b8 0f01 	cmp.w	r8, #1
 8006fda:	d103      	bne.n	8006fe4 <_strtod_l+0xa3c>
 8006fdc:	f1b9 0f00 	cmp.w	r9, #0
 8006fe0:	f43f ad91 	beq.w	8006b06 <_strtod_l+0x55e>
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	4b39      	ldr	r3, [pc, #228]	; (80070cc <_strtod_l+0xb24>)
 8006fe8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006fea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006fee:	e016      	b.n	800701e <_strtod_l+0xa76>
 8006ff0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006ff2:	4f33      	ldr	r7, [pc, #204]	; (80070c0 <_strtod_l+0xb18>)
 8006ff4:	e7a9      	b.n	8006f4a <_strtod_l+0x9a2>
 8006ff6:	4b32      	ldr	r3, [pc, #200]	; (80070c0 <_strtod_l+0xb18>)
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ffe:	f7f9 fa6b 	bl	80004d8 <__aeabi_dmul>
 8007002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007004:	4605      	mov	r5, r0
 8007006:	460f      	mov	r7, r1
 8007008:	2b00      	cmp	r3, #0
 800700a:	d09e      	beq.n	8006f4a <_strtod_l+0x9a2>
 800700c:	4602      	mov	r2, r0
 800700e:	460b      	mov	r3, r1
 8007010:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007014:	e79d      	b.n	8006f52 <_strtod_l+0x9aa>
 8007016:	2200      	movs	r2, #0
 8007018:	4b28      	ldr	r3, [pc, #160]	; (80070bc <_strtod_l+0xb14>)
 800701a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800701e:	4f27      	ldr	r7, [pc, #156]	; (80070bc <_strtod_l+0xb14>)
 8007020:	e797      	b.n	8006f52 <_strtod_l+0x9aa>
 8007022:	2200      	movs	r2, #0
 8007024:	4b29      	ldr	r3, [pc, #164]	; (80070cc <_strtod_l+0xb24>)
 8007026:	4645      	mov	r5, r8
 8007028:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800702c:	e7f7      	b.n	800701e <_strtod_l+0xa76>
 800702e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8007032:	9b05      	ldr	r3, [sp, #20]
 8007034:	46ca      	mov	sl, r9
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1bc      	bne.n	8006fb4 <_strtod_l+0xa0c>
 800703a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800703e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007040:	0d1b      	lsrs	r3, r3, #20
 8007042:	051b      	lsls	r3, r3, #20
 8007044:	429a      	cmp	r2, r3
 8007046:	d1b5      	bne.n	8006fb4 <_strtod_l+0xa0c>
 8007048:	4628      	mov	r0, r5
 800704a:	4639      	mov	r1, r7
 800704c:	f7fa f8d0 	bl	80011f0 <__aeabi_d2lz>
 8007050:	f7f9 fa14 	bl	800047c <__aeabi_l2d>
 8007054:	4602      	mov	r2, r0
 8007056:	460b      	mov	r3, r1
 8007058:	4628      	mov	r0, r5
 800705a:	4639      	mov	r1, r7
 800705c:	f7f9 f884 	bl	8000168 <__aeabi_dsub>
 8007060:	460b      	mov	r3, r1
 8007062:	4602      	mov	r2, r0
 8007064:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8007068:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800706c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800706e:	ea4a 0a08 	orr.w	sl, sl, r8
 8007072:	ea5a 0a03 	orrs.w	sl, sl, r3
 8007076:	d06c      	beq.n	8007152 <_strtod_l+0xbaa>
 8007078:	a309      	add	r3, pc, #36	; (adr r3, 80070a0 <_strtod_l+0xaf8>)
 800707a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707e:	f7f9 fc9d 	bl	80009bc <__aeabi_dcmplt>
 8007082:	2800      	cmp	r0, #0
 8007084:	f47f acd8 	bne.w	8006a38 <_strtod_l+0x490>
 8007088:	a307      	add	r3, pc, #28	; (adr r3, 80070a8 <_strtod_l+0xb00>)
 800708a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007092:	f7f9 fcb1 	bl	80009f8 <__aeabi_dcmpgt>
 8007096:	2800      	cmp	r0, #0
 8007098:	d08c      	beq.n	8006fb4 <_strtod_l+0xa0c>
 800709a:	e4cd      	b.n	8006a38 <_strtod_l+0x490>
 800709c:	f3af 8000 	nop.w
 80070a0:	94a03595 	.word	0x94a03595
 80070a4:	3fdfffff 	.word	0x3fdfffff
 80070a8:	35afe535 	.word	0x35afe535
 80070ac:	3fe00000 	.word	0x3fe00000
 80070b0:	000fffff 	.word	0x000fffff
 80070b4:	7ff00000 	.word	0x7ff00000
 80070b8:	7fefffff 	.word	0x7fefffff
 80070bc:	3ff00000 	.word	0x3ff00000
 80070c0:	3fe00000 	.word	0x3fe00000
 80070c4:	7fe00000 	.word	0x7fe00000
 80070c8:	7c9fffff 	.word	0x7c9fffff
 80070cc:	bff00000 	.word	0xbff00000
 80070d0:	9b05      	ldr	r3, [sp, #20]
 80070d2:	b333      	cbz	r3, 8007122 <_strtod_l+0xb7a>
 80070d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80070d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80070da:	d822      	bhi.n	8007122 <_strtod_l+0xb7a>
 80070dc:	a328      	add	r3, pc, #160	; (adr r3, 8007180 <_strtod_l+0xbd8>)
 80070de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e2:	4628      	mov	r0, r5
 80070e4:	4639      	mov	r1, r7
 80070e6:	f7f9 fc73 	bl	80009d0 <__aeabi_dcmple>
 80070ea:	b1a0      	cbz	r0, 8007116 <_strtod_l+0xb6e>
 80070ec:	4639      	mov	r1, r7
 80070ee:	4628      	mov	r0, r5
 80070f0:	f7f9 fcca 	bl	8000a88 <__aeabi_d2uiz>
 80070f4:	2801      	cmp	r0, #1
 80070f6:	bf38      	it	cc
 80070f8:	2001      	movcc	r0, #1
 80070fa:	f7f9 f973 	bl	80003e4 <__aeabi_ui2d>
 80070fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007100:	4605      	mov	r5, r0
 8007102:	460f      	mov	r7, r1
 8007104:	bb03      	cbnz	r3, 8007148 <_strtod_l+0xba0>
 8007106:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800710a:	9014      	str	r0, [sp, #80]	; 0x50
 800710c:	9315      	str	r3, [sp, #84]	; 0x54
 800710e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007112:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007116:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007118:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800711a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800711e:	1a9b      	subs	r3, r3, r2
 8007120:	9311      	str	r3, [sp, #68]	; 0x44
 8007122:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007124:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007126:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800712a:	f7ff f8e9 	bl	8006300 <__ulp>
 800712e:	4602      	mov	r2, r0
 8007130:	460b      	mov	r3, r1
 8007132:	4640      	mov	r0, r8
 8007134:	4649      	mov	r1, r9
 8007136:	f7f9 f9cf 	bl	80004d8 <__aeabi_dmul>
 800713a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800713c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800713e:	f7f9 f815 	bl	800016c <__adddf3>
 8007142:	4680      	mov	r8, r0
 8007144:	4689      	mov	r9, r1
 8007146:	e774      	b.n	8007032 <_strtod_l+0xa8a>
 8007148:	4602      	mov	r2, r0
 800714a:	460b      	mov	r3, r1
 800714c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007150:	e7dd      	b.n	800710e <_strtod_l+0xb66>
 8007152:	a30d      	add	r3, pc, #52	; (adr r3, 8007188 <_strtod_l+0xbe0>)
 8007154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007158:	f7f9 fc30 	bl	80009bc <__aeabi_dcmplt>
 800715c:	e79b      	b.n	8007096 <_strtod_l+0xaee>
 800715e:	2300      	movs	r3, #0
 8007160:	930e      	str	r3, [sp, #56]	; 0x38
 8007162:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007164:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007166:	6013      	str	r3, [r2, #0]
 8007168:	f7ff ba5b 	b.w	8006622 <_strtod_l+0x7a>
 800716c:	2a65      	cmp	r2, #101	; 0x65
 800716e:	f43f ab52 	beq.w	8006816 <_strtod_l+0x26e>
 8007172:	2a45      	cmp	r2, #69	; 0x45
 8007174:	f43f ab4f 	beq.w	8006816 <_strtod_l+0x26e>
 8007178:	2301      	movs	r3, #1
 800717a:	f7ff bb87 	b.w	800688c <_strtod_l+0x2e4>
 800717e:	bf00      	nop
 8007180:	ffc00000 	.word	0xffc00000
 8007184:	41dfffff 	.word	0x41dfffff
 8007188:	94a03595 	.word	0x94a03595
 800718c:	3fcfffff 	.word	0x3fcfffff

08007190 <_strtod_r>:
 8007190:	4b01      	ldr	r3, [pc, #4]	; (8007198 <_strtod_r+0x8>)
 8007192:	f7ff ba09 	b.w	80065a8 <_strtod_l>
 8007196:	bf00      	nop
 8007198:	2000008c 	.word	0x2000008c

0800719c <_strtol_l.constprop.0>:
 800719c:	2b01      	cmp	r3, #1
 800719e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071a2:	4686      	mov	lr, r0
 80071a4:	4690      	mov	r8, r2
 80071a6:	d001      	beq.n	80071ac <_strtol_l.constprop.0+0x10>
 80071a8:	2b24      	cmp	r3, #36	; 0x24
 80071aa:	d906      	bls.n	80071ba <_strtol_l.constprop.0+0x1e>
 80071ac:	f7fd fd90 	bl	8004cd0 <__errno>
 80071b0:	2316      	movs	r3, #22
 80071b2:	6003      	str	r3, [r0, #0]
 80071b4:	2000      	movs	r0, #0
 80071b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ba:	460d      	mov	r5, r1
 80071bc:	4835      	ldr	r0, [pc, #212]	; (8007294 <_strtol_l.constprop.0+0xf8>)
 80071be:	462a      	mov	r2, r5
 80071c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071c4:	5d06      	ldrb	r6, [r0, r4]
 80071c6:	f016 0608 	ands.w	r6, r6, #8
 80071ca:	d1f8      	bne.n	80071be <_strtol_l.constprop.0+0x22>
 80071cc:	2c2d      	cmp	r4, #45	; 0x2d
 80071ce:	d12e      	bne.n	800722e <_strtol_l.constprop.0+0x92>
 80071d0:	2601      	movs	r6, #1
 80071d2:	782c      	ldrb	r4, [r5, #0]
 80071d4:	1c95      	adds	r5, r2, #2
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d057      	beq.n	800728a <_strtol_l.constprop.0+0xee>
 80071da:	2b10      	cmp	r3, #16
 80071dc:	d109      	bne.n	80071f2 <_strtol_l.constprop.0+0x56>
 80071de:	2c30      	cmp	r4, #48	; 0x30
 80071e0:	d107      	bne.n	80071f2 <_strtol_l.constprop.0+0x56>
 80071e2:	782a      	ldrb	r2, [r5, #0]
 80071e4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80071e8:	2a58      	cmp	r2, #88	; 0x58
 80071ea:	d149      	bne.n	8007280 <_strtol_l.constprop.0+0xe4>
 80071ec:	2310      	movs	r3, #16
 80071ee:	786c      	ldrb	r4, [r5, #1]
 80071f0:	3502      	adds	r5, #2
 80071f2:	2200      	movs	r2, #0
 80071f4:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80071f8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80071fc:	fbbc f9f3 	udiv	r9, ip, r3
 8007200:	4610      	mov	r0, r2
 8007202:	fb03 ca19 	mls	sl, r3, r9, ip
 8007206:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800720a:	2f09      	cmp	r7, #9
 800720c:	d814      	bhi.n	8007238 <_strtol_l.constprop.0+0x9c>
 800720e:	463c      	mov	r4, r7
 8007210:	42a3      	cmp	r3, r4
 8007212:	dd20      	ble.n	8007256 <_strtol_l.constprop.0+0xba>
 8007214:	1c57      	adds	r7, r2, #1
 8007216:	d007      	beq.n	8007228 <_strtol_l.constprop.0+0x8c>
 8007218:	4581      	cmp	r9, r0
 800721a:	d319      	bcc.n	8007250 <_strtol_l.constprop.0+0xb4>
 800721c:	d101      	bne.n	8007222 <_strtol_l.constprop.0+0x86>
 800721e:	45a2      	cmp	sl, r4
 8007220:	db16      	blt.n	8007250 <_strtol_l.constprop.0+0xb4>
 8007222:	2201      	movs	r2, #1
 8007224:	fb00 4003 	mla	r0, r0, r3, r4
 8007228:	f815 4b01 	ldrb.w	r4, [r5], #1
 800722c:	e7eb      	b.n	8007206 <_strtol_l.constprop.0+0x6a>
 800722e:	2c2b      	cmp	r4, #43	; 0x2b
 8007230:	bf04      	itt	eq
 8007232:	782c      	ldrbeq	r4, [r5, #0]
 8007234:	1c95      	addeq	r5, r2, #2
 8007236:	e7ce      	b.n	80071d6 <_strtol_l.constprop.0+0x3a>
 8007238:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800723c:	2f19      	cmp	r7, #25
 800723e:	d801      	bhi.n	8007244 <_strtol_l.constprop.0+0xa8>
 8007240:	3c37      	subs	r4, #55	; 0x37
 8007242:	e7e5      	b.n	8007210 <_strtol_l.constprop.0+0x74>
 8007244:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007248:	2f19      	cmp	r7, #25
 800724a:	d804      	bhi.n	8007256 <_strtol_l.constprop.0+0xba>
 800724c:	3c57      	subs	r4, #87	; 0x57
 800724e:	e7df      	b.n	8007210 <_strtol_l.constprop.0+0x74>
 8007250:	f04f 32ff 	mov.w	r2, #4294967295
 8007254:	e7e8      	b.n	8007228 <_strtol_l.constprop.0+0x8c>
 8007256:	1c53      	adds	r3, r2, #1
 8007258:	d108      	bne.n	800726c <_strtol_l.constprop.0+0xd0>
 800725a:	2322      	movs	r3, #34	; 0x22
 800725c:	4660      	mov	r0, ip
 800725e:	f8ce 3000 	str.w	r3, [lr]
 8007262:	f1b8 0f00 	cmp.w	r8, #0
 8007266:	d0a6      	beq.n	80071b6 <_strtol_l.constprop.0+0x1a>
 8007268:	1e69      	subs	r1, r5, #1
 800726a:	e006      	b.n	800727a <_strtol_l.constprop.0+0xde>
 800726c:	b106      	cbz	r6, 8007270 <_strtol_l.constprop.0+0xd4>
 800726e:	4240      	negs	r0, r0
 8007270:	f1b8 0f00 	cmp.w	r8, #0
 8007274:	d09f      	beq.n	80071b6 <_strtol_l.constprop.0+0x1a>
 8007276:	2a00      	cmp	r2, #0
 8007278:	d1f6      	bne.n	8007268 <_strtol_l.constprop.0+0xcc>
 800727a:	f8c8 1000 	str.w	r1, [r8]
 800727e:	e79a      	b.n	80071b6 <_strtol_l.constprop.0+0x1a>
 8007280:	2430      	movs	r4, #48	; 0x30
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1b5      	bne.n	80071f2 <_strtol_l.constprop.0+0x56>
 8007286:	2308      	movs	r3, #8
 8007288:	e7b3      	b.n	80071f2 <_strtol_l.constprop.0+0x56>
 800728a:	2c30      	cmp	r4, #48	; 0x30
 800728c:	d0a9      	beq.n	80071e2 <_strtol_l.constprop.0+0x46>
 800728e:	230a      	movs	r3, #10
 8007290:	e7af      	b.n	80071f2 <_strtol_l.constprop.0+0x56>
 8007292:	bf00      	nop
 8007294:	080087c9 	.word	0x080087c9

08007298 <_strtol_r>:
 8007298:	f7ff bf80 	b.w	800719c <_strtol_l.constprop.0>

0800729c <__ssputs_r>:
 800729c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072a0:	461f      	mov	r7, r3
 80072a2:	688e      	ldr	r6, [r1, #8]
 80072a4:	4682      	mov	sl, r0
 80072a6:	42be      	cmp	r6, r7
 80072a8:	460c      	mov	r4, r1
 80072aa:	4690      	mov	r8, r2
 80072ac:	680b      	ldr	r3, [r1, #0]
 80072ae:	d82c      	bhi.n	800730a <__ssputs_r+0x6e>
 80072b0:	898a      	ldrh	r2, [r1, #12]
 80072b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80072b6:	d026      	beq.n	8007306 <__ssputs_r+0x6a>
 80072b8:	6965      	ldr	r5, [r4, #20]
 80072ba:	6909      	ldr	r1, [r1, #16]
 80072bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072c0:	eba3 0901 	sub.w	r9, r3, r1
 80072c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072c8:	1c7b      	adds	r3, r7, #1
 80072ca:	444b      	add	r3, r9
 80072cc:	106d      	asrs	r5, r5, #1
 80072ce:	429d      	cmp	r5, r3
 80072d0:	bf38      	it	cc
 80072d2:	461d      	movcc	r5, r3
 80072d4:	0553      	lsls	r3, r2, #21
 80072d6:	d527      	bpl.n	8007328 <__ssputs_r+0x8c>
 80072d8:	4629      	mov	r1, r5
 80072da:	f7fe fc19 	bl	8005b10 <_malloc_r>
 80072de:	4606      	mov	r6, r0
 80072e0:	b360      	cbz	r0, 800733c <__ssputs_r+0xa0>
 80072e2:	464a      	mov	r2, r9
 80072e4:	6921      	ldr	r1, [r4, #16]
 80072e6:	f000 fa17 	bl	8007718 <memcpy>
 80072ea:	89a3      	ldrh	r3, [r4, #12]
 80072ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072f4:	81a3      	strh	r3, [r4, #12]
 80072f6:	6126      	str	r6, [r4, #16]
 80072f8:	444e      	add	r6, r9
 80072fa:	6026      	str	r6, [r4, #0]
 80072fc:	463e      	mov	r6, r7
 80072fe:	6165      	str	r5, [r4, #20]
 8007300:	eba5 0509 	sub.w	r5, r5, r9
 8007304:	60a5      	str	r5, [r4, #8]
 8007306:	42be      	cmp	r6, r7
 8007308:	d900      	bls.n	800730c <__ssputs_r+0x70>
 800730a:	463e      	mov	r6, r7
 800730c:	4632      	mov	r2, r6
 800730e:	4641      	mov	r1, r8
 8007310:	6820      	ldr	r0, [r4, #0]
 8007312:	f000 f9c5 	bl	80076a0 <memmove>
 8007316:	2000      	movs	r0, #0
 8007318:	68a3      	ldr	r3, [r4, #8]
 800731a:	1b9b      	subs	r3, r3, r6
 800731c:	60a3      	str	r3, [r4, #8]
 800731e:	6823      	ldr	r3, [r4, #0]
 8007320:	4433      	add	r3, r6
 8007322:	6023      	str	r3, [r4, #0]
 8007324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007328:	462a      	mov	r2, r5
 800732a:	f000 fda6 	bl	8007e7a <_realloc_r>
 800732e:	4606      	mov	r6, r0
 8007330:	2800      	cmp	r0, #0
 8007332:	d1e0      	bne.n	80072f6 <__ssputs_r+0x5a>
 8007334:	4650      	mov	r0, sl
 8007336:	6921      	ldr	r1, [r4, #16]
 8007338:	f7fe fb7a 	bl	8005a30 <_free_r>
 800733c:	230c      	movs	r3, #12
 800733e:	f8ca 3000 	str.w	r3, [sl]
 8007342:	89a3      	ldrh	r3, [r4, #12]
 8007344:	f04f 30ff 	mov.w	r0, #4294967295
 8007348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800734c:	81a3      	strh	r3, [r4, #12]
 800734e:	e7e9      	b.n	8007324 <__ssputs_r+0x88>

08007350 <_svfiprintf_r>:
 8007350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007354:	4698      	mov	r8, r3
 8007356:	898b      	ldrh	r3, [r1, #12]
 8007358:	4607      	mov	r7, r0
 800735a:	061b      	lsls	r3, r3, #24
 800735c:	460d      	mov	r5, r1
 800735e:	4614      	mov	r4, r2
 8007360:	b09d      	sub	sp, #116	; 0x74
 8007362:	d50e      	bpl.n	8007382 <_svfiprintf_r+0x32>
 8007364:	690b      	ldr	r3, [r1, #16]
 8007366:	b963      	cbnz	r3, 8007382 <_svfiprintf_r+0x32>
 8007368:	2140      	movs	r1, #64	; 0x40
 800736a:	f7fe fbd1 	bl	8005b10 <_malloc_r>
 800736e:	6028      	str	r0, [r5, #0]
 8007370:	6128      	str	r0, [r5, #16]
 8007372:	b920      	cbnz	r0, 800737e <_svfiprintf_r+0x2e>
 8007374:	230c      	movs	r3, #12
 8007376:	603b      	str	r3, [r7, #0]
 8007378:	f04f 30ff 	mov.w	r0, #4294967295
 800737c:	e0d0      	b.n	8007520 <_svfiprintf_r+0x1d0>
 800737e:	2340      	movs	r3, #64	; 0x40
 8007380:	616b      	str	r3, [r5, #20]
 8007382:	2300      	movs	r3, #0
 8007384:	9309      	str	r3, [sp, #36]	; 0x24
 8007386:	2320      	movs	r3, #32
 8007388:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800738c:	2330      	movs	r3, #48	; 0x30
 800738e:	f04f 0901 	mov.w	r9, #1
 8007392:	f8cd 800c 	str.w	r8, [sp, #12]
 8007396:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007538 <_svfiprintf_r+0x1e8>
 800739a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800739e:	4623      	mov	r3, r4
 80073a0:	469a      	mov	sl, r3
 80073a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073a6:	b10a      	cbz	r2, 80073ac <_svfiprintf_r+0x5c>
 80073a8:	2a25      	cmp	r2, #37	; 0x25
 80073aa:	d1f9      	bne.n	80073a0 <_svfiprintf_r+0x50>
 80073ac:	ebba 0b04 	subs.w	fp, sl, r4
 80073b0:	d00b      	beq.n	80073ca <_svfiprintf_r+0x7a>
 80073b2:	465b      	mov	r3, fp
 80073b4:	4622      	mov	r2, r4
 80073b6:	4629      	mov	r1, r5
 80073b8:	4638      	mov	r0, r7
 80073ba:	f7ff ff6f 	bl	800729c <__ssputs_r>
 80073be:	3001      	adds	r0, #1
 80073c0:	f000 80a9 	beq.w	8007516 <_svfiprintf_r+0x1c6>
 80073c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073c6:	445a      	add	r2, fp
 80073c8:	9209      	str	r2, [sp, #36]	; 0x24
 80073ca:	f89a 3000 	ldrb.w	r3, [sl]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f000 80a1 	beq.w	8007516 <_svfiprintf_r+0x1c6>
 80073d4:	2300      	movs	r3, #0
 80073d6:	f04f 32ff 	mov.w	r2, #4294967295
 80073da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073de:	f10a 0a01 	add.w	sl, sl, #1
 80073e2:	9304      	str	r3, [sp, #16]
 80073e4:	9307      	str	r3, [sp, #28]
 80073e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073ea:	931a      	str	r3, [sp, #104]	; 0x68
 80073ec:	4654      	mov	r4, sl
 80073ee:	2205      	movs	r2, #5
 80073f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073f4:	4850      	ldr	r0, [pc, #320]	; (8007538 <_svfiprintf_r+0x1e8>)
 80073f6:	f7fd fc98 	bl	8004d2a <memchr>
 80073fa:	9a04      	ldr	r2, [sp, #16]
 80073fc:	b9d8      	cbnz	r0, 8007436 <_svfiprintf_r+0xe6>
 80073fe:	06d0      	lsls	r0, r2, #27
 8007400:	bf44      	itt	mi
 8007402:	2320      	movmi	r3, #32
 8007404:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007408:	0711      	lsls	r1, r2, #28
 800740a:	bf44      	itt	mi
 800740c:	232b      	movmi	r3, #43	; 0x2b
 800740e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007412:	f89a 3000 	ldrb.w	r3, [sl]
 8007416:	2b2a      	cmp	r3, #42	; 0x2a
 8007418:	d015      	beq.n	8007446 <_svfiprintf_r+0xf6>
 800741a:	4654      	mov	r4, sl
 800741c:	2000      	movs	r0, #0
 800741e:	f04f 0c0a 	mov.w	ip, #10
 8007422:	9a07      	ldr	r2, [sp, #28]
 8007424:	4621      	mov	r1, r4
 8007426:	f811 3b01 	ldrb.w	r3, [r1], #1
 800742a:	3b30      	subs	r3, #48	; 0x30
 800742c:	2b09      	cmp	r3, #9
 800742e:	d94d      	bls.n	80074cc <_svfiprintf_r+0x17c>
 8007430:	b1b0      	cbz	r0, 8007460 <_svfiprintf_r+0x110>
 8007432:	9207      	str	r2, [sp, #28]
 8007434:	e014      	b.n	8007460 <_svfiprintf_r+0x110>
 8007436:	eba0 0308 	sub.w	r3, r0, r8
 800743a:	fa09 f303 	lsl.w	r3, r9, r3
 800743e:	4313      	orrs	r3, r2
 8007440:	46a2      	mov	sl, r4
 8007442:	9304      	str	r3, [sp, #16]
 8007444:	e7d2      	b.n	80073ec <_svfiprintf_r+0x9c>
 8007446:	9b03      	ldr	r3, [sp, #12]
 8007448:	1d19      	adds	r1, r3, #4
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	9103      	str	r1, [sp, #12]
 800744e:	2b00      	cmp	r3, #0
 8007450:	bfbb      	ittet	lt
 8007452:	425b      	neglt	r3, r3
 8007454:	f042 0202 	orrlt.w	r2, r2, #2
 8007458:	9307      	strge	r3, [sp, #28]
 800745a:	9307      	strlt	r3, [sp, #28]
 800745c:	bfb8      	it	lt
 800745e:	9204      	strlt	r2, [sp, #16]
 8007460:	7823      	ldrb	r3, [r4, #0]
 8007462:	2b2e      	cmp	r3, #46	; 0x2e
 8007464:	d10c      	bne.n	8007480 <_svfiprintf_r+0x130>
 8007466:	7863      	ldrb	r3, [r4, #1]
 8007468:	2b2a      	cmp	r3, #42	; 0x2a
 800746a:	d134      	bne.n	80074d6 <_svfiprintf_r+0x186>
 800746c:	9b03      	ldr	r3, [sp, #12]
 800746e:	3402      	adds	r4, #2
 8007470:	1d1a      	adds	r2, r3, #4
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	9203      	str	r2, [sp, #12]
 8007476:	2b00      	cmp	r3, #0
 8007478:	bfb8      	it	lt
 800747a:	f04f 33ff 	movlt.w	r3, #4294967295
 800747e:	9305      	str	r3, [sp, #20]
 8007480:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800753c <_svfiprintf_r+0x1ec>
 8007484:	2203      	movs	r2, #3
 8007486:	4650      	mov	r0, sl
 8007488:	7821      	ldrb	r1, [r4, #0]
 800748a:	f7fd fc4e 	bl	8004d2a <memchr>
 800748e:	b138      	cbz	r0, 80074a0 <_svfiprintf_r+0x150>
 8007490:	2240      	movs	r2, #64	; 0x40
 8007492:	9b04      	ldr	r3, [sp, #16]
 8007494:	eba0 000a 	sub.w	r0, r0, sl
 8007498:	4082      	lsls	r2, r0
 800749a:	4313      	orrs	r3, r2
 800749c:	3401      	adds	r4, #1
 800749e:	9304      	str	r3, [sp, #16]
 80074a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074a4:	2206      	movs	r2, #6
 80074a6:	4826      	ldr	r0, [pc, #152]	; (8007540 <_svfiprintf_r+0x1f0>)
 80074a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074ac:	f7fd fc3d 	bl	8004d2a <memchr>
 80074b0:	2800      	cmp	r0, #0
 80074b2:	d038      	beq.n	8007526 <_svfiprintf_r+0x1d6>
 80074b4:	4b23      	ldr	r3, [pc, #140]	; (8007544 <_svfiprintf_r+0x1f4>)
 80074b6:	bb1b      	cbnz	r3, 8007500 <_svfiprintf_r+0x1b0>
 80074b8:	9b03      	ldr	r3, [sp, #12]
 80074ba:	3307      	adds	r3, #7
 80074bc:	f023 0307 	bic.w	r3, r3, #7
 80074c0:	3308      	adds	r3, #8
 80074c2:	9303      	str	r3, [sp, #12]
 80074c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074c6:	4433      	add	r3, r6
 80074c8:	9309      	str	r3, [sp, #36]	; 0x24
 80074ca:	e768      	b.n	800739e <_svfiprintf_r+0x4e>
 80074cc:	460c      	mov	r4, r1
 80074ce:	2001      	movs	r0, #1
 80074d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80074d4:	e7a6      	b.n	8007424 <_svfiprintf_r+0xd4>
 80074d6:	2300      	movs	r3, #0
 80074d8:	f04f 0c0a 	mov.w	ip, #10
 80074dc:	4619      	mov	r1, r3
 80074de:	3401      	adds	r4, #1
 80074e0:	9305      	str	r3, [sp, #20]
 80074e2:	4620      	mov	r0, r4
 80074e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074e8:	3a30      	subs	r2, #48	; 0x30
 80074ea:	2a09      	cmp	r2, #9
 80074ec:	d903      	bls.n	80074f6 <_svfiprintf_r+0x1a6>
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d0c6      	beq.n	8007480 <_svfiprintf_r+0x130>
 80074f2:	9105      	str	r1, [sp, #20]
 80074f4:	e7c4      	b.n	8007480 <_svfiprintf_r+0x130>
 80074f6:	4604      	mov	r4, r0
 80074f8:	2301      	movs	r3, #1
 80074fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80074fe:	e7f0      	b.n	80074e2 <_svfiprintf_r+0x192>
 8007500:	ab03      	add	r3, sp, #12
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	462a      	mov	r2, r5
 8007506:	4638      	mov	r0, r7
 8007508:	4b0f      	ldr	r3, [pc, #60]	; (8007548 <_svfiprintf_r+0x1f8>)
 800750a:	a904      	add	r1, sp, #16
 800750c:	f7fc fc98 	bl	8003e40 <_printf_float>
 8007510:	1c42      	adds	r2, r0, #1
 8007512:	4606      	mov	r6, r0
 8007514:	d1d6      	bne.n	80074c4 <_svfiprintf_r+0x174>
 8007516:	89ab      	ldrh	r3, [r5, #12]
 8007518:	065b      	lsls	r3, r3, #25
 800751a:	f53f af2d 	bmi.w	8007378 <_svfiprintf_r+0x28>
 800751e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007520:	b01d      	add	sp, #116	; 0x74
 8007522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007526:	ab03      	add	r3, sp, #12
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	462a      	mov	r2, r5
 800752c:	4638      	mov	r0, r7
 800752e:	4b06      	ldr	r3, [pc, #24]	; (8007548 <_svfiprintf_r+0x1f8>)
 8007530:	a904      	add	r1, sp, #16
 8007532:	f7fc ff25 	bl	8004380 <_printf_i>
 8007536:	e7eb      	b.n	8007510 <_svfiprintf_r+0x1c0>
 8007538:	080088c9 	.word	0x080088c9
 800753c:	080088cf 	.word	0x080088cf
 8007540:	080088d3 	.word	0x080088d3
 8007544:	08003e41 	.word	0x08003e41
 8007548:	0800729d 	.word	0x0800729d

0800754c <__sflush_r>:
 800754c:	898a      	ldrh	r2, [r1, #12]
 800754e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007550:	4605      	mov	r5, r0
 8007552:	0710      	lsls	r0, r2, #28
 8007554:	460c      	mov	r4, r1
 8007556:	d457      	bmi.n	8007608 <__sflush_r+0xbc>
 8007558:	684b      	ldr	r3, [r1, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	dc04      	bgt.n	8007568 <__sflush_r+0x1c>
 800755e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007560:	2b00      	cmp	r3, #0
 8007562:	dc01      	bgt.n	8007568 <__sflush_r+0x1c>
 8007564:	2000      	movs	r0, #0
 8007566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007568:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800756a:	2e00      	cmp	r6, #0
 800756c:	d0fa      	beq.n	8007564 <__sflush_r+0x18>
 800756e:	2300      	movs	r3, #0
 8007570:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007574:	682f      	ldr	r7, [r5, #0]
 8007576:	6a21      	ldr	r1, [r4, #32]
 8007578:	602b      	str	r3, [r5, #0]
 800757a:	d032      	beq.n	80075e2 <__sflush_r+0x96>
 800757c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800757e:	89a3      	ldrh	r3, [r4, #12]
 8007580:	075a      	lsls	r2, r3, #29
 8007582:	d505      	bpl.n	8007590 <__sflush_r+0x44>
 8007584:	6863      	ldr	r3, [r4, #4]
 8007586:	1ac0      	subs	r0, r0, r3
 8007588:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800758a:	b10b      	cbz	r3, 8007590 <__sflush_r+0x44>
 800758c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800758e:	1ac0      	subs	r0, r0, r3
 8007590:	2300      	movs	r3, #0
 8007592:	4602      	mov	r2, r0
 8007594:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007596:	4628      	mov	r0, r5
 8007598:	6a21      	ldr	r1, [r4, #32]
 800759a:	47b0      	blx	r6
 800759c:	1c43      	adds	r3, r0, #1
 800759e:	89a3      	ldrh	r3, [r4, #12]
 80075a0:	d106      	bne.n	80075b0 <__sflush_r+0x64>
 80075a2:	6829      	ldr	r1, [r5, #0]
 80075a4:	291d      	cmp	r1, #29
 80075a6:	d82b      	bhi.n	8007600 <__sflush_r+0xb4>
 80075a8:	4a28      	ldr	r2, [pc, #160]	; (800764c <__sflush_r+0x100>)
 80075aa:	410a      	asrs	r2, r1
 80075ac:	07d6      	lsls	r6, r2, #31
 80075ae:	d427      	bmi.n	8007600 <__sflush_r+0xb4>
 80075b0:	2200      	movs	r2, #0
 80075b2:	6062      	str	r2, [r4, #4]
 80075b4:	6922      	ldr	r2, [r4, #16]
 80075b6:	04d9      	lsls	r1, r3, #19
 80075b8:	6022      	str	r2, [r4, #0]
 80075ba:	d504      	bpl.n	80075c6 <__sflush_r+0x7a>
 80075bc:	1c42      	adds	r2, r0, #1
 80075be:	d101      	bne.n	80075c4 <__sflush_r+0x78>
 80075c0:	682b      	ldr	r3, [r5, #0]
 80075c2:	b903      	cbnz	r3, 80075c6 <__sflush_r+0x7a>
 80075c4:	6560      	str	r0, [r4, #84]	; 0x54
 80075c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075c8:	602f      	str	r7, [r5, #0]
 80075ca:	2900      	cmp	r1, #0
 80075cc:	d0ca      	beq.n	8007564 <__sflush_r+0x18>
 80075ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075d2:	4299      	cmp	r1, r3
 80075d4:	d002      	beq.n	80075dc <__sflush_r+0x90>
 80075d6:	4628      	mov	r0, r5
 80075d8:	f7fe fa2a 	bl	8005a30 <_free_r>
 80075dc:	2000      	movs	r0, #0
 80075de:	6360      	str	r0, [r4, #52]	; 0x34
 80075e0:	e7c1      	b.n	8007566 <__sflush_r+0x1a>
 80075e2:	2301      	movs	r3, #1
 80075e4:	4628      	mov	r0, r5
 80075e6:	47b0      	blx	r6
 80075e8:	1c41      	adds	r1, r0, #1
 80075ea:	d1c8      	bne.n	800757e <__sflush_r+0x32>
 80075ec:	682b      	ldr	r3, [r5, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d0c5      	beq.n	800757e <__sflush_r+0x32>
 80075f2:	2b1d      	cmp	r3, #29
 80075f4:	d001      	beq.n	80075fa <__sflush_r+0xae>
 80075f6:	2b16      	cmp	r3, #22
 80075f8:	d101      	bne.n	80075fe <__sflush_r+0xb2>
 80075fa:	602f      	str	r7, [r5, #0]
 80075fc:	e7b2      	b.n	8007564 <__sflush_r+0x18>
 80075fe:	89a3      	ldrh	r3, [r4, #12]
 8007600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007604:	81a3      	strh	r3, [r4, #12]
 8007606:	e7ae      	b.n	8007566 <__sflush_r+0x1a>
 8007608:	690f      	ldr	r7, [r1, #16]
 800760a:	2f00      	cmp	r7, #0
 800760c:	d0aa      	beq.n	8007564 <__sflush_r+0x18>
 800760e:	0793      	lsls	r3, r2, #30
 8007610:	bf18      	it	ne
 8007612:	2300      	movne	r3, #0
 8007614:	680e      	ldr	r6, [r1, #0]
 8007616:	bf08      	it	eq
 8007618:	694b      	ldreq	r3, [r1, #20]
 800761a:	1bf6      	subs	r6, r6, r7
 800761c:	600f      	str	r7, [r1, #0]
 800761e:	608b      	str	r3, [r1, #8]
 8007620:	2e00      	cmp	r6, #0
 8007622:	dd9f      	ble.n	8007564 <__sflush_r+0x18>
 8007624:	4633      	mov	r3, r6
 8007626:	463a      	mov	r2, r7
 8007628:	4628      	mov	r0, r5
 800762a:	6a21      	ldr	r1, [r4, #32]
 800762c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007630:	47e0      	blx	ip
 8007632:	2800      	cmp	r0, #0
 8007634:	dc06      	bgt.n	8007644 <__sflush_r+0xf8>
 8007636:	89a3      	ldrh	r3, [r4, #12]
 8007638:	f04f 30ff 	mov.w	r0, #4294967295
 800763c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007640:	81a3      	strh	r3, [r4, #12]
 8007642:	e790      	b.n	8007566 <__sflush_r+0x1a>
 8007644:	4407      	add	r7, r0
 8007646:	1a36      	subs	r6, r6, r0
 8007648:	e7ea      	b.n	8007620 <__sflush_r+0xd4>
 800764a:	bf00      	nop
 800764c:	dfbffffe 	.word	0xdfbffffe

08007650 <_fflush_r>:
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	690b      	ldr	r3, [r1, #16]
 8007654:	4605      	mov	r5, r0
 8007656:	460c      	mov	r4, r1
 8007658:	b913      	cbnz	r3, 8007660 <_fflush_r+0x10>
 800765a:	2500      	movs	r5, #0
 800765c:	4628      	mov	r0, r5
 800765e:	bd38      	pop	{r3, r4, r5, pc}
 8007660:	b118      	cbz	r0, 800766a <_fflush_r+0x1a>
 8007662:	6a03      	ldr	r3, [r0, #32]
 8007664:	b90b      	cbnz	r3, 800766a <_fflush_r+0x1a>
 8007666:	f7fd fa47 	bl	8004af8 <__sinit>
 800766a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d0f3      	beq.n	800765a <_fflush_r+0xa>
 8007672:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007674:	07d0      	lsls	r0, r2, #31
 8007676:	d404      	bmi.n	8007682 <_fflush_r+0x32>
 8007678:	0599      	lsls	r1, r3, #22
 800767a:	d402      	bmi.n	8007682 <_fflush_r+0x32>
 800767c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800767e:	f7fd fb52 	bl	8004d26 <__retarget_lock_acquire_recursive>
 8007682:	4628      	mov	r0, r5
 8007684:	4621      	mov	r1, r4
 8007686:	f7ff ff61 	bl	800754c <__sflush_r>
 800768a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800768c:	4605      	mov	r5, r0
 800768e:	07da      	lsls	r2, r3, #31
 8007690:	d4e4      	bmi.n	800765c <_fflush_r+0xc>
 8007692:	89a3      	ldrh	r3, [r4, #12]
 8007694:	059b      	lsls	r3, r3, #22
 8007696:	d4e1      	bmi.n	800765c <_fflush_r+0xc>
 8007698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800769a:	f7fd fb45 	bl	8004d28 <__retarget_lock_release_recursive>
 800769e:	e7dd      	b.n	800765c <_fflush_r+0xc>

080076a0 <memmove>:
 80076a0:	4288      	cmp	r0, r1
 80076a2:	b510      	push	{r4, lr}
 80076a4:	eb01 0402 	add.w	r4, r1, r2
 80076a8:	d902      	bls.n	80076b0 <memmove+0x10>
 80076aa:	4284      	cmp	r4, r0
 80076ac:	4623      	mov	r3, r4
 80076ae:	d807      	bhi.n	80076c0 <memmove+0x20>
 80076b0:	1e43      	subs	r3, r0, #1
 80076b2:	42a1      	cmp	r1, r4
 80076b4:	d008      	beq.n	80076c8 <memmove+0x28>
 80076b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076be:	e7f8      	b.n	80076b2 <memmove+0x12>
 80076c0:	4601      	mov	r1, r0
 80076c2:	4402      	add	r2, r0
 80076c4:	428a      	cmp	r2, r1
 80076c6:	d100      	bne.n	80076ca <memmove+0x2a>
 80076c8:	bd10      	pop	{r4, pc}
 80076ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076d2:	e7f7      	b.n	80076c4 <memmove+0x24>

080076d4 <strncmp>:
 80076d4:	b510      	push	{r4, lr}
 80076d6:	b16a      	cbz	r2, 80076f4 <strncmp+0x20>
 80076d8:	3901      	subs	r1, #1
 80076da:	1884      	adds	r4, r0, r2
 80076dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076e0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d103      	bne.n	80076f0 <strncmp+0x1c>
 80076e8:	42a0      	cmp	r0, r4
 80076ea:	d001      	beq.n	80076f0 <strncmp+0x1c>
 80076ec:	2a00      	cmp	r2, #0
 80076ee:	d1f5      	bne.n	80076dc <strncmp+0x8>
 80076f0:	1ad0      	subs	r0, r2, r3
 80076f2:	bd10      	pop	{r4, pc}
 80076f4:	4610      	mov	r0, r2
 80076f6:	e7fc      	b.n	80076f2 <strncmp+0x1e>

080076f8 <_sbrk_r>:
 80076f8:	b538      	push	{r3, r4, r5, lr}
 80076fa:	2300      	movs	r3, #0
 80076fc:	4d05      	ldr	r5, [pc, #20]	; (8007714 <_sbrk_r+0x1c>)
 80076fe:	4604      	mov	r4, r0
 8007700:	4608      	mov	r0, r1
 8007702:	602b      	str	r3, [r5, #0]
 8007704:	f7fa fee8 	bl	80024d8 <_sbrk>
 8007708:	1c43      	adds	r3, r0, #1
 800770a:	d102      	bne.n	8007712 <_sbrk_r+0x1a>
 800770c:	682b      	ldr	r3, [r5, #0]
 800770e:	b103      	cbz	r3, 8007712 <_sbrk_r+0x1a>
 8007710:	6023      	str	r3, [r4, #0]
 8007712:	bd38      	pop	{r3, r4, r5, pc}
 8007714:	200003e4 	.word	0x200003e4

08007718 <memcpy>:
 8007718:	440a      	add	r2, r1
 800771a:	4291      	cmp	r1, r2
 800771c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007720:	d100      	bne.n	8007724 <memcpy+0xc>
 8007722:	4770      	bx	lr
 8007724:	b510      	push	{r4, lr}
 8007726:	f811 4b01 	ldrb.w	r4, [r1], #1
 800772a:	4291      	cmp	r1, r2
 800772c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007730:	d1f9      	bne.n	8007726 <memcpy+0xe>
 8007732:	bd10      	pop	{r4, pc}

08007734 <nan>:
 8007734:	2000      	movs	r0, #0
 8007736:	4901      	ldr	r1, [pc, #4]	; (800773c <nan+0x8>)
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	7ff80000 	.word	0x7ff80000

08007740 <__assert_func>:
 8007740:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007742:	4614      	mov	r4, r2
 8007744:	461a      	mov	r2, r3
 8007746:	4b09      	ldr	r3, [pc, #36]	; (800776c <__assert_func+0x2c>)
 8007748:	4605      	mov	r5, r0
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68d8      	ldr	r0, [r3, #12]
 800774e:	b14c      	cbz	r4, 8007764 <__assert_func+0x24>
 8007750:	4b07      	ldr	r3, [pc, #28]	; (8007770 <__assert_func+0x30>)
 8007752:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007756:	9100      	str	r1, [sp, #0]
 8007758:	462b      	mov	r3, r5
 800775a:	4906      	ldr	r1, [pc, #24]	; (8007774 <__assert_func+0x34>)
 800775c:	f000 fbca 	bl	8007ef4 <fiprintf>
 8007760:	f000 fbda 	bl	8007f18 <abort>
 8007764:	4b04      	ldr	r3, [pc, #16]	; (8007778 <__assert_func+0x38>)
 8007766:	461c      	mov	r4, r3
 8007768:	e7f3      	b.n	8007752 <__assert_func+0x12>
 800776a:	bf00      	nop
 800776c:	20000088 	.word	0x20000088
 8007770:	080088e2 	.word	0x080088e2
 8007774:	080088ef 	.word	0x080088ef
 8007778:	0800891d 	.word	0x0800891d

0800777c <_calloc_r>:
 800777c:	b570      	push	{r4, r5, r6, lr}
 800777e:	fba1 5402 	umull	r5, r4, r1, r2
 8007782:	b934      	cbnz	r4, 8007792 <_calloc_r+0x16>
 8007784:	4629      	mov	r1, r5
 8007786:	f7fe f9c3 	bl	8005b10 <_malloc_r>
 800778a:	4606      	mov	r6, r0
 800778c:	b928      	cbnz	r0, 800779a <_calloc_r+0x1e>
 800778e:	4630      	mov	r0, r6
 8007790:	bd70      	pop	{r4, r5, r6, pc}
 8007792:	220c      	movs	r2, #12
 8007794:	2600      	movs	r6, #0
 8007796:	6002      	str	r2, [r0, #0]
 8007798:	e7f9      	b.n	800778e <_calloc_r+0x12>
 800779a:	462a      	mov	r2, r5
 800779c:	4621      	mov	r1, r4
 800779e:	f7fd fa44 	bl	8004c2a <memset>
 80077a2:	e7f4      	b.n	800778e <_calloc_r+0x12>

080077a4 <rshift>:
 80077a4:	6903      	ldr	r3, [r0, #16]
 80077a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80077aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80077ae:	f100 0414 	add.w	r4, r0, #20
 80077b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80077b6:	dd46      	ble.n	8007846 <rshift+0xa2>
 80077b8:	f011 011f 	ands.w	r1, r1, #31
 80077bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80077c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80077c4:	d10c      	bne.n	80077e0 <rshift+0x3c>
 80077c6:	4629      	mov	r1, r5
 80077c8:	f100 0710 	add.w	r7, r0, #16
 80077cc:	42b1      	cmp	r1, r6
 80077ce:	d335      	bcc.n	800783c <rshift+0x98>
 80077d0:	1a9b      	subs	r3, r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	1eea      	subs	r2, r5, #3
 80077d6:	4296      	cmp	r6, r2
 80077d8:	bf38      	it	cc
 80077da:	2300      	movcc	r3, #0
 80077dc:	4423      	add	r3, r4
 80077de:	e015      	b.n	800780c <rshift+0x68>
 80077e0:	46a1      	mov	r9, r4
 80077e2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80077e6:	f1c1 0820 	rsb	r8, r1, #32
 80077ea:	40cf      	lsrs	r7, r1
 80077ec:	f105 0e04 	add.w	lr, r5, #4
 80077f0:	4576      	cmp	r6, lr
 80077f2:	46f4      	mov	ip, lr
 80077f4:	d816      	bhi.n	8007824 <rshift+0x80>
 80077f6:	1a9a      	subs	r2, r3, r2
 80077f8:	0092      	lsls	r2, r2, #2
 80077fa:	3a04      	subs	r2, #4
 80077fc:	3501      	adds	r5, #1
 80077fe:	42ae      	cmp	r6, r5
 8007800:	bf38      	it	cc
 8007802:	2200      	movcc	r2, #0
 8007804:	18a3      	adds	r3, r4, r2
 8007806:	50a7      	str	r7, [r4, r2]
 8007808:	b107      	cbz	r7, 800780c <rshift+0x68>
 800780a:	3304      	adds	r3, #4
 800780c:	42a3      	cmp	r3, r4
 800780e:	eba3 0204 	sub.w	r2, r3, r4
 8007812:	bf08      	it	eq
 8007814:	2300      	moveq	r3, #0
 8007816:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800781a:	6102      	str	r2, [r0, #16]
 800781c:	bf08      	it	eq
 800781e:	6143      	streq	r3, [r0, #20]
 8007820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007824:	f8dc c000 	ldr.w	ip, [ip]
 8007828:	fa0c fc08 	lsl.w	ip, ip, r8
 800782c:	ea4c 0707 	orr.w	r7, ip, r7
 8007830:	f849 7b04 	str.w	r7, [r9], #4
 8007834:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007838:	40cf      	lsrs	r7, r1
 800783a:	e7d9      	b.n	80077f0 <rshift+0x4c>
 800783c:	f851 cb04 	ldr.w	ip, [r1], #4
 8007840:	f847 cf04 	str.w	ip, [r7, #4]!
 8007844:	e7c2      	b.n	80077cc <rshift+0x28>
 8007846:	4623      	mov	r3, r4
 8007848:	e7e0      	b.n	800780c <rshift+0x68>

0800784a <__hexdig_fun>:
 800784a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800784e:	2b09      	cmp	r3, #9
 8007850:	d802      	bhi.n	8007858 <__hexdig_fun+0xe>
 8007852:	3820      	subs	r0, #32
 8007854:	b2c0      	uxtb	r0, r0
 8007856:	4770      	bx	lr
 8007858:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800785c:	2b05      	cmp	r3, #5
 800785e:	d801      	bhi.n	8007864 <__hexdig_fun+0x1a>
 8007860:	3847      	subs	r0, #71	; 0x47
 8007862:	e7f7      	b.n	8007854 <__hexdig_fun+0xa>
 8007864:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007868:	2b05      	cmp	r3, #5
 800786a:	d801      	bhi.n	8007870 <__hexdig_fun+0x26>
 800786c:	3827      	subs	r0, #39	; 0x27
 800786e:	e7f1      	b.n	8007854 <__hexdig_fun+0xa>
 8007870:	2000      	movs	r0, #0
 8007872:	4770      	bx	lr

08007874 <__gethex>:
 8007874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007878:	4681      	mov	r9, r0
 800787a:	468a      	mov	sl, r1
 800787c:	4617      	mov	r7, r2
 800787e:	680a      	ldr	r2, [r1, #0]
 8007880:	b085      	sub	sp, #20
 8007882:	f102 0b02 	add.w	fp, r2, #2
 8007886:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800788a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800788e:	9302      	str	r3, [sp, #8]
 8007890:	32fe      	adds	r2, #254	; 0xfe
 8007892:	eb02 030b 	add.w	r3, r2, fp
 8007896:	46d8      	mov	r8, fp
 8007898:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800789c:	9301      	str	r3, [sp, #4]
 800789e:	2830      	cmp	r0, #48	; 0x30
 80078a0:	d0f7      	beq.n	8007892 <__gethex+0x1e>
 80078a2:	f7ff ffd2 	bl	800784a <__hexdig_fun>
 80078a6:	4604      	mov	r4, r0
 80078a8:	2800      	cmp	r0, #0
 80078aa:	d138      	bne.n	800791e <__gethex+0xaa>
 80078ac:	2201      	movs	r2, #1
 80078ae:	4640      	mov	r0, r8
 80078b0:	49a7      	ldr	r1, [pc, #668]	; (8007b50 <__gethex+0x2dc>)
 80078b2:	f7ff ff0f 	bl	80076d4 <strncmp>
 80078b6:	4606      	mov	r6, r0
 80078b8:	2800      	cmp	r0, #0
 80078ba:	d169      	bne.n	8007990 <__gethex+0x11c>
 80078bc:	f898 0001 	ldrb.w	r0, [r8, #1]
 80078c0:	465d      	mov	r5, fp
 80078c2:	f7ff ffc2 	bl	800784a <__hexdig_fun>
 80078c6:	2800      	cmp	r0, #0
 80078c8:	d064      	beq.n	8007994 <__gethex+0x120>
 80078ca:	465a      	mov	r2, fp
 80078cc:	7810      	ldrb	r0, [r2, #0]
 80078ce:	4690      	mov	r8, r2
 80078d0:	2830      	cmp	r0, #48	; 0x30
 80078d2:	f102 0201 	add.w	r2, r2, #1
 80078d6:	d0f9      	beq.n	80078cc <__gethex+0x58>
 80078d8:	f7ff ffb7 	bl	800784a <__hexdig_fun>
 80078dc:	2301      	movs	r3, #1
 80078de:	fab0 f480 	clz	r4, r0
 80078e2:	465e      	mov	r6, fp
 80078e4:	0964      	lsrs	r4, r4, #5
 80078e6:	9301      	str	r3, [sp, #4]
 80078e8:	4642      	mov	r2, r8
 80078ea:	4615      	mov	r5, r2
 80078ec:	7828      	ldrb	r0, [r5, #0]
 80078ee:	3201      	adds	r2, #1
 80078f0:	f7ff ffab 	bl	800784a <__hexdig_fun>
 80078f4:	2800      	cmp	r0, #0
 80078f6:	d1f8      	bne.n	80078ea <__gethex+0x76>
 80078f8:	2201      	movs	r2, #1
 80078fa:	4628      	mov	r0, r5
 80078fc:	4994      	ldr	r1, [pc, #592]	; (8007b50 <__gethex+0x2dc>)
 80078fe:	f7ff fee9 	bl	80076d4 <strncmp>
 8007902:	b978      	cbnz	r0, 8007924 <__gethex+0xb0>
 8007904:	b946      	cbnz	r6, 8007918 <__gethex+0xa4>
 8007906:	1c6e      	adds	r6, r5, #1
 8007908:	4632      	mov	r2, r6
 800790a:	4615      	mov	r5, r2
 800790c:	7828      	ldrb	r0, [r5, #0]
 800790e:	3201      	adds	r2, #1
 8007910:	f7ff ff9b 	bl	800784a <__hexdig_fun>
 8007914:	2800      	cmp	r0, #0
 8007916:	d1f8      	bne.n	800790a <__gethex+0x96>
 8007918:	1b73      	subs	r3, r6, r5
 800791a:	009e      	lsls	r6, r3, #2
 800791c:	e004      	b.n	8007928 <__gethex+0xb4>
 800791e:	2400      	movs	r4, #0
 8007920:	4626      	mov	r6, r4
 8007922:	e7e1      	b.n	80078e8 <__gethex+0x74>
 8007924:	2e00      	cmp	r6, #0
 8007926:	d1f7      	bne.n	8007918 <__gethex+0xa4>
 8007928:	782b      	ldrb	r3, [r5, #0]
 800792a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800792e:	2b50      	cmp	r3, #80	; 0x50
 8007930:	d13d      	bne.n	80079ae <__gethex+0x13a>
 8007932:	786b      	ldrb	r3, [r5, #1]
 8007934:	2b2b      	cmp	r3, #43	; 0x2b
 8007936:	d02f      	beq.n	8007998 <__gethex+0x124>
 8007938:	2b2d      	cmp	r3, #45	; 0x2d
 800793a:	d031      	beq.n	80079a0 <__gethex+0x12c>
 800793c:	f04f 0b00 	mov.w	fp, #0
 8007940:	1c69      	adds	r1, r5, #1
 8007942:	7808      	ldrb	r0, [r1, #0]
 8007944:	f7ff ff81 	bl	800784a <__hexdig_fun>
 8007948:	1e42      	subs	r2, r0, #1
 800794a:	b2d2      	uxtb	r2, r2
 800794c:	2a18      	cmp	r2, #24
 800794e:	d82e      	bhi.n	80079ae <__gethex+0x13a>
 8007950:	f1a0 0210 	sub.w	r2, r0, #16
 8007954:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007958:	f7ff ff77 	bl	800784a <__hexdig_fun>
 800795c:	f100 3cff 	add.w	ip, r0, #4294967295
 8007960:	fa5f fc8c 	uxtb.w	ip, ip
 8007964:	f1bc 0f18 	cmp.w	ip, #24
 8007968:	d91d      	bls.n	80079a6 <__gethex+0x132>
 800796a:	f1bb 0f00 	cmp.w	fp, #0
 800796e:	d000      	beq.n	8007972 <__gethex+0xfe>
 8007970:	4252      	negs	r2, r2
 8007972:	4416      	add	r6, r2
 8007974:	f8ca 1000 	str.w	r1, [sl]
 8007978:	b1dc      	cbz	r4, 80079b2 <__gethex+0x13e>
 800797a:	9b01      	ldr	r3, [sp, #4]
 800797c:	2b00      	cmp	r3, #0
 800797e:	bf14      	ite	ne
 8007980:	f04f 0800 	movne.w	r8, #0
 8007984:	f04f 0806 	moveq.w	r8, #6
 8007988:	4640      	mov	r0, r8
 800798a:	b005      	add	sp, #20
 800798c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007990:	4645      	mov	r5, r8
 8007992:	4626      	mov	r6, r4
 8007994:	2401      	movs	r4, #1
 8007996:	e7c7      	b.n	8007928 <__gethex+0xb4>
 8007998:	f04f 0b00 	mov.w	fp, #0
 800799c:	1ca9      	adds	r1, r5, #2
 800799e:	e7d0      	b.n	8007942 <__gethex+0xce>
 80079a0:	f04f 0b01 	mov.w	fp, #1
 80079a4:	e7fa      	b.n	800799c <__gethex+0x128>
 80079a6:	230a      	movs	r3, #10
 80079a8:	fb03 0002 	mla	r0, r3, r2, r0
 80079ac:	e7d0      	b.n	8007950 <__gethex+0xdc>
 80079ae:	4629      	mov	r1, r5
 80079b0:	e7e0      	b.n	8007974 <__gethex+0x100>
 80079b2:	4621      	mov	r1, r4
 80079b4:	eba5 0308 	sub.w	r3, r5, r8
 80079b8:	3b01      	subs	r3, #1
 80079ba:	2b07      	cmp	r3, #7
 80079bc:	dc0a      	bgt.n	80079d4 <__gethex+0x160>
 80079be:	4648      	mov	r0, r9
 80079c0:	f7fe f932 	bl	8005c28 <_Balloc>
 80079c4:	4604      	mov	r4, r0
 80079c6:	b940      	cbnz	r0, 80079da <__gethex+0x166>
 80079c8:	4602      	mov	r2, r0
 80079ca:	21e4      	movs	r1, #228	; 0xe4
 80079cc:	4b61      	ldr	r3, [pc, #388]	; (8007b54 <__gethex+0x2e0>)
 80079ce:	4862      	ldr	r0, [pc, #392]	; (8007b58 <__gethex+0x2e4>)
 80079d0:	f7ff feb6 	bl	8007740 <__assert_func>
 80079d4:	3101      	adds	r1, #1
 80079d6:	105b      	asrs	r3, r3, #1
 80079d8:	e7ef      	b.n	80079ba <__gethex+0x146>
 80079da:	2300      	movs	r3, #0
 80079dc:	469b      	mov	fp, r3
 80079de:	f100 0a14 	add.w	sl, r0, #20
 80079e2:	f8cd a004 	str.w	sl, [sp, #4]
 80079e6:	45a8      	cmp	r8, r5
 80079e8:	d344      	bcc.n	8007a74 <__gethex+0x200>
 80079ea:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80079ee:	4658      	mov	r0, fp
 80079f0:	f848 bb04 	str.w	fp, [r8], #4
 80079f4:	eba8 080a 	sub.w	r8, r8, sl
 80079f8:	ea4f 02a8 	mov.w	r2, r8, asr #2
 80079fc:	6122      	str	r2, [r4, #16]
 80079fe:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8007a02:	f7fe fa03 	bl	8005e0c <__hi0bits>
 8007a06:	683d      	ldr	r5, [r7, #0]
 8007a08:	eba8 0800 	sub.w	r8, r8, r0
 8007a0c:	45a8      	cmp	r8, r5
 8007a0e:	dd59      	ble.n	8007ac4 <__gethex+0x250>
 8007a10:	eba8 0805 	sub.w	r8, r8, r5
 8007a14:	4641      	mov	r1, r8
 8007a16:	4620      	mov	r0, r4
 8007a18:	f7fe fd81 	bl	800651e <__any_on>
 8007a1c:	4683      	mov	fp, r0
 8007a1e:	b1b8      	cbz	r0, 8007a50 <__gethex+0x1dc>
 8007a20:	f04f 0b01 	mov.w	fp, #1
 8007a24:	f108 33ff 	add.w	r3, r8, #4294967295
 8007a28:	1159      	asrs	r1, r3, #5
 8007a2a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007a2e:	f003 021f 	and.w	r2, r3, #31
 8007a32:	fa0b f202 	lsl.w	r2, fp, r2
 8007a36:	420a      	tst	r2, r1
 8007a38:	d00a      	beq.n	8007a50 <__gethex+0x1dc>
 8007a3a:	455b      	cmp	r3, fp
 8007a3c:	dd06      	ble.n	8007a4c <__gethex+0x1d8>
 8007a3e:	4620      	mov	r0, r4
 8007a40:	f1a8 0102 	sub.w	r1, r8, #2
 8007a44:	f7fe fd6b 	bl	800651e <__any_on>
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	d138      	bne.n	8007abe <__gethex+0x24a>
 8007a4c:	f04f 0b02 	mov.w	fp, #2
 8007a50:	4641      	mov	r1, r8
 8007a52:	4620      	mov	r0, r4
 8007a54:	f7ff fea6 	bl	80077a4 <rshift>
 8007a58:	4446      	add	r6, r8
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	42b3      	cmp	r3, r6
 8007a5e:	da41      	bge.n	8007ae4 <__gethex+0x270>
 8007a60:	4621      	mov	r1, r4
 8007a62:	4648      	mov	r0, r9
 8007a64:	f7fe f920 	bl	8005ca8 <_Bfree>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a6c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8007a70:	6013      	str	r3, [r2, #0]
 8007a72:	e789      	b.n	8007988 <__gethex+0x114>
 8007a74:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8007a78:	2a2e      	cmp	r2, #46	; 0x2e
 8007a7a:	d014      	beq.n	8007aa6 <__gethex+0x232>
 8007a7c:	2b20      	cmp	r3, #32
 8007a7e:	d106      	bne.n	8007a8e <__gethex+0x21a>
 8007a80:	9b01      	ldr	r3, [sp, #4]
 8007a82:	f843 bb04 	str.w	fp, [r3], #4
 8007a86:	f04f 0b00 	mov.w	fp, #0
 8007a8a:	9301      	str	r3, [sp, #4]
 8007a8c:	465b      	mov	r3, fp
 8007a8e:	7828      	ldrb	r0, [r5, #0]
 8007a90:	9303      	str	r3, [sp, #12]
 8007a92:	f7ff feda 	bl	800784a <__hexdig_fun>
 8007a96:	9b03      	ldr	r3, [sp, #12]
 8007a98:	f000 000f 	and.w	r0, r0, #15
 8007a9c:	4098      	lsls	r0, r3
 8007a9e:	ea4b 0b00 	orr.w	fp, fp, r0
 8007aa2:	3304      	adds	r3, #4
 8007aa4:	e79f      	b.n	80079e6 <__gethex+0x172>
 8007aa6:	45a8      	cmp	r8, r5
 8007aa8:	d8e8      	bhi.n	8007a7c <__gethex+0x208>
 8007aaa:	2201      	movs	r2, #1
 8007aac:	4628      	mov	r0, r5
 8007aae:	4928      	ldr	r1, [pc, #160]	; (8007b50 <__gethex+0x2dc>)
 8007ab0:	9303      	str	r3, [sp, #12]
 8007ab2:	f7ff fe0f 	bl	80076d4 <strncmp>
 8007ab6:	9b03      	ldr	r3, [sp, #12]
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	d1df      	bne.n	8007a7c <__gethex+0x208>
 8007abc:	e793      	b.n	80079e6 <__gethex+0x172>
 8007abe:	f04f 0b03 	mov.w	fp, #3
 8007ac2:	e7c5      	b.n	8007a50 <__gethex+0x1dc>
 8007ac4:	da0b      	bge.n	8007ade <__gethex+0x26a>
 8007ac6:	eba5 0808 	sub.w	r8, r5, r8
 8007aca:	4621      	mov	r1, r4
 8007acc:	4642      	mov	r2, r8
 8007ace:	4648      	mov	r0, r9
 8007ad0:	f7fe fb02 	bl	80060d8 <__lshift>
 8007ad4:	4604      	mov	r4, r0
 8007ad6:	eba6 0608 	sub.w	r6, r6, r8
 8007ada:	f100 0a14 	add.w	sl, r0, #20
 8007ade:	f04f 0b00 	mov.w	fp, #0
 8007ae2:	e7ba      	b.n	8007a5a <__gethex+0x1e6>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	42b3      	cmp	r3, r6
 8007ae8:	dd74      	ble.n	8007bd4 <__gethex+0x360>
 8007aea:	1b9e      	subs	r6, r3, r6
 8007aec:	42b5      	cmp	r5, r6
 8007aee:	dc35      	bgt.n	8007b5c <__gethex+0x2e8>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d023      	beq.n	8007b3e <__gethex+0x2ca>
 8007af6:	2b03      	cmp	r3, #3
 8007af8:	d025      	beq.n	8007b46 <__gethex+0x2d2>
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d115      	bne.n	8007b2a <__gethex+0x2b6>
 8007afe:	42b5      	cmp	r5, r6
 8007b00:	d113      	bne.n	8007b2a <__gethex+0x2b6>
 8007b02:	2d01      	cmp	r5, #1
 8007b04:	d10b      	bne.n	8007b1e <__gethex+0x2aa>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	9a02      	ldr	r2, [sp, #8]
 8007b0a:	f04f 0862 	mov.w	r8, #98	; 0x62
 8007b0e:	6013      	str	r3, [r2, #0]
 8007b10:	2301      	movs	r3, #1
 8007b12:	6123      	str	r3, [r4, #16]
 8007b14:	f8ca 3000 	str.w	r3, [sl]
 8007b18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b1a:	601c      	str	r4, [r3, #0]
 8007b1c:	e734      	b.n	8007988 <__gethex+0x114>
 8007b1e:	4620      	mov	r0, r4
 8007b20:	1e69      	subs	r1, r5, #1
 8007b22:	f7fe fcfc 	bl	800651e <__any_on>
 8007b26:	2800      	cmp	r0, #0
 8007b28:	d1ed      	bne.n	8007b06 <__gethex+0x292>
 8007b2a:	4621      	mov	r1, r4
 8007b2c:	4648      	mov	r0, r9
 8007b2e:	f7fe f8bb 	bl	8005ca8 <_Bfree>
 8007b32:	2300      	movs	r3, #0
 8007b34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b36:	f04f 0850 	mov.w	r8, #80	; 0x50
 8007b3a:	6013      	str	r3, [r2, #0]
 8007b3c:	e724      	b.n	8007988 <__gethex+0x114>
 8007b3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1f2      	bne.n	8007b2a <__gethex+0x2b6>
 8007b44:	e7df      	b.n	8007b06 <__gethex+0x292>
 8007b46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1dc      	bne.n	8007b06 <__gethex+0x292>
 8007b4c:	e7ed      	b.n	8007b2a <__gethex+0x2b6>
 8007b4e:	bf00      	nop
 8007b50:	08008774 	.word	0x08008774
 8007b54:	08008607 	.word	0x08008607
 8007b58:	0800891e 	.word	0x0800891e
 8007b5c:	f106 38ff 	add.w	r8, r6, #4294967295
 8007b60:	f1bb 0f00 	cmp.w	fp, #0
 8007b64:	d133      	bne.n	8007bce <__gethex+0x35a>
 8007b66:	f1b8 0f00 	cmp.w	r8, #0
 8007b6a:	d004      	beq.n	8007b76 <__gethex+0x302>
 8007b6c:	4641      	mov	r1, r8
 8007b6e:	4620      	mov	r0, r4
 8007b70:	f7fe fcd5 	bl	800651e <__any_on>
 8007b74:	4683      	mov	fp, r0
 8007b76:	2301      	movs	r3, #1
 8007b78:	ea4f 1268 	mov.w	r2, r8, asr #5
 8007b7c:	f008 081f 	and.w	r8, r8, #31
 8007b80:	fa03 f308 	lsl.w	r3, r3, r8
 8007b84:	f04f 0802 	mov.w	r8, #2
 8007b88:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007b8c:	4631      	mov	r1, r6
 8007b8e:	4213      	tst	r3, r2
 8007b90:	4620      	mov	r0, r4
 8007b92:	bf18      	it	ne
 8007b94:	f04b 0b02 	orrne.w	fp, fp, #2
 8007b98:	1bad      	subs	r5, r5, r6
 8007b9a:	f7ff fe03 	bl	80077a4 <rshift>
 8007b9e:	687e      	ldr	r6, [r7, #4]
 8007ba0:	f1bb 0f00 	cmp.w	fp, #0
 8007ba4:	d04a      	beq.n	8007c3c <__gethex+0x3c8>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	d016      	beq.n	8007bda <__gethex+0x366>
 8007bac:	2b03      	cmp	r3, #3
 8007bae:	d018      	beq.n	8007be2 <__gethex+0x36e>
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d109      	bne.n	8007bc8 <__gethex+0x354>
 8007bb4:	f01b 0f02 	tst.w	fp, #2
 8007bb8:	d006      	beq.n	8007bc8 <__gethex+0x354>
 8007bba:	f8da 3000 	ldr.w	r3, [sl]
 8007bbe:	ea4b 0b03 	orr.w	fp, fp, r3
 8007bc2:	f01b 0f01 	tst.w	fp, #1
 8007bc6:	d10f      	bne.n	8007be8 <__gethex+0x374>
 8007bc8:	f048 0810 	orr.w	r8, r8, #16
 8007bcc:	e036      	b.n	8007c3c <__gethex+0x3c8>
 8007bce:	f04f 0b01 	mov.w	fp, #1
 8007bd2:	e7d0      	b.n	8007b76 <__gethex+0x302>
 8007bd4:	f04f 0801 	mov.w	r8, #1
 8007bd8:	e7e2      	b.n	8007ba0 <__gethex+0x32c>
 8007bda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007bdc:	f1c3 0301 	rsb	r3, r3, #1
 8007be0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007be2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d0ef      	beq.n	8007bc8 <__gethex+0x354>
 8007be8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007bec:	f104 0214 	add.w	r2, r4, #20
 8007bf0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8007bf4:	9301      	str	r3, [sp, #4]
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8007bfc:	4694      	mov	ip, r2
 8007bfe:	f852 1b04 	ldr.w	r1, [r2], #4
 8007c02:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007c06:	d01e      	beq.n	8007c46 <__gethex+0x3d2>
 8007c08:	3101      	adds	r1, #1
 8007c0a:	f8cc 1000 	str.w	r1, [ip]
 8007c0e:	f1b8 0f02 	cmp.w	r8, #2
 8007c12:	f104 0214 	add.w	r2, r4, #20
 8007c16:	d13d      	bne.n	8007c94 <__gethex+0x420>
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	42ab      	cmp	r3, r5
 8007c1e:	d10b      	bne.n	8007c38 <__gethex+0x3c4>
 8007c20:	2301      	movs	r3, #1
 8007c22:	1169      	asrs	r1, r5, #5
 8007c24:	f005 051f 	and.w	r5, r5, #31
 8007c28:	fa03 f505 	lsl.w	r5, r3, r5
 8007c2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c30:	421d      	tst	r5, r3
 8007c32:	bf18      	it	ne
 8007c34:	f04f 0801 	movne.w	r8, #1
 8007c38:	f048 0820 	orr.w	r8, r8, #32
 8007c3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c3e:	601c      	str	r4, [r3, #0]
 8007c40:	9b02      	ldr	r3, [sp, #8]
 8007c42:	601e      	str	r6, [r3, #0]
 8007c44:	e6a0      	b.n	8007988 <__gethex+0x114>
 8007c46:	4290      	cmp	r0, r2
 8007c48:	f842 3c04 	str.w	r3, [r2, #-4]
 8007c4c:	d8d6      	bhi.n	8007bfc <__gethex+0x388>
 8007c4e:	68a2      	ldr	r2, [r4, #8]
 8007c50:	4593      	cmp	fp, r2
 8007c52:	db17      	blt.n	8007c84 <__gethex+0x410>
 8007c54:	6861      	ldr	r1, [r4, #4]
 8007c56:	4648      	mov	r0, r9
 8007c58:	3101      	adds	r1, #1
 8007c5a:	f7fd ffe5 	bl	8005c28 <_Balloc>
 8007c5e:	4682      	mov	sl, r0
 8007c60:	b918      	cbnz	r0, 8007c6a <__gethex+0x3f6>
 8007c62:	4602      	mov	r2, r0
 8007c64:	2184      	movs	r1, #132	; 0x84
 8007c66:	4b1a      	ldr	r3, [pc, #104]	; (8007cd0 <__gethex+0x45c>)
 8007c68:	e6b1      	b.n	80079ce <__gethex+0x15a>
 8007c6a:	6922      	ldr	r2, [r4, #16]
 8007c6c:	f104 010c 	add.w	r1, r4, #12
 8007c70:	3202      	adds	r2, #2
 8007c72:	0092      	lsls	r2, r2, #2
 8007c74:	300c      	adds	r0, #12
 8007c76:	f7ff fd4f 	bl	8007718 <memcpy>
 8007c7a:	4621      	mov	r1, r4
 8007c7c:	4648      	mov	r0, r9
 8007c7e:	f7fe f813 	bl	8005ca8 <_Bfree>
 8007c82:	4654      	mov	r4, sl
 8007c84:	6922      	ldr	r2, [r4, #16]
 8007c86:	1c51      	adds	r1, r2, #1
 8007c88:	6121      	str	r1, [r4, #16]
 8007c8a:	2101      	movs	r1, #1
 8007c8c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007c90:	6151      	str	r1, [r2, #20]
 8007c92:	e7bc      	b.n	8007c0e <__gethex+0x39a>
 8007c94:	6921      	ldr	r1, [r4, #16]
 8007c96:	4559      	cmp	r1, fp
 8007c98:	dd0b      	ble.n	8007cb2 <__gethex+0x43e>
 8007c9a:	2101      	movs	r1, #1
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	f7ff fd81 	bl	80077a4 <rshift>
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	3601      	adds	r6, #1
 8007ca6:	42b3      	cmp	r3, r6
 8007ca8:	f6ff aeda 	blt.w	8007a60 <__gethex+0x1ec>
 8007cac:	f04f 0801 	mov.w	r8, #1
 8007cb0:	e7c2      	b.n	8007c38 <__gethex+0x3c4>
 8007cb2:	f015 051f 	ands.w	r5, r5, #31
 8007cb6:	d0f9      	beq.n	8007cac <__gethex+0x438>
 8007cb8:	9b01      	ldr	r3, [sp, #4]
 8007cba:	f1c5 0520 	rsb	r5, r5, #32
 8007cbe:	441a      	add	r2, r3
 8007cc0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8007cc4:	f7fe f8a2 	bl	8005e0c <__hi0bits>
 8007cc8:	42a8      	cmp	r0, r5
 8007cca:	dbe6      	blt.n	8007c9a <__gethex+0x426>
 8007ccc:	e7ee      	b.n	8007cac <__gethex+0x438>
 8007cce:	bf00      	nop
 8007cd0:	08008607 	.word	0x08008607

08007cd4 <L_shift>:
 8007cd4:	f1c2 0208 	rsb	r2, r2, #8
 8007cd8:	0092      	lsls	r2, r2, #2
 8007cda:	b570      	push	{r4, r5, r6, lr}
 8007cdc:	f1c2 0620 	rsb	r6, r2, #32
 8007ce0:	6843      	ldr	r3, [r0, #4]
 8007ce2:	6804      	ldr	r4, [r0, #0]
 8007ce4:	fa03 f506 	lsl.w	r5, r3, r6
 8007ce8:	432c      	orrs	r4, r5
 8007cea:	40d3      	lsrs	r3, r2
 8007cec:	6004      	str	r4, [r0, #0]
 8007cee:	f840 3f04 	str.w	r3, [r0, #4]!
 8007cf2:	4288      	cmp	r0, r1
 8007cf4:	d3f4      	bcc.n	8007ce0 <L_shift+0xc>
 8007cf6:	bd70      	pop	{r4, r5, r6, pc}

08007cf8 <__match>:
 8007cf8:	b530      	push	{r4, r5, lr}
 8007cfa:	6803      	ldr	r3, [r0, #0]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d02:	b914      	cbnz	r4, 8007d0a <__match+0x12>
 8007d04:	6003      	str	r3, [r0, #0]
 8007d06:	2001      	movs	r0, #1
 8007d08:	bd30      	pop	{r4, r5, pc}
 8007d0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d0e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007d12:	2d19      	cmp	r5, #25
 8007d14:	bf98      	it	ls
 8007d16:	3220      	addls	r2, #32
 8007d18:	42a2      	cmp	r2, r4
 8007d1a:	d0f0      	beq.n	8007cfe <__match+0x6>
 8007d1c:	2000      	movs	r0, #0
 8007d1e:	e7f3      	b.n	8007d08 <__match+0x10>

08007d20 <__hexnan>:
 8007d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d24:	2500      	movs	r5, #0
 8007d26:	680b      	ldr	r3, [r1, #0]
 8007d28:	4682      	mov	sl, r0
 8007d2a:	115e      	asrs	r6, r3, #5
 8007d2c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007d30:	f013 031f 	ands.w	r3, r3, #31
 8007d34:	bf18      	it	ne
 8007d36:	3604      	addne	r6, #4
 8007d38:	1f37      	subs	r7, r6, #4
 8007d3a:	4690      	mov	r8, r2
 8007d3c:	46b9      	mov	r9, r7
 8007d3e:	463c      	mov	r4, r7
 8007d40:	46ab      	mov	fp, r5
 8007d42:	b087      	sub	sp, #28
 8007d44:	6801      	ldr	r1, [r0, #0]
 8007d46:	9301      	str	r3, [sp, #4]
 8007d48:	f846 5c04 	str.w	r5, [r6, #-4]
 8007d4c:	9502      	str	r5, [sp, #8]
 8007d4e:	784a      	ldrb	r2, [r1, #1]
 8007d50:	1c4b      	adds	r3, r1, #1
 8007d52:	9303      	str	r3, [sp, #12]
 8007d54:	b342      	cbz	r2, 8007da8 <__hexnan+0x88>
 8007d56:	4610      	mov	r0, r2
 8007d58:	9105      	str	r1, [sp, #20]
 8007d5a:	9204      	str	r2, [sp, #16]
 8007d5c:	f7ff fd75 	bl	800784a <__hexdig_fun>
 8007d60:	2800      	cmp	r0, #0
 8007d62:	d14f      	bne.n	8007e04 <__hexnan+0xe4>
 8007d64:	9a04      	ldr	r2, [sp, #16]
 8007d66:	9905      	ldr	r1, [sp, #20]
 8007d68:	2a20      	cmp	r2, #32
 8007d6a:	d818      	bhi.n	8007d9e <__hexnan+0x7e>
 8007d6c:	9b02      	ldr	r3, [sp, #8]
 8007d6e:	459b      	cmp	fp, r3
 8007d70:	dd13      	ble.n	8007d9a <__hexnan+0x7a>
 8007d72:	454c      	cmp	r4, r9
 8007d74:	d206      	bcs.n	8007d84 <__hexnan+0x64>
 8007d76:	2d07      	cmp	r5, #7
 8007d78:	dc04      	bgt.n	8007d84 <__hexnan+0x64>
 8007d7a:	462a      	mov	r2, r5
 8007d7c:	4649      	mov	r1, r9
 8007d7e:	4620      	mov	r0, r4
 8007d80:	f7ff ffa8 	bl	8007cd4 <L_shift>
 8007d84:	4544      	cmp	r4, r8
 8007d86:	d950      	bls.n	8007e2a <__hexnan+0x10a>
 8007d88:	2300      	movs	r3, #0
 8007d8a:	f1a4 0904 	sub.w	r9, r4, #4
 8007d8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007d92:	461d      	mov	r5, r3
 8007d94:	464c      	mov	r4, r9
 8007d96:	f8cd b008 	str.w	fp, [sp, #8]
 8007d9a:	9903      	ldr	r1, [sp, #12]
 8007d9c:	e7d7      	b.n	8007d4e <__hexnan+0x2e>
 8007d9e:	2a29      	cmp	r2, #41	; 0x29
 8007da0:	d155      	bne.n	8007e4e <__hexnan+0x12e>
 8007da2:	3102      	adds	r1, #2
 8007da4:	f8ca 1000 	str.w	r1, [sl]
 8007da8:	f1bb 0f00 	cmp.w	fp, #0
 8007dac:	d04f      	beq.n	8007e4e <__hexnan+0x12e>
 8007dae:	454c      	cmp	r4, r9
 8007db0:	d206      	bcs.n	8007dc0 <__hexnan+0xa0>
 8007db2:	2d07      	cmp	r5, #7
 8007db4:	dc04      	bgt.n	8007dc0 <__hexnan+0xa0>
 8007db6:	462a      	mov	r2, r5
 8007db8:	4649      	mov	r1, r9
 8007dba:	4620      	mov	r0, r4
 8007dbc:	f7ff ff8a 	bl	8007cd4 <L_shift>
 8007dc0:	4544      	cmp	r4, r8
 8007dc2:	d934      	bls.n	8007e2e <__hexnan+0x10e>
 8007dc4:	4623      	mov	r3, r4
 8007dc6:	f1a8 0204 	sub.w	r2, r8, #4
 8007dca:	f853 1b04 	ldr.w	r1, [r3], #4
 8007dce:	429f      	cmp	r7, r3
 8007dd0:	f842 1f04 	str.w	r1, [r2, #4]!
 8007dd4:	d2f9      	bcs.n	8007dca <__hexnan+0xaa>
 8007dd6:	1b3b      	subs	r3, r7, r4
 8007dd8:	f023 0303 	bic.w	r3, r3, #3
 8007ddc:	3304      	adds	r3, #4
 8007dde:	3e03      	subs	r6, #3
 8007de0:	3401      	adds	r4, #1
 8007de2:	42a6      	cmp	r6, r4
 8007de4:	bf38      	it	cc
 8007de6:	2304      	movcc	r3, #4
 8007de8:	2200      	movs	r2, #0
 8007dea:	4443      	add	r3, r8
 8007dec:	f843 2b04 	str.w	r2, [r3], #4
 8007df0:	429f      	cmp	r7, r3
 8007df2:	d2fb      	bcs.n	8007dec <__hexnan+0xcc>
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	b91b      	cbnz	r3, 8007e00 <__hexnan+0xe0>
 8007df8:	4547      	cmp	r7, r8
 8007dfa:	d126      	bne.n	8007e4a <__hexnan+0x12a>
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	603b      	str	r3, [r7, #0]
 8007e00:	2005      	movs	r0, #5
 8007e02:	e025      	b.n	8007e50 <__hexnan+0x130>
 8007e04:	3501      	adds	r5, #1
 8007e06:	2d08      	cmp	r5, #8
 8007e08:	f10b 0b01 	add.w	fp, fp, #1
 8007e0c:	dd06      	ble.n	8007e1c <__hexnan+0xfc>
 8007e0e:	4544      	cmp	r4, r8
 8007e10:	d9c3      	bls.n	8007d9a <__hexnan+0x7a>
 8007e12:	2300      	movs	r3, #0
 8007e14:	2501      	movs	r5, #1
 8007e16:	f844 3c04 	str.w	r3, [r4, #-4]
 8007e1a:	3c04      	subs	r4, #4
 8007e1c:	6822      	ldr	r2, [r4, #0]
 8007e1e:	f000 000f 	and.w	r0, r0, #15
 8007e22:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007e26:	6020      	str	r0, [r4, #0]
 8007e28:	e7b7      	b.n	8007d9a <__hexnan+0x7a>
 8007e2a:	2508      	movs	r5, #8
 8007e2c:	e7b5      	b.n	8007d9a <__hexnan+0x7a>
 8007e2e:	9b01      	ldr	r3, [sp, #4]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d0df      	beq.n	8007df4 <__hexnan+0xd4>
 8007e34:	f04f 32ff 	mov.w	r2, #4294967295
 8007e38:	f1c3 0320 	rsb	r3, r3, #32
 8007e3c:	40da      	lsrs	r2, r3
 8007e3e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007e42:	4013      	ands	r3, r2
 8007e44:	f846 3c04 	str.w	r3, [r6, #-4]
 8007e48:	e7d4      	b.n	8007df4 <__hexnan+0xd4>
 8007e4a:	3f04      	subs	r7, #4
 8007e4c:	e7d2      	b.n	8007df4 <__hexnan+0xd4>
 8007e4e:	2004      	movs	r0, #4
 8007e50:	b007      	add	sp, #28
 8007e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007e56 <__ascii_mbtowc>:
 8007e56:	b082      	sub	sp, #8
 8007e58:	b901      	cbnz	r1, 8007e5c <__ascii_mbtowc+0x6>
 8007e5a:	a901      	add	r1, sp, #4
 8007e5c:	b142      	cbz	r2, 8007e70 <__ascii_mbtowc+0x1a>
 8007e5e:	b14b      	cbz	r3, 8007e74 <__ascii_mbtowc+0x1e>
 8007e60:	7813      	ldrb	r3, [r2, #0]
 8007e62:	600b      	str	r3, [r1, #0]
 8007e64:	7812      	ldrb	r2, [r2, #0]
 8007e66:	1e10      	subs	r0, r2, #0
 8007e68:	bf18      	it	ne
 8007e6a:	2001      	movne	r0, #1
 8007e6c:	b002      	add	sp, #8
 8007e6e:	4770      	bx	lr
 8007e70:	4610      	mov	r0, r2
 8007e72:	e7fb      	b.n	8007e6c <__ascii_mbtowc+0x16>
 8007e74:	f06f 0001 	mvn.w	r0, #1
 8007e78:	e7f8      	b.n	8007e6c <__ascii_mbtowc+0x16>

08007e7a <_realloc_r>:
 8007e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e7e:	4680      	mov	r8, r0
 8007e80:	4614      	mov	r4, r2
 8007e82:	460e      	mov	r6, r1
 8007e84:	b921      	cbnz	r1, 8007e90 <_realloc_r+0x16>
 8007e86:	4611      	mov	r1, r2
 8007e88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e8c:	f7fd be40 	b.w	8005b10 <_malloc_r>
 8007e90:	b92a      	cbnz	r2, 8007e9e <_realloc_r+0x24>
 8007e92:	f7fd fdcd 	bl	8005a30 <_free_r>
 8007e96:	4625      	mov	r5, r4
 8007e98:	4628      	mov	r0, r5
 8007e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e9e:	f000 f842 	bl	8007f26 <_malloc_usable_size_r>
 8007ea2:	4284      	cmp	r4, r0
 8007ea4:	4607      	mov	r7, r0
 8007ea6:	d802      	bhi.n	8007eae <_realloc_r+0x34>
 8007ea8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007eac:	d812      	bhi.n	8007ed4 <_realloc_r+0x5a>
 8007eae:	4621      	mov	r1, r4
 8007eb0:	4640      	mov	r0, r8
 8007eb2:	f7fd fe2d 	bl	8005b10 <_malloc_r>
 8007eb6:	4605      	mov	r5, r0
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	d0ed      	beq.n	8007e98 <_realloc_r+0x1e>
 8007ebc:	42bc      	cmp	r4, r7
 8007ebe:	4622      	mov	r2, r4
 8007ec0:	4631      	mov	r1, r6
 8007ec2:	bf28      	it	cs
 8007ec4:	463a      	movcs	r2, r7
 8007ec6:	f7ff fc27 	bl	8007718 <memcpy>
 8007eca:	4631      	mov	r1, r6
 8007ecc:	4640      	mov	r0, r8
 8007ece:	f7fd fdaf 	bl	8005a30 <_free_r>
 8007ed2:	e7e1      	b.n	8007e98 <_realloc_r+0x1e>
 8007ed4:	4635      	mov	r5, r6
 8007ed6:	e7df      	b.n	8007e98 <_realloc_r+0x1e>

08007ed8 <__ascii_wctomb>:
 8007ed8:	4603      	mov	r3, r0
 8007eda:	4608      	mov	r0, r1
 8007edc:	b141      	cbz	r1, 8007ef0 <__ascii_wctomb+0x18>
 8007ede:	2aff      	cmp	r2, #255	; 0xff
 8007ee0:	d904      	bls.n	8007eec <__ascii_wctomb+0x14>
 8007ee2:	228a      	movs	r2, #138	; 0x8a
 8007ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee8:	601a      	str	r2, [r3, #0]
 8007eea:	4770      	bx	lr
 8007eec:	2001      	movs	r0, #1
 8007eee:	700a      	strb	r2, [r1, #0]
 8007ef0:	4770      	bx	lr
	...

08007ef4 <fiprintf>:
 8007ef4:	b40e      	push	{r1, r2, r3}
 8007ef6:	b503      	push	{r0, r1, lr}
 8007ef8:	4601      	mov	r1, r0
 8007efa:	ab03      	add	r3, sp, #12
 8007efc:	4805      	ldr	r0, [pc, #20]	; (8007f14 <fiprintf+0x20>)
 8007efe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f02:	6800      	ldr	r0, [r0, #0]
 8007f04:	9301      	str	r3, [sp, #4]
 8007f06:	f000 f83d 	bl	8007f84 <_vfiprintf_r>
 8007f0a:	b002      	add	sp, #8
 8007f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f10:	b003      	add	sp, #12
 8007f12:	4770      	bx	lr
 8007f14:	20000088 	.word	0x20000088

08007f18 <abort>:
 8007f18:	2006      	movs	r0, #6
 8007f1a:	b508      	push	{r3, lr}
 8007f1c:	f000 fa0a 	bl	8008334 <raise>
 8007f20:	2001      	movs	r0, #1
 8007f22:	f7fa fa65 	bl	80023f0 <_exit>

08007f26 <_malloc_usable_size_r>:
 8007f26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f2a:	1f18      	subs	r0, r3, #4
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	bfbc      	itt	lt
 8007f30:	580b      	ldrlt	r3, [r1, r0]
 8007f32:	18c0      	addlt	r0, r0, r3
 8007f34:	4770      	bx	lr

08007f36 <__sfputc_r>:
 8007f36:	6893      	ldr	r3, [r2, #8]
 8007f38:	b410      	push	{r4}
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	6093      	str	r3, [r2, #8]
 8007f40:	da07      	bge.n	8007f52 <__sfputc_r+0x1c>
 8007f42:	6994      	ldr	r4, [r2, #24]
 8007f44:	42a3      	cmp	r3, r4
 8007f46:	db01      	blt.n	8007f4c <__sfputc_r+0x16>
 8007f48:	290a      	cmp	r1, #10
 8007f4a:	d102      	bne.n	8007f52 <__sfputc_r+0x1c>
 8007f4c:	bc10      	pop	{r4}
 8007f4e:	f000 b933 	b.w	80081b8 <__swbuf_r>
 8007f52:	6813      	ldr	r3, [r2, #0]
 8007f54:	1c58      	adds	r0, r3, #1
 8007f56:	6010      	str	r0, [r2, #0]
 8007f58:	7019      	strb	r1, [r3, #0]
 8007f5a:	4608      	mov	r0, r1
 8007f5c:	bc10      	pop	{r4}
 8007f5e:	4770      	bx	lr

08007f60 <__sfputs_r>:
 8007f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f62:	4606      	mov	r6, r0
 8007f64:	460f      	mov	r7, r1
 8007f66:	4614      	mov	r4, r2
 8007f68:	18d5      	adds	r5, r2, r3
 8007f6a:	42ac      	cmp	r4, r5
 8007f6c:	d101      	bne.n	8007f72 <__sfputs_r+0x12>
 8007f6e:	2000      	movs	r0, #0
 8007f70:	e007      	b.n	8007f82 <__sfputs_r+0x22>
 8007f72:	463a      	mov	r2, r7
 8007f74:	4630      	mov	r0, r6
 8007f76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f7a:	f7ff ffdc 	bl	8007f36 <__sfputc_r>
 8007f7e:	1c43      	adds	r3, r0, #1
 8007f80:	d1f3      	bne.n	8007f6a <__sfputs_r+0xa>
 8007f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f84 <_vfiprintf_r>:
 8007f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f88:	460d      	mov	r5, r1
 8007f8a:	4614      	mov	r4, r2
 8007f8c:	4698      	mov	r8, r3
 8007f8e:	4606      	mov	r6, r0
 8007f90:	b09d      	sub	sp, #116	; 0x74
 8007f92:	b118      	cbz	r0, 8007f9c <_vfiprintf_r+0x18>
 8007f94:	6a03      	ldr	r3, [r0, #32]
 8007f96:	b90b      	cbnz	r3, 8007f9c <_vfiprintf_r+0x18>
 8007f98:	f7fc fdae 	bl	8004af8 <__sinit>
 8007f9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f9e:	07d9      	lsls	r1, r3, #31
 8007fa0:	d405      	bmi.n	8007fae <_vfiprintf_r+0x2a>
 8007fa2:	89ab      	ldrh	r3, [r5, #12]
 8007fa4:	059a      	lsls	r2, r3, #22
 8007fa6:	d402      	bmi.n	8007fae <_vfiprintf_r+0x2a>
 8007fa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007faa:	f7fc febc 	bl	8004d26 <__retarget_lock_acquire_recursive>
 8007fae:	89ab      	ldrh	r3, [r5, #12]
 8007fb0:	071b      	lsls	r3, r3, #28
 8007fb2:	d501      	bpl.n	8007fb8 <_vfiprintf_r+0x34>
 8007fb4:	692b      	ldr	r3, [r5, #16]
 8007fb6:	b99b      	cbnz	r3, 8007fe0 <_vfiprintf_r+0x5c>
 8007fb8:	4629      	mov	r1, r5
 8007fba:	4630      	mov	r0, r6
 8007fbc:	f000 f93a 	bl	8008234 <__swsetup_r>
 8007fc0:	b170      	cbz	r0, 8007fe0 <_vfiprintf_r+0x5c>
 8007fc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fc4:	07dc      	lsls	r4, r3, #31
 8007fc6:	d504      	bpl.n	8007fd2 <_vfiprintf_r+0x4e>
 8007fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fcc:	b01d      	add	sp, #116	; 0x74
 8007fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fd2:	89ab      	ldrh	r3, [r5, #12]
 8007fd4:	0598      	lsls	r0, r3, #22
 8007fd6:	d4f7      	bmi.n	8007fc8 <_vfiprintf_r+0x44>
 8007fd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fda:	f7fc fea5 	bl	8004d28 <__retarget_lock_release_recursive>
 8007fde:	e7f3      	b.n	8007fc8 <_vfiprintf_r+0x44>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8007fe4:	2320      	movs	r3, #32
 8007fe6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fea:	2330      	movs	r3, #48	; 0x30
 8007fec:	f04f 0901 	mov.w	r9, #1
 8007ff0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ff4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80081a4 <_vfiprintf_r+0x220>
 8007ff8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ffc:	4623      	mov	r3, r4
 8007ffe:	469a      	mov	sl, r3
 8008000:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008004:	b10a      	cbz	r2, 800800a <_vfiprintf_r+0x86>
 8008006:	2a25      	cmp	r2, #37	; 0x25
 8008008:	d1f9      	bne.n	8007ffe <_vfiprintf_r+0x7a>
 800800a:	ebba 0b04 	subs.w	fp, sl, r4
 800800e:	d00b      	beq.n	8008028 <_vfiprintf_r+0xa4>
 8008010:	465b      	mov	r3, fp
 8008012:	4622      	mov	r2, r4
 8008014:	4629      	mov	r1, r5
 8008016:	4630      	mov	r0, r6
 8008018:	f7ff ffa2 	bl	8007f60 <__sfputs_r>
 800801c:	3001      	adds	r0, #1
 800801e:	f000 80a9 	beq.w	8008174 <_vfiprintf_r+0x1f0>
 8008022:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008024:	445a      	add	r2, fp
 8008026:	9209      	str	r2, [sp, #36]	; 0x24
 8008028:	f89a 3000 	ldrb.w	r3, [sl]
 800802c:	2b00      	cmp	r3, #0
 800802e:	f000 80a1 	beq.w	8008174 <_vfiprintf_r+0x1f0>
 8008032:	2300      	movs	r3, #0
 8008034:	f04f 32ff 	mov.w	r2, #4294967295
 8008038:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800803c:	f10a 0a01 	add.w	sl, sl, #1
 8008040:	9304      	str	r3, [sp, #16]
 8008042:	9307      	str	r3, [sp, #28]
 8008044:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008048:	931a      	str	r3, [sp, #104]	; 0x68
 800804a:	4654      	mov	r4, sl
 800804c:	2205      	movs	r2, #5
 800804e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008052:	4854      	ldr	r0, [pc, #336]	; (80081a4 <_vfiprintf_r+0x220>)
 8008054:	f7fc fe69 	bl	8004d2a <memchr>
 8008058:	9a04      	ldr	r2, [sp, #16]
 800805a:	b9d8      	cbnz	r0, 8008094 <_vfiprintf_r+0x110>
 800805c:	06d1      	lsls	r1, r2, #27
 800805e:	bf44      	itt	mi
 8008060:	2320      	movmi	r3, #32
 8008062:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008066:	0713      	lsls	r3, r2, #28
 8008068:	bf44      	itt	mi
 800806a:	232b      	movmi	r3, #43	; 0x2b
 800806c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008070:	f89a 3000 	ldrb.w	r3, [sl]
 8008074:	2b2a      	cmp	r3, #42	; 0x2a
 8008076:	d015      	beq.n	80080a4 <_vfiprintf_r+0x120>
 8008078:	4654      	mov	r4, sl
 800807a:	2000      	movs	r0, #0
 800807c:	f04f 0c0a 	mov.w	ip, #10
 8008080:	9a07      	ldr	r2, [sp, #28]
 8008082:	4621      	mov	r1, r4
 8008084:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008088:	3b30      	subs	r3, #48	; 0x30
 800808a:	2b09      	cmp	r3, #9
 800808c:	d94d      	bls.n	800812a <_vfiprintf_r+0x1a6>
 800808e:	b1b0      	cbz	r0, 80080be <_vfiprintf_r+0x13a>
 8008090:	9207      	str	r2, [sp, #28]
 8008092:	e014      	b.n	80080be <_vfiprintf_r+0x13a>
 8008094:	eba0 0308 	sub.w	r3, r0, r8
 8008098:	fa09 f303 	lsl.w	r3, r9, r3
 800809c:	4313      	orrs	r3, r2
 800809e:	46a2      	mov	sl, r4
 80080a0:	9304      	str	r3, [sp, #16]
 80080a2:	e7d2      	b.n	800804a <_vfiprintf_r+0xc6>
 80080a4:	9b03      	ldr	r3, [sp, #12]
 80080a6:	1d19      	adds	r1, r3, #4
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	9103      	str	r1, [sp, #12]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	bfbb      	ittet	lt
 80080b0:	425b      	neglt	r3, r3
 80080b2:	f042 0202 	orrlt.w	r2, r2, #2
 80080b6:	9307      	strge	r3, [sp, #28]
 80080b8:	9307      	strlt	r3, [sp, #28]
 80080ba:	bfb8      	it	lt
 80080bc:	9204      	strlt	r2, [sp, #16]
 80080be:	7823      	ldrb	r3, [r4, #0]
 80080c0:	2b2e      	cmp	r3, #46	; 0x2e
 80080c2:	d10c      	bne.n	80080de <_vfiprintf_r+0x15a>
 80080c4:	7863      	ldrb	r3, [r4, #1]
 80080c6:	2b2a      	cmp	r3, #42	; 0x2a
 80080c8:	d134      	bne.n	8008134 <_vfiprintf_r+0x1b0>
 80080ca:	9b03      	ldr	r3, [sp, #12]
 80080cc:	3402      	adds	r4, #2
 80080ce:	1d1a      	adds	r2, r3, #4
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	9203      	str	r2, [sp, #12]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	bfb8      	it	lt
 80080d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80080dc:	9305      	str	r3, [sp, #20]
 80080de:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80081a8 <_vfiprintf_r+0x224>
 80080e2:	2203      	movs	r2, #3
 80080e4:	4650      	mov	r0, sl
 80080e6:	7821      	ldrb	r1, [r4, #0]
 80080e8:	f7fc fe1f 	bl	8004d2a <memchr>
 80080ec:	b138      	cbz	r0, 80080fe <_vfiprintf_r+0x17a>
 80080ee:	2240      	movs	r2, #64	; 0x40
 80080f0:	9b04      	ldr	r3, [sp, #16]
 80080f2:	eba0 000a 	sub.w	r0, r0, sl
 80080f6:	4082      	lsls	r2, r0
 80080f8:	4313      	orrs	r3, r2
 80080fa:	3401      	adds	r4, #1
 80080fc:	9304      	str	r3, [sp, #16]
 80080fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008102:	2206      	movs	r2, #6
 8008104:	4829      	ldr	r0, [pc, #164]	; (80081ac <_vfiprintf_r+0x228>)
 8008106:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800810a:	f7fc fe0e 	bl	8004d2a <memchr>
 800810e:	2800      	cmp	r0, #0
 8008110:	d03f      	beq.n	8008192 <_vfiprintf_r+0x20e>
 8008112:	4b27      	ldr	r3, [pc, #156]	; (80081b0 <_vfiprintf_r+0x22c>)
 8008114:	bb1b      	cbnz	r3, 800815e <_vfiprintf_r+0x1da>
 8008116:	9b03      	ldr	r3, [sp, #12]
 8008118:	3307      	adds	r3, #7
 800811a:	f023 0307 	bic.w	r3, r3, #7
 800811e:	3308      	adds	r3, #8
 8008120:	9303      	str	r3, [sp, #12]
 8008122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008124:	443b      	add	r3, r7
 8008126:	9309      	str	r3, [sp, #36]	; 0x24
 8008128:	e768      	b.n	8007ffc <_vfiprintf_r+0x78>
 800812a:	460c      	mov	r4, r1
 800812c:	2001      	movs	r0, #1
 800812e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008132:	e7a6      	b.n	8008082 <_vfiprintf_r+0xfe>
 8008134:	2300      	movs	r3, #0
 8008136:	f04f 0c0a 	mov.w	ip, #10
 800813a:	4619      	mov	r1, r3
 800813c:	3401      	adds	r4, #1
 800813e:	9305      	str	r3, [sp, #20]
 8008140:	4620      	mov	r0, r4
 8008142:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008146:	3a30      	subs	r2, #48	; 0x30
 8008148:	2a09      	cmp	r2, #9
 800814a:	d903      	bls.n	8008154 <_vfiprintf_r+0x1d0>
 800814c:	2b00      	cmp	r3, #0
 800814e:	d0c6      	beq.n	80080de <_vfiprintf_r+0x15a>
 8008150:	9105      	str	r1, [sp, #20]
 8008152:	e7c4      	b.n	80080de <_vfiprintf_r+0x15a>
 8008154:	4604      	mov	r4, r0
 8008156:	2301      	movs	r3, #1
 8008158:	fb0c 2101 	mla	r1, ip, r1, r2
 800815c:	e7f0      	b.n	8008140 <_vfiprintf_r+0x1bc>
 800815e:	ab03      	add	r3, sp, #12
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	462a      	mov	r2, r5
 8008164:	4630      	mov	r0, r6
 8008166:	4b13      	ldr	r3, [pc, #76]	; (80081b4 <_vfiprintf_r+0x230>)
 8008168:	a904      	add	r1, sp, #16
 800816a:	f7fb fe69 	bl	8003e40 <_printf_float>
 800816e:	4607      	mov	r7, r0
 8008170:	1c78      	adds	r0, r7, #1
 8008172:	d1d6      	bne.n	8008122 <_vfiprintf_r+0x19e>
 8008174:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008176:	07d9      	lsls	r1, r3, #31
 8008178:	d405      	bmi.n	8008186 <_vfiprintf_r+0x202>
 800817a:	89ab      	ldrh	r3, [r5, #12]
 800817c:	059a      	lsls	r2, r3, #22
 800817e:	d402      	bmi.n	8008186 <_vfiprintf_r+0x202>
 8008180:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008182:	f7fc fdd1 	bl	8004d28 <__retarget_lock_release_recursive>
 8008186:	89ab      	ldrh	r3, [r5, #12]
 8008188:	065b      	lsls	r3, r3, #25
 800818a:	f53f af1d 	bmi.w	8007fc8 <_vfiprintf_r+0x44>
 800818e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008190:	e71c      	b.n	8007fcc <_vfiprintf_r+0x48>
 8008192:	ab03      	add	r3, sp, #12
 8008194:	9300      	str	r3, [sp, #0]
 8008196:	462a      	mov	r2, r5
 8008198:	4630      	mov	r0, r6
 800819a:	4b06      	ldr	r3, [pc, #24]	; (80081b4 <_vfiprintf_r+0x230>)
 800819c:	a904      	add	r1, sp, #16
 800819e:	f7fc f8ef 	bl	8004380 <_printf_i>
 80081a2:	e7e4      	b.n	800816e <_vfiprintf_r+0x1ea>
 80081a4:	080088c9 	.word	0x080088c9
 80081a8:	080088cf 	.word	0x080088cf
 80081ac:	080088d3 	.word	0x080088d3
 80081b0:	08003e41 	.word	0x08003e41
 80081b4:	08007f61 	.word	0x08007f61

080081b8 <__swbuf_r>:
 80081b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ba:	460e      	mov	r6, r1
 80081bc:	4614      	mov	r4, r2
 80081be:	4605      	mov	r5, r0
 80081c0:	b118      	cbz	r0, 80081ca <__swbuf_r+0x12>
 80081c2:	6a03      	ldr	r3, [r0, #32]
 80081c4:	b90b      	cbnz	r3, 80081ca <__swbuf_r+0x12>
 80081c6:	f7fc fc97 	bl	8004af8 <__sinit>
 80081ca:	69a3      	ldr	r3, [r4, #24]
 80081cc:	60a3      	str	r3, [r4, #8]
 80081ce:	89a3      	ldrh	r3, [r4, #12]
 80081d0:	071a      	lsls	r2, r3, #28
 80081d2:	d525      	bpl.n	8008220 <__swbuf_r+0x68>
 80081d4:	6923      	ldr	r3, [r4, #16]
 80081d6:	b31b      	cbz	r3, 8008220 <__swbuf_r+0x68>
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	6922      	ldr	r2, [r4, #16]
 80081dc:	b2f6      	uxtb	r6, r6
 80081de:	1a98      	subs	r0, r3, r2
 80081e0:	6963      	ldr	r3, [r4, #20]
 80081e2:	4637      	mov	r7, r6
 80081e4:	4283      	cmp	r3, r0
 80081e6:	dc04      	bgt.n	80081f2 <__swbuf_r+0x3a>
 80081e8:	4621      	mov	r1, r4
 80081ea:	4628      	mov	r0, r5
 80081ec:	f7ff fa30 	bl	8007650 <_fflush_r>
 80081f0:	b9e0      	cbnz	r0, 800822c <__swbuf_r+0x74>
 80081f2:	68a3      	ldr	r3, [r4, #8]
 80081f4:	3b01      	subs	r3, #1
 80081f6:	60a3      	str	r3, [r4, #8]
 80081f8:	6823      	ldr	r3, [r4, #0]
 80081fa:	1c5a      	adds	r2, r3, #1
 80081fc:	6022      	str	r2, [r4, #0]
 80081fe:	701e      	strb	r6, [r3, #0]
 8008200:	6962      	ldr	r2, [r4, #20]
 8008202:	1c43      	adds	r3, r0, #1
 8008204:	429a      	cmp	r2, r3
 8008206:	d004      	beq.n	8008212 <__swbuf_r+0x5a>
 8008208:	89a3      	ldrh	r3, [r4, #12]
 800820a:	07db      	lsls	r3, r3, #31
 800820c:	d506      	bpl.n	800821c <__swbuf_r+0x64>
 800820e:	2e0a      	cmp	r6, #10
 8008210:	d104      	bne.n	800821c <__swbuf_r+0x64>
 8008212:	4621      	mov	r1, r4
 8008214:	4628      	mov	r0, r5
 8008216:	f7ff fa1b 	bl	8007650 <_fflush_r>
 800821a:	b938      	cbnz	r0, 800822c <__swbuf_r+0x74>
 800821c:	4638      	mov	r0, r7
 800821e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008220:	4621      	mov	r1, r4
 8008222:	4628      	mov	r0, r5
 8008224:	f000 f806 	bl	8008234 <__swsetup_r>
 8008228:	2800      	cmp	r0, #0
 800822a:	d0d5      	beq.n	80081d8 <__swbuf_r+0x20>
 800822c:	f04f 37ff 	mov.w	r7, #4294967295
 8008230:	e7f4      	b.n	800821c <__swbuf_r+0x64>
	...

08008234 <__swsetup_r>:
 8008234:	b538      	push	{r3, r4, r5, lr}
 8008236:	4b2a      	ldr	r3, [pc, #168]	; (80082e0 <__swsetup_r+0xac>)
 8008238:	4605      	mov	r5, r0
 800823a:	6818      	ldr	r0, [r3, #0]
 800823c:	460c      	mov	r4, r1
 800823e:	b118      	cbz	r0, 8008248 <__swsetup_r+0x14>
 8008240:	6a03      	ldr	r3, [r0, #32]
 8008242:	b90b      	cbnz	r3, 8008248 <__swsetup_r+0x14>
 8008244:	f7fc fc58 	bl	8004af8 <__sinit>
 8008248:	89a3      	ldrh	r3, [r4, #12]
 800824a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800824e:	0718      	lsls	r0, r3, #28
 8008250:	d422      	bmi.n	8008298 <__swsetup_r+0x64>
 8008252:	06d9      	lsls	r1, r3, #27
 8008254:	d407      	bmi.n	8008266 <__swsetup_r+0x32>
 8008256:	2309      	movs	r3, #9
 8008258:	602b      	str	r3, [r5, #0]
 800825a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800825e:	f04f 30ff 	mov.w	r0, #4294967295
 8008262:	81a3      	strh	r3, [r4, #12]
 8008264:	e034      	b.n	80082d0 <__swsetup_r+0x9c>
 8008266:	0758      	lsls	r0, r3, #29
 8008268:	d512      	bpl.n	8008290 <__swsetup_r+0x5c>
 800826a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800826c:	b141      	cbz	r1, 8008280 <__swsetup_r+0x4c>
 800826e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008272:	4299      	cmp	r1, r3
 8008274:	d002      	beq.n	800827c <__swsetup_r+0x48>
 8008276:	4628      	mov	r0, r5
 8008278:	f7fd fbda 	bl	8005a30 <_free_r>
 800827c:	2300      	movs	r3, #0
 800827e:	6363      	str	r3, [r4, #52]	; 0x34
 8008280:	89a3      	ldrh	r3, [r4, #12]
 8008282:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008286:	81a3      	strh	r3, [r4, #12]
 8008288:	2300      	movs	r3, #0
 800828a:	6063      	str	r3, [r4, #4]
 800828c:	6923      	ldr	r3, [r4, #16]
 800828e:	6023      	str	r3, [r4, #0]
 8008290:	89a3      	ldrh	r3, [r4, #12]
 8008292:	f043 0308 	orr.w	r3, r3, #8
 8008296:	81a3      	strh	r3, [r4, #12]
 8008298:	6923      	ldr	r3, [r4, #16]
 800829a:	b94b      	cbnz	r3, 80082b0 <__swsetup_r+0x7c>
 800829c:	89a3      	ldrh	r3, [r4, #12]
 800829e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80082a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082a6:	d003      	beq.n	80082b0 <__swsetup_r+0x7c>
 80082a8:	4621      	mov	r1, r4
 80082aa:	4628      	mov	r0, r5
 80082ac:	f000 f883 	bl	80083b6 <__smakebuf_r>
 80082b0:	89a0      	ldrh	r0, [r4, #12]
 80082b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082b6:	f010 0301 	ands.w	r3, r0, #1
 80082ba:	d00a      	beq.n	80082d2 <__swsetup_r+0x9e>
 80082bc:	2300      	movs	r3, #0
 80082be:	60a3      	str	r3, [r4, #8]
 80082c0:	6963      	ldr	r3, [r4, #20]
 80082c2:	425b      	negs	r3, r3
 80082c4:	61a3      	str	r3, [r4, #24]
 80082c6:	6923      	ldr	r3, [r4, #16]
 80082c8:	b943      	cbnz	r3, 80082dc <__swsetup_r+0xa8>
 80082ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80082ce:	d1c4      	bne.n	800825a <__swsetup_r+0x26>
 80082d0:	bd38      	pop	{r3, r4, r5, pc}
 80082d2:	0781      	lsls	r1, r0, #30
 80082d4:	bf58      	it	pl
 80082d6:	6963      	ldrpl	r3, [r4, #20]
 80082d8:	60a3      	str	r3, [r4, #8]
 80082da:	e7f4      	b.n	80082c6 <__swsetup_r+0x92>
 80082dc:	2000      	movs	r0, #0
 80082de:	e7f7      	b.n	80082d0 <__swsetup_r+0x9c>
 80082e0:	20000088 	.word	0x20000088

080082e4 <_raise_r>:
 80082e4:	291f      	cmp	r1, #31
 80082e6:	b538      	push	{r3, r4, r5, lr}
 80082e8:	4604      	mov	r4, r0
 80082ea:	460d      	mov	r5, r1
 80082ec:	d904      	bls.n	80082f8 <_raise_r+0x14>
 80082ee:	2316      	movs	r3, #22
 80082f0:	6003      	str	r3, [r0, #0]
 80082f2:	f04f 30ff 	mov.w	r0, #4294967295
 80082f6:	bd38      	pop	{r3, r4, r5, pc}
 80082f8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80082fa:	b112      	cbz	r2, 8008302 <_raise_r+0x1e>
 80082fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008300:	b94b      	cbnz	r3, 8008316 <_raise_r+0x32>
 8008302:	4620      	mov	r0, r4
 8008304:	f000 f830 	bl	8008368 <_getpid_r>
 8008308:	462a      	mov	r2, r5
 800830a:	4601      	mov	r1, r0
 800830c:	4620      	mov	r0, r4
 800830e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008312:	f000 b817 	b.w	8008344 <_kill_r>
 8008316:	2b01      	cmp	r3, #1
 8008318:	d00a      	beq.n	8008330 <_raise_r+0x4c>
 800831a:	1c59      	adds	r1, r3, #1
 800831c:	d103      	bne.n	8008326 <_raise_r+0x42>
 800831e:	2316      	movs	r3, #22
 8008320:	6003      	str	r3, [r0, #0]
 8008322:	2001      	movs	r0, #1
 8008324:	e7e7      	b.n	80082f6 <_raise_r+0x12>
 8008326:	2400      	movs	r4, #0
 8008328:	4628      	mov	r0, r5
 800832a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800832e:	4798      	blx	r3
 8008330:	2000      	movs	r0, #0
 8008332:	e7e0      	b.n	80082f6 <_raise_r+0x12>

08008334 <raise>:
 8008334:	4b02      	ldr	r3, [pc, #8]	; (8008340 <raise+0xc>)
 8008336:	4601      	mov	r1, r0
 8008338:	6818      	ldr	r0, [r3, #0]
 800833a:	f7ff bfd3 	b.w	80082e4 <_raise_r>
 800833e:	bf00      	nop
 8008340:	20000088 	.word	0x20000088

08008344 <_kill_r>:
 8008344:	b538      	push	{r3, r4, r5, lr}
 8008346:	2300      	movs	r3, #0
 8008348:	4d06      	ldr	r5, [pc, #24]	; (8008364 <_kill_r+0x20>)
 800834a:	4604      	mov	r4, r0
 800834c:	4608      	mov	r0, r1
 800834e:	4611      	mov	r1, r2
 8008350:	602b      	str	r3, [r5, #0]
 8008352:	f7fa f83d 	bl	80023d0 <_kill>
 8008356:	1c43      	adds	r3, r0, #1
 8008358:	d102      	bne.n	8008360 <_kill_r+0x1c>
 800835a:	682b      	ldr	r3, [r5, #0]
 800835c:	b103      	cbz	r3, 8008360 <_kill_r+0x1c>
 800835e:	6023      	str	r3, [r4, #0]
 8008360:	bd38      	pop	{r3, r4, r5, pc}
 8008362:	bf00      	nop
 8008364:	200003e4 	.word	0x200003e4

08008368 <_getpid_r>:
 8008368:	f7fa b82b 	b.w	80023c2 <_getpid>

0800836c <__swhatbuf_r>:
 800836c:	b570      	push	{r4, r5, r6, lr}
 800836e:	460c      	mov	r4, r1
 8008370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008374:	4615      	mov	r5, r2
 8008376:	2900      	cmp	r1, #0
 8008378:	461e      	mov	r6, r3
 800837a:	b096      	sub	sp, #88	; 0x58
 800837c:	da0c      	bge.n	8008398 <__swhatbuf_r+0x2c>
 800837e:	89a3      	ldrh	r3, [r4, #12]
 8008380:	2100      	movs	r1, #0
 8008382:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008386:	bf0c      	ite	eq
 8008388:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800838c:	2340      	movne	r3, #64	; 0x40
 800838e:	2000      	movs	r0, #0
 8008390:	6031      	str	r1, [r6, #0]
 8008392:	602b      	str	r3, [r5, #0]
 8008394:	b016      	add	sp, #88	; 0x58
 8008396:	bd70      	pop	{r4, r5, r6, pc}
 8008398:	466a      	mov	r2, sp
 800839a:	f000 f849 	bl	8008430 <_fstat_r>
 800839e:	2800      	cmp	r0, #0
 80083a0:	dbed      	blt.n	800837e <__swhatbuf_r+0x12>
 80083a2:	9901      	ldr	r1, [sp, #4]
 80083a4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80083a8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80083ac:	4259      	negs	r1, r3
 80083ae:	4159      	adcs	r1, r3
 80083b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083b4:	e7eb      	b.n	800838e <__swhatbuf_r+0x22>

080083b6 <__smakebuf_r>:
 80083b6:	898b      	ldrh	r3, [r1, #12]
 80083b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80083ba:	079d      	lsls	r5, r3, #30
 80083bc:	4606      	mov	r6, r0
 80083be:	460c      	mov	r4, r1
 80083c0:	d507      	bpl.n	80083d2 <__smakebuf_r+0x1c>
 80083c2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80083c6:	6023      	str	r3, [r4, #0]
 80083c8:	6123      	str	r3, [r4, #16]
 80083ca:	2301      	movs	r3, #1
 80083cc:	6163      	str	r3, [r4, #20]
 80083ce:	b002      	add	sp, #8
 80083d0:	bd70      	pop	{r4, r5, r6, pc}
 80083d2:	466a      	mov	r2, sp
 80083d4:	ab01      	add	r3, sp, #4
 80083d6:	f7ff ffc9 	bl	800836c <__swhatbuf_r>
 80083da:	9900      	ldr	r1, [sp, #0]
 80083dc:	4605      	mov	r5, r0
 80083de:	4630      	mov	r0, r6
 80083e0:	f7fd fb96 	bl	8005b10 <_malloc_r>
 80083e4:	b948      	cbnz	r0, 80083fa <__smakebuf_r+0x44>
 80083e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083ea:	059a      	lsls	r2, r3, #22
 80083ec:	d4ef      	bmi.n	80083ce <__smakebuf_r+0x18>
 80083ee:	f023 0303 	bic.w	r3, r3, #3
 80083f2:	f043 0302 	orr.w	r3, r3, #2
 80083f6:	81a3      	strh	r3, [r4, #12]
 80083f8:	e7e3      	b.n	80083c2 <__smakebuf_r+0xc>
 80083fa:	89a3      	ldrh	r3, [r4, #12]
 80083fc:	6020      	str	r0, [r4, #0]
 80083fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008402:	81a3      	strh	r3, [r4, #12]
 8008404:	9b00      	ldr	r3, [sp, #0]
 8008406:	6120      	str	r0, [r4, #16]
 8008408:	6163      	str	r3, [r4, #20]
 800840a:	9b01      	ldr	r3, [sp, #4]
 800840c:	b15b      	cbz	r3, 8008426 <__smakebuf_r+0x70>
 800840e:	4630      	mov	r0, r6
 8008410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008414:	f000 f81e 	bl	8008454 <_isatty_r>
 8008418:	b128      	cbz	r0, 8008426 <__smakebuf_r+0x70>
 800841a:	89a3      	ldrh	r3, [r4, #12]
 800841c:	f023 0303 	bic.w	r3, r3, #3
 8008420:	f043 0301 	orr.w	r3, r3, #1
 8008424:	81a3      	strh	r3, [r4, #12]
 8008426:	89a3      	ldrh	r3, [r4, #12]
 8008428:	431d      	orrs	r5, r3
 800842a:	81a5      	strh	r5, [r4, #12]
 800842c:	e7cf      	b.n	80083ce <__smakebuf_r+0x18>
	...

08008430 <_fstat_r>:
 8008430:	b538      	push	{r3, r4, r5, lr}
 8008432:	2300      	movs	r3, #0
 8008434:	4d06      	ldr	r5, [pc, #24]	; (8008450 <_fstat_r+0x20>)
 8008436:	4604      	mov	r4, r0
 8008438:	4608      	mov	r0, r1
 800843a:	4611      	mov	r1, r2
 800843c:	602b      	str	r3, [r5, #0]
 800843e:	f7fa f825 	bl	800248c <_fstat>
 8008442:	1c43      	adds	r3, r0, #1
 8008444:	d102      	bne.n	800844c <_fstat_r+0x1c>
 8008446:	682b      	ldr	r3, [r5, #0]
 8008448:	b103      	cbz	r3, 800844c <_fstat_r+0x1c>
 800844a:	6023      	str	r3, [r4, #0]
 800844c:	bd38      	pop	{r3, r4, r5, pc}
 800844e:	bf00      	nop
 8008450:	200003e4 	.word	0x200003e4

08008454 <_isatty_r>:
 8008454:	b538      	push	{r3, r4, r5, lr}
 8008456:	2300      	movs	r3, #0
 8008458:	4d05      	ldr	r5, [pc, #20]	; (8008470 <_isatty_r+0x1c>)
 800845a:	4604      	mov	r4, r0
 800845c:	4608      	mov	r0, r1
 800845e:	602b      	str	r3, [r5, #0]
 8008460:	f7fa f823 	bl	80024aa <_isatty>
 8008464:	1c43      	adds	r3, r0, #1
 8008466:	d102      	bne.n	800846e <_isatty_r+0x1a>
 8008468:	682b      	ldr	r3, [r5, #0]
 800846a:	b103      	cbz	r3, 800846e <_isatty_r+0x1a>
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	bd38      	pop	{r3, r4, r5, pc}
 8008470:	200003e4 	.word	0x200003e4

08008474 <_init>:
 8008474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008476:	bf00      	nop
 8008478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800847a:	bc08      	pop	{r3}
 800847c:	469e      	mov	lr, r3
 800847e:	4770      	bx	lr

08008480 <_fini>:
 8008480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008482:	bf00      	nop
 8008484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008486:	bc08      	pop	{r3}
 8008488:	469e      	mov	lr, r3
 800848a:	4770      	bx	lr
